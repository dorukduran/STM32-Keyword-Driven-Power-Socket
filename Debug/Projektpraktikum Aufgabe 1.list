
Projektpraktikum Aufgabe 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019d0c  08012e00  08012e00  00022e00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cb0c  0802cb0c  00040b40  2**0
                  CONTENTS
  4 .ARM          00000008  0802cb0c  0802cb0c  0003cb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cb14  0802cb14  00040b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802cb14  0802cb14  0003cb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0802cb1c  0802cb1c  0003cb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b40  20000000  0802cb24  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040b40  2**0
                  CONTENTS
 10 .bss          00015788  20000b40  20000b40  00040b40  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  200162c8  200162c8  00040b40  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040b40  2**0
                  CONTENTS, READONLY
 13 .comment      00000101  00000000  00000000  00040b70  2**0
                  CONTENTS, READONLY
 14 .debug_info   000331b1  00000000  00000000  00040c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005792  00000000  00000000  00073e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cd0  00000000  00000000  000795b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015bc  00000000  00000000  0007b288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002dc92  00000000  00000000  0007c844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024bb4  00000000  00000000  000aa4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010728c  00000000  00000000  000cf08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a67c  00000000  00000000  001d6318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001e0994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002a9c  00000000  00000000  001e0a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000060  00000000  00000000  001e34a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000b40 	.word	0x20000b40
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012de8 	.word	0x08012de8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000b44 	.word	0x20000b44
 80001ec:	08012de8 	.word	0x08012de8

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b970 	b.w	8001040 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	460d      	mov	r5, r1
 8000d80:	4604      	mov	r4, r0
 8000d82:	460f      	mov	r7, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14a      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0xe2>
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	b143      	cbz	r3, 8000da6 <__udivmoddi4+0x2e>
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	f1c3 0220 	rsb	r2, r3, #32
 8000d9c:	409f      	lsls	r7, r3
 8000d9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000da2:	4317      	orrs	r7, r2
 8000da4:	409c      	lsls	r4, r3
 8000da6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000daa:	fa1f f58c 	uxth.w	r5, ip
 8000dae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000db2:	0c22      	lsrs	r2, r4, #16
 8000db4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dbc:	fb01 f005 	mul.w	r0, r1, r5
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x62>
 8000dc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dcc:	f080 811c 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dd0:	4290      	cmp	r0, r2
 8000dd2:	f240 8119 	bls.w	8001008 <__udivmoddi4+0x290>
 8000dd6:	3902      	subs	r1, #2
 8000dd8:	4462      	add	r2, ip
 8000dda:	1a12      	subs	r2, r2, r0
 8000ddc:	b2a4      	uxth	r4, r4
 8000dde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dea:	fb00 f505 	mul.w	r5, r0, r5
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x90>
 8000df2:	eb1c 0404 	adds.w	r4, ip, r4
 8000df6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfa:	f080 8107 	bcs.w	800100c <__udivmoddi4+0x294>
 8000dfe:	42a5      	cmp	r5, r4
 8000e00:	f240 8104 	bls.w	800100c <__udivmoddi4+0x294>
 8000e04:	4464      	add	r4, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11e      	cbz	r6, 8000e1a <__udivmoddi4+0xa2>
 8000e12:	40dc      	lsrs	r4, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0xbc>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80ed 	beq.w	8001002 <__udivmoddi4+0x28a>
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	fab3 f183 	clz	r1, r3
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d149      	bne.n	8000ed0 <__udivmoddi4+0x158>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	d302      	bcc.n	8000e46 <__udivmoddi4+0xce>
 8000e40:	4282      	cmp	r2, r0
 8000e42:	f200 80f8 	bhi.w	8001036 <__udivmoddi4+0x2be>
 8000e46:	1a84      	subs	r4, r0, r2
 8000e48:	eb65 0203 	sbc.w	r2, r5, r3
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	4617      	mov	r7, r2
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d0e2      	beq.n	8000e1a <__udivmoddi4+0xa2>
 8000e54:	e9c6 4700 	strd	r4, r7, [r6]
 8000e58:	e7df      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e5a:	b902      	cbnz	r2, 8000e5e <__udivmoddi4+0xe6>
 8000e5c:	deff      	udf	#255	; 0xff
 8000e5e:	fab2 f382 	clz	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	2101      	movs	r1, #1
 8000e74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e78:	fb07 2015 	mls	r0, r7, r5, r2
 8000e7c:	0c22      	lsrs	r2, r4, #16
 8000e7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e82:	fb0e f005 	mul.w	r0, lr, r5
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4290      	cmp	r0, r2
 8000e96:	f200 80cb 	bhi.w	8001030 <__udivmoddi4+0x2b8>
 8000e9a:	4645      	mov	r5, r8
 8000e9c:	1a12      	subs	r2, r2, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eac:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb0:	45a6      	cmp	lr, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x14e>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ebc:	d202      	bcs.n	8000ec4 <__udivmoddi4+0x14c>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f200 80bb 	bhi.w	800103a <__udivmoddi4+0x2c2>
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ece:	e79f      	b.n	8000e10 <__udivmoddi4+0x98>
 8000ed0:	f1c1 0720 	rsb	r7, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ede:	fa05 f401 	lsl.w	r4, r5, r1
 8000ee2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee6:	40fd      	lsrs	r5, r7
 8000ee8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	fb09 5518 	mls	r5, r9, r8, r5
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f00:	fb08 f50e 	mul.w	r5, r8, lr
 8000f04:	42a5      	cmp	r5, r4
 8000f06:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f18:	f080 8088 	bcs.w	800102c <__udivmoddi4+0x2b4>
 8000f1c:	42a5      	cmp	r5, r4
 8000f1e:	f240 8085 	bls.w	800102c <__udivmoddi4+0x2b4>
 8000f22:	f1a8 0802 	sub.w	r8, r8, #2
 8000f26:	4464      	add	r4, ip
 8000f28:	1b64      	subs	r4, r4, r5
 8000f2a:	b29d      	uxth	r5, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f48:	d26c      	bcs.n	8001024 <__udivmoddi4+0x2ac>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	d96a      	bls.n	8001024 <__udivmoddi4+0x2ac>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	4464      	add	r4, ip
 8000f52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f56:	fba3 9502 	umull	r9, r5, r3, r2
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	46c8      	mov	r8, r9
 8000f62:	46ae      	mov	lr, r5
 8000f64:	d356      	bcc.n	8001014 <__udivmoddi4+0x29c>
 8000f66:	d053      	beq.n	8001010 <__udivmoddi4+0x298>
 8000f68:	b156      	cbz	r6, 8000f80 <__udivmoddi4+0x208>
 8000f6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f72:	fa04 f707 	lsl.w	r7, r4, r7
 8000f76:	40ca      	lsrs	r2, r1
 8000f78:	40cc      	lsrs	r4, r1
 8000f7a:	4317      	orrs	r7, r2
 8000f7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f80:	4618      	mov	r0, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f88:	f1c3 0120 	rsb	r1, r3, #32
 8000f8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f90:	fa20 f201 	lsr.w	r2, r0, r1
 8000f94:	fa25 f101 	lsr.w	r1, r5, r1
 8000f98:	409d      	lsls	r5, r3
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb6:	428d      	cmp	r5, r1
 8000fb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x258>
 8000fbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc6:	d22f      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000fc8:	428d      	cmp	r5, r1
 8000fca:	d92d      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	1b49      	subs	r1, r1, r5
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe4:	4291      	cmp	r1, r2
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x282>
 8000fe8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ff0:	d216      	bcs.n	8001020 <__udivmoddi4+0x2a8>
 8000ff2:	4291      	cmp	r1, r2
 8000ff4:	d914      	bls.n	8001020 <__udivmoddi4+0x2a8>
 8000ff6:	3d02      	subs	r5, #2
 8000ff8:	4462      	add	r2, ip
 8000ffa:	1a52      	subs	r2, r2, r1
 8000ffc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001000:	e738      	b.n	8000e74 <__udivmoddi4+0xfc>
 8001002:	4631      	mov	r1, r6
 8001004:	4630      	mov	r0, r6
 8001006:	e708      	b.n	8000e1a <__udivmoddi4+0xa2>
 8001008:	4639      	mov	r1, r7
 800100a:	e6e6      	b.n	8000dda <__udivmoddi4+0x62>
 800100c:	4610      	mov	r0, r2
 800100e:	e6fb      	b.n	8000e08 <__udivmoddi4+0x90>
 8001010:	4548      	cmp	r0, r9
 8001012:	d2a9      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001014:	ebb9 0802 	subs.w	r8, r9, r2
 8001018:	eb65 0e0c 	sbc.w	lr, r5, ip
 800101c:	3b01      	subs	r3, #1
 800101e:	e7a3      	b.n	8000f68 <__udivmoddi4+0x1f0>
 8001020:	4645      	mov	r5, r8
 8001022:	e7ea      	b.n	8000ffa <__udivmoddi4+0x282>
 8001024:	462b      	mov	r3, r5
 8001026:	e794      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001028:	4640      	mov	r0, r8
 800102a:	e7d1      	b.n	8000fd0 <__udivmoddi4+0x258>
 800102c:	46d0      	mov	r8, sl
 800102e:	e77b      	b.n	8000f28 <__udivmoddi4+0x1b0>
 8001030:	3d02      	subs	r5, #2
 8001032:	4462      	add	r2, ip
 8001034:	e732      	b.n	8000e9c <__udivmoddi4+0x124>
 8001036:	4608      	mov	r0, r1
 8001038:	e70a      	b.n	8000e50 <__udivmoddi4+0xd8>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e742      	b.n	8000ec6 <__udivmoddi4+0x14e>

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <_ZN3KWSC1Ev>:
#include "kws.h"

/*
	Constructor for the keyword spotting system
*/
KWS::KWS() : network(AI_HANDLE_NULL) {
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ai_error ai_err;
  ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	339c      	adds	r3, #156	; 0x9c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f008 fdc4 	bl	8009be8 <ai_network_create>
 8001060:	4603      	mov	r3, r0
 8001062:	60fb      	str	r3, [r7, #12]
  if (ai_err.type != AI_ERROR_NONE) {
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d009      	beq.n	800107e <_ZN3KWSC1Ev+0x3a>
	  printf("E: AI error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	4619      	mov	r1, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001074:	461a      	mov	r2, r3
 8001076:	4818      	ldr	r0, [pc, #96]	; (80010d8 <_ZN3KWSC1Ev+0x94>)
 8001078:	f00f ff42 	bl	8010f00 <iprintf>
 800107c:	e027      	b.n	80010ce <_ZN3KWSC1Ev+0x8a>
    return;
  }
  printf("NN created...\r\n");
 800107e:	4817      	ldr	r0, [pc, #92]	; (80010dc <_ZN3KWSC1Ev+0x98>)
 8001080:	f00f ffa4 	bl	8010fcc <puts>

  aiInit();
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f82b 	bl	80010e0 <_ZN3KWS6aiInitEv>

  ai_input[0] = *AI_NETWORK_IN;
 800108a:	2100      	movs	r1, #0
 800108c:	2000      	movs	r0, #0
 800108e:	f008 fdc1 	bl	8009c14 <ai_network_inputs_get>
 8001092:	4602      	mov	r2, r0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800109a:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 800109e:	4615      	mov	r5, r2
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ai_output[0] = *AI_NETWORK_OUT;
 80010ac:	2100      	movs	r1, #0
 80010ae:	2000      	movs	r0, #0
 80010b0:	f008 fdca 	bl	8009c48 <ai_network_outputs_get>
 80010b4:	4602      	mov	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80010bc:	f603 043c 	addw	r4, r3, #2108	; 0x83c
 80010c0:	4615      	mov	r5, r2
 80010c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

}
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bdb0      	pop	{r4, r5, r7, pc}
 80010d8:	08012e00 	.word	0x08012e00
 80010dc:	08012e20 	.word	0x08012e20

080010e0 <_ZN3KWS6aiInitEv>:

/*
	The network need to be initialized once before it can be used for the inference.
*/
int KWS::aiInit() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b092      	sub	sp, #72	; 0x48
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	ai_error ai_err;
	printf("Initializing NN...\r\n");
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <_ZN3KWS6aiInitEv+0x88>)
 80010ea:	f00f ff6f 	bl	8010fcc <puts>
	ai_network_params params = { AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()), AI_NETWORK_DATA_ACTIVATIONS(activations) };
 80010ee:	f008 fe79 	bl	8009de4 <ai_network_data_weights_get>
 80010f2:	4602      	mov	r2, r0
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f008 fe3e 	bl	8009d7c <ai_network_data_weights_buffer_get>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8001106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f008 fe01 	bl	8009d14 <ai_network_data_activations_buffer_get>
	if (!ai_network_init(network, &params)) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001118:	f107 020c 	add.w	r2, r7, #12
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f008 fdac 	bl	8009c7c <ai_network_init>
 8001124:	4603      	mov	r3, r0
 8001126:	f083 0301 	eor.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <_ZN3KWS6aiInitEv+0x78>
		ai_err = ai_network_get_error(network);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001136:	4618      	mov	r0, r3
 8001138:	f008 fd4a 	bl	8009bd0 <ai_network_get_error>
 800113c:	4603      	mov	r3, r0
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
		printf("E: AI error - type=%d code=%d\r\n", ai_err.type, ai_err.code);
 8001140:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001144:	4619      	mov	r1, r3
 8001146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001148:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800114c:	461a      	mov	r2, r3
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <_ZN3KWS6aiInitEv+0x8c>)
 8001150:	f00f fed6 	bl	8010f00 <iprintf>
		return 1;
 8001154:	2301      	movs	r3, #1
 8001156:	e003      	b.n	8001160 <_ZN3KWS6aiInitEv+0x80>
	} else {
		printf("Initialization successful\r\n");
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <_ZN3KWS6aiInitEv+0x90>)
 800115a:	f00f ff37 	bl	8010fcc <puts>
	}
	return 0;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3748      	adds	r7, #72	; 0x48
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	08012e30 	.word	0x08012e30
 800116c:	08012e00 	.word	0x08012e00
 8001170:	08012e44 	.word	0x08012e44

08001174 <_ZN3KWS12runInferenceEi>:

// TODO Vervollständige diese Funktion
/*
	Runs the inference and returns index of detected word. When being called, the batch_size can be chosen as 1
*/
int KWS::runInference(int batch_size) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
	ai_error ai_err;

	ai_input[0].data = AI_HANDLE_PTR(mMFCC);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f503 43b0 	add.w	r3, r3, #22528	; 0x5800
 8001184:	3358      	adds	r3, #88	; 0x58
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 800118c:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3324      	adds	r3, #36	; 0x24
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 800119a:	f8c2 3840 	str.w	r3, [r2, #2112]	; 0x840

	//////////////////////////////////////////////////////////////////////////////////////
	////////////////////////// TODO füge hier deinen Code ein ////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f503 43b0 	add.w	r3, r3, #22528	; 0x5800
 80011aa:	3320      	adds	r3, #32
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	f502 42b0 	add.w	r2, r2, #22528	; 0x5800
 80011b2:	323c      	adds	r2, #60	; 0x3c
 80011b4:	4619      	mov	r1, r3
 80011b6:	f008 fd9d 	bl	8009cf4 <ai_network_run>
 80011ba:	6138      	str	r0, [r7, #16]
    if (nbatch != batch_size) {
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d007      	beq.n	80011d4 <_ZN3KWS12runInferenceEi+0x60>

        ai_err = ai_network_get_error(network);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011ca:	4618      	mov	r0, r3
 80011cc:	f008 fd00 	bl	8009bd0 <ai_network_get_error>
 80011d0:	4603      	mov	r3, r0
 80011d2:	60fb      	str	r3, [r7, #12]

    }

	//////////////////////////////////////////////////////////////////////////////////////

	float max_value = out_data[0];
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	61fb      	str	r3, [r7, #28]
	uint32_t max_index = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e01e      	b.n	8001222 <_ZN3KWS12runInferenceEi+0xae>
		//printf("%lu: %f\r\n", (unsigned long) i, out_data[i]);
		// find maximum
		if (i > 0) {
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d018      	beq.n	800121c <_ZN3KWS12runInferenceEi+0xa8>
			if (max_value < out_data[i]) {
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3308      	adds	r3, #8
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	3304      	adds	r3, #4
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	d509      	bpl.n	800121c <_ZN3KWS12runInferenceEi+0xa8>
				max_value = out_data[i];
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3308      	adds	r3, #8
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	3304      	adds	r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61fb      	str	r3, [r7, #28]
				max_index = i;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b1d      	cmp	r3, #29
 8001226:	d9dd      	bls.n	80011e4 <_ZN3KWS12runInferenceEi+0x70>
			}
		}
	}
	return max_index;
 8001228:	69bb      	ldr	r3, [r7, #24]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <_ZN3KWS11indexToWordB5cxx11Ei>:

std::string KWS::indexToWord(int index) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  switch (index) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b07      	cmp	r3, #7
 8001244:	f200 80a4 	bhi.w	8001390 <_ZN3KWS11indexToWordB5cxx11Ei+0x15c>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <_ZN3KWS11indexToWordB5cxx11Ei+0x1c>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	08001271 	.word	0x08001271
 8001254:	08001295 	.word	0x08001295
 8001258:	080012b9 	.word	0x080012b9
 800125c:	080012dd 	.word	0x080012dd
 8001260:	08001301 	.word	0x08001301
 8001264:	08001325 	.word	0x08001325
 8001268:	08001349 	.word	0x08001349
 800126c:	0800136d 	.word	0x0800136d
    case 0: return "YES";
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4618      	mov	r0, r3
 8001276:	f00c fbd0 	bl	800da1a <_ZNSaIcEC1Ev>
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	461a      	mov	r2, r3
 8001280:	494e      	ldr	r1, [pc, #312]	; (80013bc <_ZN3KWS11indexToWordB5cxx11Ei+0x188>)
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f00c fd4e 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4618      	mov	r0, r3
 800128e:	f00c fbc5 	bl	800da1c <_ZNSaIcED1Ev>
    case 5: return "TWO";
    case 6: return "THREE";
    case 7: return "UNKNOWN";
    default: return "_ERROR_";
	}
}
 8001292:	e08e      	b.n	80013b2 <_ZN3KWS11indexToWordB5cxx11Ei+0x17e>
    case 1: return "NO";
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f00c fbbe 	bl	800da1a <_ZNSaIcEC1Ev>
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	461a      	mov	r2, r3
 80012a4:	4946      	ldr	r1, [pc, #280]	; (80013c0 <_ZN3KWS11indexToWordB5cxx11Ei+0x18c>)
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f00c fd3c 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00c fbb3 	bl	800da1c <_ZNSaIcED1Ev>
}
 80012b6:	e07c      	b.n	80013b2 <_ZN3KWS11indexToWordB5cxx11Ei+0x17e>
    case 2: return "ON";
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4618      	mov	r0, r3
 80012be:	f00c fbac 	bl	800da1a <_ZNSaIcEC1Ev>
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	461a      	mov	r2, r3
 80012c8:	493e      	ldr	r1, [pc, #248]	; (80013c4 <_ZN3KWS11indexToWordB5cxx11Ei+0x190>)
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f00c fd2a 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00c fba1 	bl	800da1c <_ZNSaIcED1Ev>
}
 80012da:	e06a      	b.n	80013b2 <_ZN3KWS11indexToWordB5cxx11Ei+0x17e>
    case 3: return "OFF";
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00c fb9a 	bl	800da1a <_ZNSaIcEC1Ev>
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	461a      	mov	r2, r3
 80012ec:	4936      	ldr	r1, [pc, #216]	; (80013c8 <_ZN3KWS11indexToWordB5cxx11Ei+0x194>)
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f00c fd18 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00c fb8f 	bl	800da1c <_ZNSaIcED1Ev>
}
 80012fe:	e058      	b.n	80013b2 <_ZN3KWS11indexToWordB5cxx11Ei+0x17e>
    case 4: return "ONE";
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4618      	mov	r0, r3
 8001306:	f00c fb88 	bl	800da1a <_ZNSaIcEC1Ev>
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	461a      	mov	r2, r3
 8001310:	492e      	ldr	r1, [pc, #184]	; (80013cc <_ZN3KWS11indexToWordB5cxx11Ei+0x198>)
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f00c fd06 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4618      	mov	r0, r3
 800131e:	f00c fb7d 	bl	800da1c <_ZNSaIcED1Ev>
}
 8001322:	e046      	b.n	80013b2 <_ZN3KWS11indexToWordB5cxx11Ei+0x17e>
    case 5: return "TWO";
 8001324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001328:	4618      	mov	r0, r3
 800132a:	f00c fb76 	bl	800da1a <_ZNSaIcEC1Ev>
 800132e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001332:	461a      	mov	r2, r3
 8001334:	4926      	ldr	r1, [pc, #152]	; (80013d0 <_ZN3KWS11indexToWordB5cxx11Ei+0x19c>)
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f00c fcf4 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800133c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001340:	4618      	mov	r0, r3
 8001342:	f00c fb6b 	bl	800da1c <_ZNSaIcED1Ev>
}
 8001346:	e034      	b.n	80013b2 <_ZN3KWS11indexToWordB5cxx11Ei+0x17e>
    case 6: return "THREE";
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	4618      	mov	r0, r3
 800134e:	f00c fb64 	bl	800da1a <_ZNSaIcEC1Ev>
 8001352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001356:	461a      	mov	r2, r3
 8001358:	491e      	ldr	r1, [pc, #120]	; (80013d4 <_ZN3KWS11indexToWordB5cxx11Ei+0x1a0>)
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f00c fce2 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001364:	4618      	mov	r0, r3
 8001366:	f00c fb59 	bl	800da1c <_ZNSaIcED1Ev>
}
 800136a:	e022      	b.n	80013b2 <_ZN3KWS11indexToWordB5cxx11Ei+0x17e>
    case 7: return "UNKNOWN";
 800136c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001370:	4618      	mov	r0, r3
 8001372:	f00c fb52 	bl	800da1a <_ZNSaIcEC1Ev>
 8001376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800137a:	461a      	mov	r2, r3
 800137c:	4916      	ldr	r1, [pc, #88]	; (80013d8 <_ZN3KWS11indexToWordB5cxx11Ei+0x1a4>)
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f00c fcd0 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001384:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001388:	4618      	mov	r0, r3
 800138a:	f00c fb47 	bl	800da1c <_ZNSaIcED1Ev>
}
 800138e:	e010      	b.n	80013b2 <_ZN3KWS11indexToWordB5cxx11Ei+0x17e>
    default: return "_ERROR_";
 8001390:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001394:	4618      	mov	r0, r3
 8001396:	f00c fb40 	bl	800da1a <_ZNSaIcEC1Ev>
 800139a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800139e:	461a      	mov	r2, r3
 80013a0:	490e      	ldr	r1, [pc, #56]	; (80013dc <_ZN3KWS11indexToWordB5cxx11Ei+0x1a8>)
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f00c fcbe 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00c fb35 	bl	800da1c <_ZNSaIcED1Ev>
}
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	3738      	adds	r7, #56	; 0x38
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	08013098 	.word	0x08013098
 80013c0:	0801309c 	.word	0x0801309c
 80013c4:	080130a0 	.word	0x080130a0
 80013c8:	080130a4 	.word	0x080130a4
 80013cc:	080130a8 	.word	0x080130a8
 80013d0:	080130ac 	.word	0x080130ac
 80013d4:	080130b0 	.word	0x080130b0
 80013d8:	080130b8 	.word	0x080130b8
 80013dc:	080130c0 	.word	0x080130c0

080013e0 <_LCD_SendInternal>:
#define LCD_DELAY_MS 5
#define LCD_I2C_TIMEOUT 200
#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
 80013ec:	4613      	mov	r3, r2
 80013ee:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	e010      	b.n	8001418 <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6858      	ldr	r0, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b299      	uxth	r1, r3
 8001400:	23c8      	movs	r3, #200	; 0xc8
 8001402:	2201      	movs	r2, #1
 8001404:	f004 ff82 	bl	800630c <HAL_I2C_IsDeviceReady>
 8001408:	4603      	mov	r3, r0
 800140a:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	3301      	adds	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b04      	cmp	r3, #4
 800141c:	ddeb      	ble.n	80013f6 <_LCD_SendInternal+0x16>
 800141e:	e000      	b.n	8001422 <_LCD_SendInternal+0x42>
            break;
 8001420:	bf00      	nop
    }
    if(res!=HAL_OK) {
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <_LCD_SendInternal+0x4c>
    	return res;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	e046      	b.n	80014ba <_LCD_SendInternal+0xda>
    }


    uint8_t up = data & 0xF0;
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	f023 030f 	bic.w	r3, r3, #15
 8001432:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7a1b      	ldrb	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <_LCD_SendInternal+0x66>
 8001442:	2308      	movs	r3, #8
 8001444:	e000      	b.n	8001448 <_LCD_SendInternal+0x68>
 8001446:	2300      	movs	r3, #0
 8001448:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	78bb      	ldrb	r3, [r7, #2]
 800144e:	4313      	orrs	r3, r2
 8001450:	b2da      	uxtb	r2, r3
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	4313      	orrs	r3, r2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	b2db      	uxtb	r3, r3
 800145e:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	78bb      	ldrb	r3, [r7, #2]
 8001464:	4313      	orrs	r3, r2
 8001466:	b2da      	uxtb	r2, r3
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	4313      	orrs	r3, r2
 800146c:	b2db      	uxtb	r3, r3
 800146e:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 8001470:	7bba      	ldrb	r2, [r7, #14]
 8001472:	78bb      	ldrb	r3, [r7, #2]
 8001474:	4313      	orrs	r3, r2
 8001476:	b2da      	uxtb	r2, r3
 8001478:	7b7b      	ldrb	r3, [r7, #13]
 800147a:	4313      	orrs	r3, r2
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	b2db      	uxtb	r3, r3
 8001484:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 8001486:	7bba      	ldrb	r2, [r7, #14]
 8001488:	78bb      	ldrb	r3, [r7, #2]
 800148a:	4313      	orrs	r3, r2
 800148c:	b2da      	uxtb	r2, r3
 800148e:	7b7b      	ldrb	r3, [r7, #13]
 8001490:	4313      	orrs	r3, r2
 8001492:	b2db      	uxtb	r3, r3
 8001494:	72fb      	strb	r3, [r7, #11]

    //TODO send data_arr to the device
    res = HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_addr, data_arr, sizeof(data_arr), LCD_I2C_TIMEOUT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6858      	ldr	r0, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b299      	uxth	r1, r3
 80014a0:	f107 0208 	add.w	r2, r7, #8
 80014a4:	23c8      	movs	r3, #200	; 0xc8
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2304      	movs	r3, #4
 80014aa:	f004 fe31 	bl	8006110 <HAL_I2C_Master_Transmit>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]

    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 80014b2:	2005      	movs	r0, #5
 80014b4:	f003 fb20 	bl	8004af8 <HAL_Delay>
    return res;
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff83 	bl	80013e0 <_LCD_SendInternal>
 80014da:	4603      	mov	r3, r0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_LCD_SendData>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	2201      	movs	r2, #1
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff72 	bl	80013e0 <_LCD_SendInternal>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <LCD_Print>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 8001510:	e00f      	b.n	8001532 <LCD_Print+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffe3 	bl	80014e4 <_LCD_SendData>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
        RETURN_IF_NOT_OK;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <LCD_Print+0x26>
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	e007      	b.n	800153c <LCD_Print+0x36>
        str++;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1eb      	bne.n	8001512 <LCD_Print+0xc>
    }
    return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <LCD_Begin>:
    RETURN_IF_NOT_OK;
    status = LCD_Print(dev, " !!! ");
    return status;
}

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 8001552:	2130      	movs	r1, #48	; 0x30
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffb4 	bl	80014c2 <_LCD_SendCommand>
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <LCD_Begin+0x24>
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	e01c      	b.n	80015a2 <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 8001568:	2102      	movs	r1, #2
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffa9 	bl	80014c2 <_LCD_SendCommand>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <LCD_Begin+0x3a>
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	e011      	b.n	80015a2 <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 800157e:	210c      	movs	r1, #12
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff9e 	bl	80014c2 <_LCD_SendCommand>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <LCD_Begin+0x50>
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	e006      	b.n	80015a2 <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 8001594:	2101      	movs	r1, #1
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ff93 	bl	80014c2 <_LCD_SendCommand>
 800159c:	4603      	mov	r3, r0
 800159e:	73fb      	strb	r3, [r7, #15]
    return status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <LCD_SetCursor>:


HAL_StatusTypeDef LCD_SetCursor(LCD_HandleTypeDef *dev, uint8_t row, uint8_t col) {
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	70fb      	strb	r3, [r7, #3]
 80015b6:	4613      	mov	r3, r2
 80015b8:	70bb      	strb	r3, [r7, #2]
	if(row<0 || row>=ROWS || col<0 || col>=COLUMNS) {
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d802      	bhi.n	80015c6 <LCD_SetCursor+0x1c>
 80015c0:	78bb      	ldrb	r3, [r7, #2]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	d901      	bls.n	80015ca <LCD_SetCursor+0x20>
		return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e010      	b.n	80015ec <LCD_SetCursor+0x42>
	}
	uint8_t cmd = row==0?0b10000000:0b11000000;
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <LCD_SetCursor+0x2a>
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	e000      	b.n	80015d6 <LCD_SetCursor+0x2c>
 80015d4:	23c0      	movs	r3, #192	; 0xc0
 80015d6:	73fb      	strb	r3, [r7, #15]
	cmd+=col;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	78bb      	ldrb	r3, [r7, #2]
 80015dc:	4413      	add	r3, r2
 80015de:	73fb      	strb	r3, [r7, #15]
	return _LCD_SendCommand(dev, cmd);
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff6c 	bl	80014c2 <_LCD_SendCommand>
 80015ea:	4603      	mov	r3, r0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <LCD_Clear>:
	vsnprintf(lcd_buffer, COLUMNS + 1, format, args);
	va_end(args);
	return LCD_Print(dev, lcd_buffer);
}

HAL_StatusTypeDef LCD_Clear(LCD_HandleTypeDef *dev) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	return _LCD_SendCommand(dev, 0b00000001);
 80015fc:	2101      	movs	r1, #1
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff5f 	bl	80014c2 <_LCD_SendCommand>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001614:	f003 f9fe 	bl	8004a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001618:	f000 f820 	bl	800165c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161c:	f000 fa1e 	bl	8001a5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001620:	f000 f9fc 	bl	8001a1c <MX_DMA_Init>
  MX_ETH_Init();
 8001624:	f000 f898 	bl	8001758 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001628:	f000 f9a0 	bl	800196c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800162c:	f000 f9c8 	bl	80019c0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2S2_Init();
 8001630:	f000 f920 	bl	8001874 <MX_I2S2_Init>
  MX_TIM4_Init();
 8001634:	f000 f94c 	bl	80018d0 <MX_TIM4_Init>
  MX_CRC_Init();
 8001638:	f000 f87a 	bl	8001730 <MX_CRC_Init>
  MX_I2C2_Init();
 800163c:	f000 f8da 	bl	80017f4 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  my_main(&hi2s2,&htim4,&hi2c2);
 8001640:	4a03      	ldr	r2, [pc, #12]	; (8001650 <main+0x40>)
 8001642:	4904      	ldr	r1, [pc, #16]	; (8001654 <main+0x44>)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <main+0x48>)
 8001646:	f001 fe6f 	bl	8003328 <my_main>
 800164a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000d8c 	.word	0x20000d8c
 8001654:	20000e88 	.word	0x20000e88
 8001658:	20000de0 	.word	0x20000de0

0800165c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b094      	sub	sp, #80	; 0x50
 8001660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	2230      	movs	r2, #48	; 0x30
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f00f fdb8 	bl	80111e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <SystemClock_Config+0xcc>)
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SystemClock_Config+0xcc>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <SystemClock_Config+0xd0>)
 80016a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <SystemClock_Config+0xd0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2302      	movs	r3, #2
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016d0:	23a8      	movs	r3, #168	; 0xa8
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016d8:	2307      	movs	r3, #7
 80016da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	4618      	mov	r0, r3
 80016e2:	f006 f889 	bl	80077f8 <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016ec:	f000 faf0 	bl	8001cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f0:	230f      	movs	r3, #15
 80016f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2302      	movs	r3, #2
 80016f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80016fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2105      	movs	r1, #5
 800170e:	4618      	mov	r0, r3
 8001710:	f006 faea 	bl	8007ce8 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800171a:	f000 fad9 	bl	8001cd0 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3750      	adds	r7, #80	; 0x50
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_CRC_Init+0x20>)
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <MX_CRC_Init+0x24>)
 8001738:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_CRC_Init+0x20>)
 800173c:	f003 fb11 	bl	8004d62 <HAL_CRC_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001746:	f000 fac3 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000cd4 	.word	0x20000cd4
 8001754:	40023000 	.word	0x40023000

08001758 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MX_ETH_Init+0x84>)
 800175e:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <MX_ETH_Init+0x88>)
 8001760:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <MX_ETH_Init+0x8c>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_ETH_Init+0x8c>)
 800176a:	2280      	movs	r2, #128	; 0x80
 800176c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_ETH_Init+0x8c>)
 8001770:	22e1      	movs	r2, #225	; 0xe1
 8001772:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_ETH_Init+0x8c>)
 8001776:	2200      	movs	r2, #0
 8001778:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_ETH_Init+0x8c>)
 800177c:	2200      	movs	r2, #0
 800177e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_ETH_Init+0x8c>)
 8001782:	2200      	movs	r2, #0
 8001784:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_ETH_Init+0x84>)
 8001788:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <MX_ETH_Init+0x8c>)
 800178a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_ETH_Init+0x84>)
 800178e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001792:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_ETH_Init+0x84>)
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <MX_ETH_Init+0x90>)
 8001798:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_ETH_Init+0x84>)
 800179c:	4a13      	ldr	r2, [pc, #76]	; (80017ec <MX_ETH_Init+0x94>)
 800179e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_ETH_Init+0x84>)
 80017a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017a6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <MX_ETH_Init+0x84>)
 80017aa:	f003 fe67 	bl	800547c <HAL_ETH_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80017b4:	f000 fa8c 	bl	8001cd0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80017b8:	2238      	movs	r2, #56	; 0x38
 80017ba:	2100      	movs	r1, #0
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_ETH_Init+0x98>)
 80017be:	f00f fd0f 	bl	80111e0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_ETH_Init+0x98>)
 80017c4:	2221      	movs	r2, #33	; 0x21
 80017c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_ETH_Init+0x98>)
 80017ca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80017ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_ETH_Init+0x98>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000cdc 	.word	0x20000cdc
 80017e0:	40028000 	.word	0x40028000
 80017e4:	20001420 	.word	0x20001420
 80017e8:	20000c34 	.word	0x20000c34
 80017ec:	20000b94 	.word	0x20000b94
 80017f0:	20000b5c 	.word	0x20000b5c

080017f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <MX_I2C2_Init+0x74>)
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <MX_I2C2_Init+0x78>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_I2C2_Init+0x74>)
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <MX_I2C2_Init+0x7c>)
 8001802:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <MX_I2C2_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_I2C2_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <MX_I2C2_Init+0x74>)
 8001812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001816:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_I2C2_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_I2C2_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_I2C2_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_I2C2_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <MX_I2C2_Init+0x74>)
 8001832:	f004 fb29 	bl	8005e88 <HAL_I2C_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800183c:	f000 fa48 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	4809      	ldr	r0, [pc, #36]	; (8001868 <MX_I2C2_Init+0x74>)
 8001844:	f005 f899 	bl	800697a <HAL_I2CEx_ConfigAnalogFilter>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800184e:	f000 fa3f 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001852:	2100      	movs	r1, #0
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_I2C2_Init+0x74>)
 8001856:	f005 f8cc 	bl	80069f2 <HAL_I2CEx_ConfigDigitalFilter>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001860:	f000 fa36 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000d8c 	.word	0x20000d8c
 800186c:	40005800 	.word	0x40005800
 8001870:	000186a0 	.word	0x000186a0

08001874 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <MX_I2S2_Init+0x54>)
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <MX_I2S2_Init+0x58>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_I2S2_Init+0x54>)
 8001880:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001884:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_I2S2_Init+0x54>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_I2S2_Init+0x54>)
 800188e:	2203      	movs	r2, #3
 8001890:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <MX_I2S2_Init+0x54>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_I2S2_Init+0x54>)
 800189a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800189e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_I2S2_Init+0x54>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_I2S2_Init+0x54>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_I2S2_Init+0x54>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_I2S2_Init+0x54>)
 80018b4:	f005 f8dc 	bl	8006a70 <HAL_I2S_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80018be:	f000 fa07 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000de0 	.word	0x20000de0
 80018cc:	40003800 	.word	0x40003800

080018d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_TIM4_Init+0x94>)
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <MX_TIM4_Init+0x98>)
 80018f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <MX_TIM4_Init+0x94>)
 80018f4:	2229      	movs	r2, #41	; 0x29
 80018f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_TIM4_Init+0x94>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_TIM4_Init+0x94>)
 8001900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001904:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_TIM4_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_TIM4_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001912:	4814      	ldr	r0, [pc, #80]	; (8001964 <MX_TIM4_Init+0x94>)
 8001914:	f006 fe26 	bl	8008564 <HAL_TIM_Base_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800191e:	f000 f9d7 	bl	8001cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001926:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	4619      	mov	r1, r3
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <MX_TIM4_Init+0x94>)
 8001930:	f006 fed0 	bl	80086d4 <HAL_TIM_ConfigClockSource>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800193a:	f000 f9c9 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	4619      	mov	r1, r3
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <MX_TIM4_Init+0x94>)
 800194c:	f007 f8c4 	bl	8008ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001956:	f000 f9bb 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000e88 	.word	0x20000e88
 8001968:	40000800 	.word	0x40000800

0800196c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <MX_USART3_UART_Init+0x50>)
 8001974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 80019a4:	f007 f914 	bl	8008bd0 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ae:	f000 f98f 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000ed0 	.word	0x20000ed0
 80019bc:	40004800 	.word	0x40004800

080019c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ce:	2204      	movs	r2, #4
 80019d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e0:	2202      	movs	r2, #2
 80019e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a04:	f005 fdda 	bl	80075bc <HAL_PCD_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a0e:	f000 f95f 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000f14 	.word	0x20000f14

08001a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_DMA_Init+0x3c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <MX_DMA_Init+0x3c>)
 8001a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_DMA_Init+0x3c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	200e      	movs	r0, #14
 8001a44:	f003 f957 	bl	8004cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a48:	200e      	movs	r0, #14
 8001a4a:	f003 f970 	bl	8004d2e <HAL_NVIC_EnableIRQ>

}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08c      	sub	sp, #48	; 0x30
 8001a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <MX_GPIO_Init+0x190>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <MX_GPIO_Init+0x190>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <MX_GPIO_Init+0x190>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <MX_GPIO_Init+0x190>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a55      	ldr	r2, [pc, #340]	; (8001bec <MX_GPIO_Init+0x190>)
 8001a98:	f043 0320 	orr.w	r3, r3, #32
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b53      	ldr	r3, [pc, #332]	; (8001bec <MX_GPIO_Init+0x190>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <MX_GPIO_Init+0x190>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <MX_GPIO_Init+0x190>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <MX_GPIO_Init+0x190>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b48      	ldr	r3, [pc, #288]	; (8001bec <MX_GPIO_Init+0x190>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a47      	ldr	r2, [pc, #284]	; (8001bec <MX_GPIO_Init+0x190>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b45      	ldr	r3, [pc, #276]	; (8001bec <MX_GPIO_Init+0x190>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b41      	ldr	r3, [pc, #260]	; (8001bec <MX_GPIO_Init+0x190>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a40      	ldr	r2, [pc, #256]	; (8001bec <MX_GPIO_Init+0x190>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <MX_GPIO_Init+0x190>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <MX_GPIO_Init+0x190>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a39      	ldr	r2, [pc, #228]	; (8001bec <MX_GPIO_Init+0x190>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <MX_GPIO_Init+0x190>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b33      	ldr	r3, [pc, #204]	; (8001bec <MX_GPIO_Init+0x190>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a32      	ldr	r2, [pc, #200]	; (8001bec <MX_GPIO_Init+0x190>)
 8001b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b30      	ldr	r3, [pc, #192]	; (8001bec <MX_GPIO_Init+0x190>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b3c:	482c      	ldr	r0, [pc, #176]	; (8001bf0 <MX_GPIO_Init+0x194>)
 8001b3e:	f004 f989 	bl	8005e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2140      	movs	r1, #64	; 0x40
 8001b46:	482b      	ldr	r0, [pc, #172]	; (8001bf4 <MX_GPIO_Init+0x198>)
 8001b48:	f004 f984 	bl	8005e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b52:	4829      	ldr	r0, [pc, #164]	; (8001bf8 <MX_GPIO_Init+0x19c>)
 8001b54:	f004 f97e 	bl	8005e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4822      	ldr	r0, [pc, #136]	; (8001bf8 <MX_GPIO_Init+0x19c>)
 8001b70:	f003 ffac 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b74:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <MX_GPIO_Init+0x194>)
 8001b8e:	f003 ff9d 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b92:	2340      	movs	r3, #64	; 0x40
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <MX_GPIO_Init+0x198>)
 8001baa:	f003 ff8f 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <MX_GPIO_Init+0x198>)
 8001bc2:	f003 ff83 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <MX_GPIO_Init+0x19c>)
 8001be0:	f003 ff74 	bl	8005acc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001be4:	bf00      	nop
 8001be6:	3730      	adds	r7, #48	; 0x30
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	40020800 	.word	0x40020800

08001bfc <_close>:

/* USER CODE BEGIN 4 */
int _close() {}
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	bf00      	nop
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_fstat>:
int _fstat() {}
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	bf00      	nop
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_getpid>:
int _getpid() {}
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	bf00      	nop
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_isatty>:
int _isatty() {}
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	bf00      	nop
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:
int _kill() {}
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	bf00      	nop
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_lseek>:
int _lseek() {}
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	bf00      	nop
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_read>:
int _read() {}
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	bf00      	nop
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <__io_putchar>:

int __io_putchar(int ch)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
uint8_t c[1];
c[0] = ch & 0x00FF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	733b      	strb	r3, [r7, #12]
HAL_UART_Transmit(&huart3, &*c, 1, 10);
 8001c7a:	f107 010c 	add.w	r1, r7, #12
 8001c7e:	230a      	movs	r3, #10
 8001c80:	2201      	movs	r2, #1
 8001c82:	4804      	ldr	r0, [pc, #16]	; (8001c94 <__io_putchar+0x28>)
 8001c84:	f006 fff1 	bl	8008c6a <HAL_UART_Transmit>
return ch;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000ed0 	.word	0x20000ed0

08001c98 <_write>:

int _write(int file, char *ptr, int len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
int DataIdx;
for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e009      	b.n	8001cbe <_write+0x26>
{
__io_putchar(*ptr++);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	60ba      	str	r2, [r7, #8]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ffda 	bl	8001c6c <__io_putchar>
for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbf1      	blt.n	8001caa <_write+0x12>
}
return len;
 8001cc6:	687b      	ldr	r3, [r7, #4]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <Error_Handler+0x8>

08001cda <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ce4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ce8:	f00c fa5e 	bl	800e1a8 <roundf>
 8001cec:	eef0 7a40 	vmov.f32	s15, s0
 8001cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <_ZN4MFCC8MelScaleEf>:

	    static inline float InverseMelScale(float mel_freq) {
	          return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
	        }

	        static inline float MelScale(float freq) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	ed87 0a01 	vstr	s0, [r7, #4]
	          return 1127.0f * logf (1.0f + freq / 700.0f);
 8001d06:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d0a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001d38 <_ZN4MFCC8MelScaleEf+0x3c>
 8001d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	f00c f927 	bl	800df70 <logf>
 8001d22:	eef0 7a40 	vmov.f32	s15, s0
 8001d26:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001d3c <_ZN4MFCC8MelScaleEf+0x40>
 8001d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
	        }
 8001d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	442f0000 	.word	0x442f0000
 8001d3c:	448ce000 	.word	0x448ce000

08001d40 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe fc6b 	bl	8000624 <__aeabi_i2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	ec43 2b10 	vmov	d0, r2, r3
 8001d56:	f00c f807 	bl	800dd68 <log>
 8001d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001d5e:	eef0 7a60 	vmov.f32	s15, s1
 8001d62:	eeb0 0a47 	vmov.f32	s0, s14
 8001d66:	eef0 0a67 	vmov.f32	s1, s15
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7fe fc51 	bl	8000624 <__aeabi_i2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ed97 1b00 	vldr	d1, [r7]
 8001d8a:	ec43 2b10 	vmov	d0, r2, r3
 8001d8e:	f00c f829 	bl	800dde4 <pow>
 8001d92:	eeb0 7a40 	vmov.f32	s14, s0
 8001d96:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d9e:	eef0 0a67 	vmov.f32	s1, s15
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_ZN4MFCCC1Eiii>:
#include <string.h>

#include "mfcc.h"
#include "float.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits)
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
	:num_mfcc_features(num_mfcc_features),
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	601a      	str	r2, [r3, #0]
	 frame_len(frame_len),
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	605a      	str	r2, [r3, #4]
	 mfcc_dec_bits(mfcc_dec_bits)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	60da      	str	r2, [r3, #12]
{

	// Round-up to nearest power of 2.
	frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ffb9 	bl	8001d40 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dce:	ec55 4b10 	vmov	r4, r5, d0
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f7ff ffb4 	bl	8001d40 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dd8:	ec53 2b10 	vmov	r2, r3, d0
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fdb4 	bl	800094c <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	ec43 2b17 	vmov	d7, r2, r3
 8001dec:	eeb0 0a47 	vmov.f32	s0, s14
 8001df0:	eef0 0a67 	vmov.f32	s1, s15
 8001df4:	f00c f958 	bl	800e0a8 <ceil>
 8001df8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dfc:	eef0 7a60 	vmov.f32	s15, s1
 8001e00:	eeb0 0a47 	vmov.f32	s0, s14
 8001e04:	eef0 0a67 	vmov.f32	s1, s15
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f7ff ffb1 	bl	8001d70 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e0e:	ec53 2b10 	vmov	r2, r3, d0
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe ff1f 	bl	8000c58 <__aeabi_d2iz>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	609a      	str	r2, [r3, #8]

	frame = new float[frame_len_padded];
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d201      	bcs.n	8001e30 <_ZN4MFCCC1Eiii+0x88>
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	e001      	b.n	8001e34 <_ZN4MFCCC1Eiii+0x8c>
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	4618      	mov	r0, r3
 8001e36:	f00b fdee 	bl	800da16 <_Znaj>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	611a      	str	r2, [r3, #16]
	buffer = new float[frame_len_padded];
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d201      	bcs.n	8001e52 <_ZN4MFCCC1Eiii+0xaa>
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	e001      	b.n	8001e56 <_ZN4MFCCC1Eiii+0xae>
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00b fddd 	bl	800da16 <_Znaj>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	615a      	str	r2, [r3, #20]
	mel_energies = new float[NUM_FBANK_BINS];
 8001e64:	20a0      	movs	r0, #160	; 0xa0
 8001e66:	f00b fdd6 	bl	800da16 <_Znaj>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	619a      	str	r2, [r3, #24]

	//create window function
	window_func = new float[frame_len];
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d201      	bcs.n	8001e80 <_ZN4MFCCC1Eiii+0xd8>
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	e001      	b.n	8001e84 <_ZN4MFCCC1Eiii+0xdc>
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00b fdc6 	bl	800da16 <_Znaj>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	61da      	str	r2, [r3, #28]
	for (int i = 0; i < frame_len; i++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e042      	b.n	8001f1e <_ZN4MFCCC1Eiii+0x176>
		window_func[i] = 0.5 - 0.5*cos(M_2PI * ((float)i) / (frame_len));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	ee17 0a90 	vmov	r0, s15
 8001ea6:	f7fe fbcf 	bl	8000648 <__aeabi_f2d>
 8001eaa:	a338      	add	r3, pc, #224	; (adr r3, 8001f8c <_ZN4MFCCC1Eiii+0x1e4>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fc22 	bl	80006f8 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4614      	mov	r4, r2
 8001eba:	461d      	mov	r5, r3
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7fe fbb1 	bl	8000624 <__aeabi_i2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4629      	mov	r1, r5
 8001eca:	f7fe fd3f 	bl	800094c <__aeabi_ddiv>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	ec43 2b17 	vmov	d7, r2, r3
 8001ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8001eda:	eef0 0a67 	vmov.f32	s1, s15
 8001ede:	f00b fff3 	bl	800dec8 <cos>
 8001ee2:	ec51 0b10 	vmov	r0, r1, d0
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <_ZN4MFCCC1Eiii+0x1e0>)
 8001eec:	f7fe fc04 	bl	80006f8 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	f04f 0000 	mov.w	r0, #0
 8001ef8:	4923      	ldr	r1, [pc, #140]	; (8001f88 <_ZN4MFCCC1Eiii+0x1e0>)
 8001efa:	f7fe fa45 	bl	8000388 <__aeabi_dsub>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	69da      	ldr	r2, [r3, #28]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	18d4      	adds	r4, r2, r3
 8001f10:	f7fe feca 	bl	8000ca8 <__aeabi_d2f>
 8001f14:	4603      	mov	r3, r0
 8001f16:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < frame_len; i++)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	dbb8      	blt.n	8001e98 <_ZN4MFCCC1Eiii+0xf0>

	//create mel filterbank
	fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 8001f26:	20a0      	movs	r0, #160	; 0xa0
 8001f28:	f00b fd75 	bl	800da16 <_Znaj>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	621a      	str	r2, [r3, #32]
	fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 8001f34:	20a0      	movs	r0, #160	; 0xa0
 8001f36:	f00b fd6e 	bl	800da16 <_Znaj>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
	mel_fbank = create_mel_fbank();
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f942 	bl	80021cc <_ZN4MFCC16create_mel_fbankEv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28

	//create DCT matrix
	dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	2128      	movs	r1, #40	; 0x28
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f88c 	bl	8002070 <_ZN4MFCC17create_dct_matrixEll>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c

	//initialize FFT
	rfft = new arm_rfft_fast_instance_f32;
 8001f5e:	2018      	movs	r0, #24
 8001f60:	f00b fd48 	bl	800d9f4 <_Znwj>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
	arm_rfft_fast_init_f32(rfft, frame_len_padded);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f00a fd57 	bl	800ca2c <arm_rfft_fast_init_f32>

}
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bdb0      	pop	{r4, r5, r7, pc}
 8001f88:	3fe00000 	.word	0x3fe00000
 8001f8c:	54442d18 	.word	0x54442d18
 8001f90:	401921fb 	.word	0x401921fb

08001f94 <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	delete []frame;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <_ZN4MFCCD1Ev+0x1a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00b fd21 	bl	800d9f0 <_ZdaPv>
	delete [] buffer;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <_ZN4MFCCD1Ev+0x2c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00b fd18 	bl	800d9f0 <_ZdaPv>
	delete []mel_energies;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <_ZN4MFCCD1Ev+0x3e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00b fd0f 	bl	800d9f0 <_ZdaPv>
	delete []window_func;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <_ZN4MFCCD1Ev+0x50>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00b fd06 	bl	800d9f0 <_ZdaPv>
	delete []fbank_filter_first;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <_ZN4MFCCD1Ev+0x62>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00b fcfd 	bl	800d9f0 <_ZdaPv>
	delete []fbank_filter_last;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <_ZN4MFCCD1Ev+0x74>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	4618      	mov	r0, r3
 8002004:	f00b fcf4 	bl	800d9f0 <_ZdaPv>
	delete []dct_matrix;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <_ZN4MFCCD1Ev+0x86>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	4618      	mov	r0, r3
 8002016:	f00b fceb 	bl	800d9f0 <_ZdaPv>
	delete rfft;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <_ZN4MFCCD1Ev+0x96>
 8002022:	2118      	movs	r1, #24
 8002024:	4618      	mov	r0, r3
 8002026:	f00b fce1 	bl	800d9ec <_ZdlPvj>
	for(int i=0;i<NUM_FBANK_BINS;i++)
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	e00e      	b.n	800204e <_ZN4MFCCD1Ev+0xba>
		delete mel_fbank[i];
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <_ZN4MFCCD1Ev+0xb4>
 8002040:	2104      	movs	r1, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f00b fcd2 	bl	800d9ec <_ZdlPvj>
	for(int i=0;i<NUM_FBANK_BINS;i++)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b27      	cmp	r3, #39	; 0x27
 8002052:	dded      	ble.n	8002030 <_ZN4MFCCD1Ev+0x9c>
	delete mel_fbank;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <_ZN4MFCCD1Ev+0xd0>
 800205c:	2104      	movs	r1, #4
 800205e:	4618      	mov	r0, r3
 8002060:	f00b fcc4 	bl	800d9ec <_ZdlPvj>
}
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 8002070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002074:	b08a      	sub	sp, #40	; 0x28
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
	int32_t k, n;
	float * M = new float[input_length*coefficient_count];
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800208a:	4293      	cmp	r3, r2
 800208c:	d201      	bcs.n	8002092 <_ZN4MFCC17create_dct_matrixEll+0x22>
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	e001      	b.n	8002096 <_ZN4MFCC17create_dct_matrixEll+0x26>
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	4618      	mov	r0, r3
 8002098:	f00b fcbd 	bl	800da16 <_Znaj>
 800209c:	4603      	mov	r3, r0
 800209e:	61fb      	str	r3, [r7, #28]
	float normalizer;
	arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b2:	edc7 7a06 	vstr	s15, [r7, #24]
 80020b6:	f107 0310 	add.w	r3, r7, #16
 80020ba:	617b      	str	r3, [r7, #20]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80020bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	db09      	blt.n	80020de <_ZN4MFCC17create_dct_matrixEll+0x6e>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80020ca:	ed97 0a06 	vldr	s0, [r7, #24]
 80020ce:	f00b ff7d 	bl	800dfcc <sqrtf>
 80020d2:	eef0 7a40 	vmov.f32	s15, s0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80020dc:	e004      	b.n	80020e8 <_ZN4MFCC17create_dct_matrixEll+0x78>
    }
    else
    {
      *pOut = 0.0f;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80020e6:	bf00      	nop
	for (k = 0; k < coefficient_count; k++) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
 80020ec:	e05c      	b.n	80021a8 <_ZN4MFCC17create_dct_matrixEll+0x138>
		for (n = 0; n < input_length; n++) {
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
 80020f2:	e052      	b.n	800219a <_ZN4MFCC17create_dct_matrixEll+0x12a>
			M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe faa6 	bl	8000648 <__aeabi_f2d>
 80020fc:	4604      	mov	r4, r0
 80020fe:	460d      	mov	r5, r1
 8002100:	68b8      	ldr	r0, [r7, #8]
 8002102:	f7fe fa8f 	bl	8000624 <__aeabi_i2d>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	a12e      	add	r1, pc, #184	; (adr r1, 80021c4 <_ZN4MFCC17create_dct_matrixEll+0x154>)
 800210c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002110:	f7fe fc1c 	bl	800094c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4690      	mov	r8, r2
 800211a:	4699      	mov	r9, r3
 800211c:	6a38      	ldr	r0, [r7, #32]
 800211e:	f7fe fa81 	bl	8000624 <__aeabi_i2d>
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <_ZN4MFCC17create_dct_matrixEll+0x150>)
 8002128:	f7fe f930 	bl	800038c <__adddf3>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4640      	mov	r0, r8
 8002132:	4649      	mov	r1, r9
 8002134:	f7fe fae0 	bl	80006f8 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4690      	mov	r8, r2
 800213e:	4699      	mov	r9, r3
 8002140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002142:	f7fe fa6f 	bl	8000624 <__aeabi_i2d>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4640      	mov	r0, r8
 800214c:	4649      	mov	r1, r9
 800214e:	f7fe fad3 	bl	80006f8 <__aeabi_dmul>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	ec43 2b17 	vmov	d7, r2, r3
 800215a:	eeb0 0a47 	vmov.f32	s0, s14
 800215e:	eef0 0a67 	vmov.f32	s1, s15
 8002162:	f00b feb1 	bl	800dec8 <cos>
 8002166:	ec53 2b10 	vmov	r2, r3, d0
 800216a:	4620      	mov	r0, r4
 800216c:	4629      	mov	r1, r5
 800216e:	f7fe fac3 	bl	80006f8 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	fb03 f202 	mul.w	r2, r3, r2
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	18d4      	adds	r4, r2, r3
 800218c:	f7fe fd8c 	bl	8000ca8 <__aeabi_d2f>
 8002190:	4603      	mov	r3, r0
 8002192:	6023      	str	r3, [r4, #0]
		for (n = 0; n < input_length; n++) {
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	3301      	adds	r3, #1
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	6a3a      	ldr	r2, [r7, #32]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	429a      	cmp	r2, r3
 80021a0:	dba8      	blt.n	80020f4 <_ZN4MFCC17create_dct_matrixEll+0x84>
	for (k = 0; k < coefficient_count; k++) {
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	3301      	adds	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	db9e      	blt.n	80020ee <_ZN4MFCC17create_dct_matrixEll+0x7e>
		}
	}
	return M;
 80021b0:	69fb      	ldr	r3, [r7, #28]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021bc:	f3af 8000 	nop.w
 80021c0:	3fe00000 	.word	0x3fe00000
 80021c4:	54442d18 	.word	0x54442d18
 80021c8:	400921fb 	.word	0x400921fb

080021cc <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b095      	sub	sp, #84	; 0x54
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

	int32_t bin, i;

	int32_t num_fft_bins = frame_len_padded/2;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	0fda      	lsrs	r2, r3, #31
 80021da:	4413      	add	r3, r2
 80021dc:	105b      	asrs	r3, r3, #1
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
	float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ec:	eddf 6a92 	vldr	s13, [pc, #584]	; 8002438 <_ZN4MFCC16create_mel_fbankEv+0x26c>
 80021f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float mel_low_freq = MelScale(MEL_LOW_FREQ);
 80021f8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80021fc:	f7ff fd7e 	bl	8001cfc <_ZN4MFCC8MelScaleEf>
 8002200:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float mel_high_freq = MelScale(MEL_HIGH_FREQ);
 8002204:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800243c <_ZN4MFCC16create_mel_fbankEv+0x270>
 8002208:	f7ff fd78 	bl	8001cfc <_ZN4MFCC8MelScaleEf>
 800220c:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8002210:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002214:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800221c:	eddf 6a88 	vldr	s13, [pc, #544]	; 8002440 <_ZN4MFCC16create_mel_fbankEv+0x274>
 8002220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002224:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float *this_bin = new float[num_fft_bins];
 8002228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800222e:	4293      	cmp	r3, r2
 8002230:	d201      	bcs.n	8002236 <_ZN4MFCC16create_mel_fbankEv+0x6a>
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	e001      	b.n	800223a <_ZN4MFCC16create_mel_fbankEv+0x6e>
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	4618      	mov	r0, r3
 800223c:	f00b fbeb 	bl	800da16 <_Znaj>
 8002240:	4603      	mov	r3, r0
 8002242:	623b      	str	r3, [r7, #32]

	float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 8002244:	20a0      	movs	r0, #160	; 0xa0
 8002246:	f00b fbe6 	bl	800da16 <_Znaj>
 800224a:	4603      	mov	r3, r0
 800224c:	61fb      	str	r3, [r7, #28]

	for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 800224e:	2300      	movs	r3, #0
 8002250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002252:	e0e2      	b.n	800241a <_ZN4MFCC16create_mel_fbankEv+0x24e>

		float left_mel = mel_low_freq + bin * mel_freq_delta;
 8002254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800226a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226e:	edc7 7a06 	vstr	s15, [r7, #24]
		float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 8002272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002274:	3301      	adds	r3, #1
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800228a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228e:	edc7 7a05 	vstr	s15, [r7, #20]
		float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 8002292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002294:	3302      	adds	r3, #2
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800229e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80022aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ae:	edc7 7a04 	vstr	s15, [r7, #16]

		int32_t first_index = -1, last_index = -1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	643b      	str	r3, [r7, #64]	; 0x40

		for (i = 0; i < num_fft_bins; i++) {
 80022be:	2300      	movs	r3, #0
 80022c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80022c2:	e064      	b.n	800238e <_ZN4MFCC16create_mel_fbankEv+0x1c2>

			float freq = (fft_bin_width * i);  // center freq of this fft bin.
 80022c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ce:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80022d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d6:	edc7 7a03 	vstr	s15, [r7, #12]
			float mel = MelScale(freq);
 80022da:	ed97 0a03 	vldr	s0, [r7, #12]
 80022de:	f7ff fd0d 	bl	8001cfc <_ZN4MFCC8MelScaleEf>
 80022e2:	ed87 0a02 	vstr	s0, [r7, #8]
			this_bin[i] = 0.0;
 80022e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	6a3a      	ldr	r2, [r7, #32]
 80022ec:	4413      	add	r3, r2
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

			if (mel > left_mel && mel < right_mel) {
 80022f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80022f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	dd40      	ble.n	8002388 <_ZN4MFCC16create_mel_fbankEv+0x1bc>
 8002306:	ed97 7a02 	vldr	s14, [r7, #8]
 800230a:	edd7 7a04 	vldr	s15, [r7, #16]
 800230e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	d537      	bpl.n	8002388 <_ZN4MFCC16create_mel_fbankEv+0x1bc>
				float weight;
				if (mel <= center_mel) {
 8002318:	ed97 7a02 	vldr	s14, [r7, #8]
 800231c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002328:	d810      	bhi.n	800234c <_ZN4MFCC16create_mel_fbankEv+0x180>
					weight = (mel - left_mel) / (center_mel - left_mel);
 800232a:	ed97 7a02 	vldr	s14, [r7, #8]
 800232e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002332:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002336:	ed97 7a05 	vldr	s14, [r7, #20]
 800233a:	edd7 7a06 	vldr	s15, [r7, #24]
 800233e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002346:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800234a:	e00f      	b.n	800236c <_ZN4MFCC16create_mel_fbankEv+0x1a0>
				} else {
					weight = (right_mel-mel) / (right_mel-center_mel);
 800234c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002350:	edd7 7a02 	vldr	s15, [r7, #8]
 8002354:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002358:	ed97 7a04 	vldr	s14, [r7, #16]
 800235c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002360:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002368:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				}
				this_bin[i] = weight;
 800236c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	4413      	add	r3, r2
 8002374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002376:	601a      	str	r2, [r3, #0]
				if (first_index == -1)
 8002378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237e:	d101      	bne.n	8002384 <_ZN4MFCC16create_mel_fbankEv+0x1b8>
					first_index = i;
 8002380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002382:	647b      	str	r3, [r7, #68]	; 0x44
				last_index = i;
 8002384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002386:	643b      	str	r3, [r7, #64]	; 0x40
		for (i = 0; i < num_fft_bins; i++) {
 8002388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800238a:	3301      	adds	r3, #1
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
 800238e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002392:	429a      	cmp	r2, r3
 8002394:	db96      	blt.n	80022c4 <_ZN4MFCC16create_mel_fbankEv+0xf8>
			}
		}

		fbank_filter_first[bin] = first_index;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023a2:	601a      	str	r2, [r3, #0]
		fbank_filter_last[bin] = last_index;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023b0:	601a      	str	r2, [r3, #0]
		mel_fbank[bin] = new float[last_index-first_index+1];
 80023b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80023be:	4293      	cmp	r3, r2
 80023c0:	d201      	bcs.n	80023c6 <_ZN4MFCC16create_mel_fbankEv+0x1fa>
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	e001      	b.n	80023ca <_ZN4MFCC16create_mel_fbankEv+0x1fe>
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	69f9      	ldr	r1, [r7, #28]
 80023d0:	188c      	adds	r4, r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f00b fb1f 	bl	800da16 <_Znaj>
 80023d8:	4603      	mov	r3, r0
 80023da:	6023      	str	r3, [r4, #0]

		int32_t j = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
		//copy the part we care about
		for (i = first_index; i <= last_index; i++) {
 80023e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80023e4:	e012      	b.n	800240c <_ZN4MFCC16create_mel_fbankEv+0x240>
			mel_fbank[bin][j++] = this_bin[i];
 80023e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	6a3a      	ldr	r2, [r7, #32]
 80023ec:	441a      	add	r2, r3
 80023ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	69f9      	ldr	r1, [r7, #28]
 80023f4:	440b      	add	r3, r1
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fa:	1c58      	adds	r0, r3, #1
 80023fc:	63b8      	str	r0, [r7, #56]	; 0x38
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	601a      	str	r2, [r3, #0]
		for (i = first_index; i <= last_index; i++) {
 8002406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002408:	3301      	adds	r3, #1
 800240a:	64bb      	str	r3, [r7, #72]	; 0x48
 800240c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800240e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002410:	429a      	cmp	r2, r3
 8002412:	dde8      	ble.n	80023e6 <_ZN4MFCC16create_mel_fbankEv+0x21a>
	for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8002414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002416:	3301      	adds	r3, #1
 8002418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241c:	2b27      	cmp	r3, #39	; 0x27
 800241e:	f77f af19 	ble.w	8002254 <_ZN4MFCC16create_mel_fbankEv+0x88>
		}
	}
	delete []this_bin;
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <_ZN4MFCC16create_mel_fbankEv+0x262>
 8002428:	6a38      	ldr	r0, [r7, #32]
 800242a:	f00b fae1 	bl	800d9f0 <_ZdaPv>
	return mel_fbank;
 800242e:	69fb      	ldr	r3, [r7, #28]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3754      	adds	r7, #84	; 0x54
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	467a0000 	.word	0x467a0000
 800243c:	457a0000 	.word	0x457a0000
 8002440:	42240000 	.word	0x42240000

08002444 <_ZN4MFCC12mfcc_computeEPKfPa>:

void MFCC::mfcc_compute(const float* audio_data, q7_t* mfcc_out) {
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b095      	sub	sp, #84	; 0x54
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]

	int32_t i, j, bin;

	//TensorFlow way of normalizing .wav data to (-1,1)
	for (i = 0; i < frame_len; i++) {
 8002450:	2300      	movs	r3, #0
 8002452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002454:	e013      	b.n	800247e <_ZN4MFCC12mfcc_computeEPKfPa+0x3a>
		frame[i] = (float)audio_data[i]/(1<<15);
 8002456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4413      	add	r3, r2
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	eddf 6a9b 	vldr	s13, [pc, #620]	; 80026dc <_ZN4MFCC12mfcc_computeEPKfPa+0x298>
 8002470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002474:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < frame_len; i++) {
 8002478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247a:	3301      	adds	r3, #1
 800247c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002484:	429a      	cmp	r2, r3
 8002486:	dbe6      	blt.n	8002456 <_ZN4MFCC12mfcc_computeEPKfPa+0x12>
	}
	//Fill up remaining with zeros
	memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	18d0      	adds	r0, r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	461a      	mov	r2, r3
 80024a2:	2100      	movs	r1, #0
 80024a4:	f00e fe9c 	bl	80111e0 <memset>

	for (i = 0; i < frame_len; i++) {
 80024a8:	2300      	movs	r3, #0
 80024aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ac:	e019      	b.n	80024e2 <_ZN4MFCC12mfcc_computeEPKfPa+0x9e>
		frame[i] *= window_func[i];
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	ed93 7a00 	vldr	s14, [r3]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d8:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < frame_len; i++) {
 80024dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024de:	3301      	adds	r3, #1
 80024e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dbe0      	blt.n	80024ae <_ZN4MFCC12mfcc_computeEPKfPa+0x6a>
	}

	//Compute FFT
	arm_rfft_fast_f32(rfft, frame, buffer, 0);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6919      	ldr	r1, [r3, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	2300      	movs	r3, #0
 80024fa:	f00a fb19 	bl	800cb30 <arm_rfft_fast_f32>

	//Convert to power spectrum
	//frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
	int32_t half_dim = frame_len_padded/2;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0fda      	lsrs	r2, r3, #31
 8002504:	4413      	add	r3, r2
 8002506:	105b      	asrs	r3, r3, #1
 8002508:	63bb      	str	r3, [r7, #56]	; 0x38
	float first_energy = buffer[0] * buffer[0],
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	ed93 7a00 	vldr	s14, [r3]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			last_energy =  buffer[1] * buffer[1];  // handle this special case
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	3304      	adds	r3, #4
 8002528:	ed93 7a00 	vldr	s14, [r3]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	3304      	adds	r3, #4
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	for (i = 1; i < half_dim; i++) {
 800253e:	2301      	movs	r3, #1
 8002540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002542:	e022      	b.n	800258a <_ZN4MFCC12mfcc_computeEPKfPa+0x146>
		float real = buffer[i*2], im = buffer[i*2 + 1];
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	3304      	adds	r3, #4
 800255c:	4413      	add	r3, r2
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	623b      	str	r3, [r7, #32]
		buffer[i] = real*real + im*im;
 8002562:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002566:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800256a:	edd7 7a08 	vldr	s15, [r7, #32]
 800256e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	edc3 7a00 	vstr	s15, [r3]
	for (i = 1; i < half_dim; i++) {
 8002584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002586:	3301      	adds	r3, #1
 8002588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800258a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	429a      	cmp	r2, r3
 8002590:	dbd8      	blt.n	8002544 <_ZN4MFCC12mfcc_computeEPKfPa+0x100>
	}
	buffer[0] = first_energy;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002598:	601a      	str	r2, [r3, #0]
	buffer[half_dim] = last_energy;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a6:	601a      	str	r2, [r3, #0]

	float sqrt_data;
	//Apply mel filterbanks
	for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 80025a8:	2300      	movs	r3, #0
 80025aa:	647b      	str	r3, [r7, #68]	; 0x44
 80025ac:	e06c      	b.n	8002688 <_ZN4MFCC12mfcc_computeEPKfPa+0x244>
		j = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	64bb      	str	r3, [r7, #72]	; 0x48
		float mel_energy = 0;
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40
		int32_t first_index = fbank_filter_first[bin];
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		int32_t last_index = fbank_filter_last[bin];
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = first_index; i <= last_index; i++) {
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d8:	e039      	b.n	800264e <_ZN4MFCC12mfcc_computeEPKfPa+0x20a>
			arm_sqrt_f32(buffer[i],&sqrt_data);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 80025ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80025f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fa:	db09      	blt.n	8002610 <_ZN4MFCC12mfcc_computeEPKfPa+0x1cc>
      *pOut = __builtin_sqrtf(in);
 80025fc:	ed97 0a07 	vldr	s0, [r7, #28]
 8002600:	f00b fce4 	bl	800dfcc <sqrtf>
 8002604:	eef0 7a40 	vmov.f32	s15, s0
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800260e:	e004      	b.n	800261a <_ZN4MFCC12mfcc_computeEPKfPa+0x1d6>
      *pOut = 0.0f;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002618:	bf00      	nop
			mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	1c59      	adds	r1, r3, #1
 800262a:	64b9      	str	r1, [r7, #72]	; 0x48
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	ed93 7a00 	vldr	s14, [r3]
 8002634:	edd7 7a05 	vldr	s15, [r7, #20]
 8002638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002644:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		for (i = first_index; i <= last_index; i++) {
 8002648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264a:	3301      	adds	r3, #1
 800264c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800264e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	429a      	cmp	r2, r3
 8002654:	ddc1      	ble.n	80025da <_ZN4MFCC12mfcc_computeEPKfPa+0x196>
		}
		mel_energies[bin] = mel_energy;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002662:	601a      	str	r2, [r3, #0]

		//avoid log of zero
		if (mel_energy == 0.0)
 8002664:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002668:	eef5 7a40 	vcmp.f32	s15, #0.0
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	d107      	bne.n	8002682 <_ZN4MFCC12mfcc_computeEPKfPa+0x23e>
			mel_energies[bin] = FLT_MIN;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002680:	601a      	str	r2, [r3, #0]
	for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8002682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002684:	3301      	adds	r3, #1
 8002686:	647b      	str	r3, [r7, #68]	; 0x44
 8002688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800268a:	2b27      	cmp	r3, #39	; 0x27
 800268c:	dd8f      	ble.n	80025ae <_ZN4MFCC12mfcc_computeEPKfPa+0x16a>
	}

	//Take log
	for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 800268e:	2300      	movs	r3, #0
 8002690:	647b      	str	r3, [r7, #68]	; 0x44
 8002692:	e016      	b.n	80026c2 <_ZN4MFCC12mfcc_computeEPKfPa+0x27e>
		mel_energies[bin] = logf(mel_energies[bin]);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	18d4      	adds	r4, r2, r3
 80026ac:	eeb0 0a67 	vmov.f32	s0, s15
 80026b0:	f00b fc5e 	bl	800df70 <logf>
 80026b4:	eef0 7a40 	vmov.f32	s15, s0
 80026b8:	edc4 7a00 	vstr	s15, [r4]
	for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 80026bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026be:	3301      	adds	r3, #1
 80026c0:	647b      	str	r3, [r7, #68]	; 0x44
 80026c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c4:	2b27      	cmp	r3, #39	; 0x27
 80026c6:	dde5      	ble.n	8002694 <_ZN4MFCC12mfcc_computeEPKfPa+0x250>

	//Take DCT. Uses matrix mul.
	for (i = 0; i < num_mfcc_features; i++) {
 80026c8:	2300      	movs	r3, #0
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026cc:	e071      	b.n	80027b2 <_ZN4MFCC12mfcc_computeEPKfPa+0x36e>
		float sum = 0.0;
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (j = 0; j < NUM_FBANK_BINS; j++) {
 80026d4:	2300      	movs	r3, #0
 80026d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d8:	e026      	b.n	8002728 <_ZN4MFCC12mfcc_computeEPKfPa+0x2e4>
 80026da:	bf00      	nop
 80026dc:	47000000 	.word	0x47000000
 80026e0:	42fe0000 	.word	0x42fe0000
 80026e4:	c3000000 	.word	0xc3000000
			sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	461a      	mov	r2, r3
 80026f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002716:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800271a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		for (j = 0; j < NUM_FBANK_BINS; j++) {
 8002722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002724:	3301      	adds	r3, #1
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48
 8002728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800272a:	2b27      	cmp	r3, #39	; 0x27
 800272c:	dddc      	ble.n	80026e8 <_ZN4MFCC12mfcc_computeEPKfPa+0x2a4>
		}

		//Input is Qx.mfcc_dec_bits (from quantization step)
		sum *= (0x1<<mfcc_dec_bits);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002740:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		sum = round(sum);
 800274c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002750:	f7ff fac3 	bl	8001cda <_ZSt5roundf>
 8002754:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		if(sum >= 127)
 8002758:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800275c:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 80026e0 <_ZN4MFCC12mfcc_computeEPKfPa+0x29c>
 8002760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	db05      	blt.n	8002776 <_ZN4MFCC12mfcc_computeEPKfPa+0x332>
			mfcc_out[i] = 127;
 800276a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	227f      	movs	r2, #127	; 0x7f
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e01a      	b.n	80027ac <_ZN4MFCC12mfcc_computeEPKfPa+0x368>
		else if(sum <= -128)
 8002776:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800277a:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 80026e4 <_ZN4MFCC12mfcc_computeEPKfPa+0x2a0>
 800277e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002786:	d805      	bhi.n	8002794 <_ZN4MFCC12mfcc_computeEPKfPa+0x350>
			mfcc_out[i] = -128;
 8002788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	2280      	movs	r2, #128	; 0x80
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e00b      	b.n	80027ac <_ZN4MFCC12mfcc_computeEPKfPa+0x368>
		else
			mfcc_out[i] = sum;
 8002794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800279e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027a2:	edc7 7a00 	vstr	s15, [r7]
 80027a6:	783a      	ldrb	r2, [r7, #0]
 80027a8:	b252      	sxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_mfcc_features; i++) {
 80027ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ae:	3301      	adds	r3, #1
 80027b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027b8:	429a      	cmp	r2, r3
 80027ba:	db88      	blt.n	80026ce <_ZN4MFCC12mfcc_computeEPKfPa+0x28a>
	}

 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3754      	adds	r7, #84	; 0x54
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	bf00      	nop

080027c8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ee:	d205      	bcs.n	80027fc <_ZSt16__deque_buf_sizej+0x1c>
 80027f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	e000      	b.n	80027fe <_ZSt16__deque_buf_sizej+0x1e>
 80027fc:	2301      	movs	r3, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	bfb8      	it	lt
 8002818:	425b      	neglt	r3, r3
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_ZNSt5dequeIPcSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fde1 	bl	80033f8 <_ZNSt11_Deque_baseIPcSaIS0_EEC1Ev>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_Z19addCommandToHistoryPc>:
std::string lastCommand = "";

std::deque<char*> commandHistory;

// Fügt einen neuen Befehl zur Befehlshistorie hinzu
void addCommandToHistory(char* command) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    const size_t maxHistorySize = 20; // Maximale Anzahl der zu speichernden Befehle
 8002848:	2314      	movs	r3, #20
 800284a:	60fb      	str	r3, [r7, #12]
    if (commandHistory.size() >= maxHistorySize) {
 800284c:	480b      	ldr	r0, [pc, #44]	; (800287c <_Z19addCommandToHistoryPc+0x3c>)
 800284e:	f000 fe06 	bl	800345e <_ZNKSt5dequeIPcSaIS0_EE4sizeEv>
 8002852:	4603      	mov	r3, r0
 8002854:	2b13      	cmp	r3, #19
 8002856:	bf8c      	ite	hi
 8002858:	2301      	movhi	r3, #1
 800285a:	2300      	movls	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <_Z19addCommandToHistoryPc+0x28>
        // Wenn die Historie voll ist, den ältesten Befehl entfernen
        commandHistory.pop_front();
 8002862:	4806      	ldr	r0, [pc, #24]	; (800287c <_Z19addCommandToHistoryPc+0x3c>)
 8002864:	f000 fe0d 	bl	8003482 <_ZNSt5dequeIPcSaIS0_EE9pop_frontEv>
    }
    // Neuen Befehl hinzufügen
    commandHistory.push_back(command);
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	4619      	mov	r1, r3
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <_Z19addCommandToHistoryPc+0x3c>)
 800286e:	f000 fe2b 	bl	80034c8 <_ZNSt5dequeIPcSaIS0_EE9push_backERKS0_>
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20016070 	.word	0x20016070

08002880 <_Z20delay350Microsecondsi>:
    }
    return false; // Wenn die Historie leer ist, false zurückgeben
}

void delay350Microseconds(int i)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	//TIM_HandleTypeDef htim4;
	uint16_t timer_val;
	uint16_t tim_diff=350*i;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	b29b      	uxth	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4413      	add	r3, r2
 8002892:	461a      	mov	r2, r3
 8002894:	0091      	lsls	r1, r2, #2
 8002896:	461a      	mov	r2, r3
 8002898:	460b      	mov	r3, r1
 800289a:	4413      	add	r3, r2
 800289c:	461a      	mov	r2, r3
 800289e:	00d2      	lsls	r2, r2, #3
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	81fb      	strh	r3, [r7, #14]
	HAL_TIM_Base_Start(htim4__);
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <_Z20delay350Microsecondsi+0x64>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f005 feaa 	bl	8008604 <HAL_TIM_Base_Start>
	timer_val=__HAL_TIM_GET_COUNTER(htim4__);
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <_Z20delay350Microsecondsi+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	81bb      	strh	r3, [r7, #12]
	while( __HAL_TIM_GET_COUNTER(htim4__)-timer_val<tim_diff)
 80028ba:	bf00      	nop
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <_Z20delay350Microsecondsi+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c4:	89bb      	ldrh	r3, [r7, #12]
 80028c6:	1ad2      	subs	r2, r2, r3
 80028c8:	89fb      	ldrh	r3, [r7, #14]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	bf34      	ite	cc
 80028ce:	2301      	movcc	r3, #1
 80028d0:	2300      	movcs	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f1      	bne.n	80028bc <_Z20delay350Microsecondsi+0x3c>
	{

	}
	//HAL_TIM_Base_Stop(&htim4);

}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200027b4 	.word	0x200027b4

080028e8 <_Z8transmitii>:

void transmit(int nHighPulses, int nLowPulses)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028f8:	4809      	ldr	r0, [pc, #36]	; (8002920 <_Z8transmitii+0x38>)
 80028fa:	f003 faab 	bl	8005e54 <HAL_GPIO_WritePin>
	delay350Microseconds(nHighPulses);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffbe 	bl	8002880 <_Z20delay350Microsecondsi>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8002904:	2201      	movs	r2, #1
 8002906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <_Z8transmitii+0x38>)
 800290c:	f003 faa2 	bl	8005e54 <HAL_GPIO_WritePin>
	delay350Microseconds(nLowPulses);
 8002910:	6838      	ldr	r0, [r7, #0]
 8002912:	f7ff ffb5 	bl	8002880 <_Z20delay350Microsecondsi>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40020800 	.word	0x40020800

08002924 <_Z12sendSequencet>:

void sendSequence(uint16_t bitSequence)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	80fb      	strh	r3, [r7, #6]
	int t=0;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
	int i=0;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
	for(t=0 ; t<10;t++)
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e024      	b.n	8002986 <_Z12sendSequencet+0x62>
	{
		for( i = 0; i < 12; i++)
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	e017      	b.n	8002972 <_Z12sendSequencet+0x4e>
		{
			transmit(1, 3);
 8002942:	2103      	movs	r1, #3
 8002944:	2001      	movs	r0, #1
 8002946:	f7ff ffcf 	bl	80028e8 <_Z8transmitii>
			//shift
			if((bitSequence << i) & (1 << 11))
 800294a:	88fa      	ldrh	r2, [r7, #6]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002956:	2b00      	cmp	r3, #0
 8002958:	d004      	beq.n	8002964 <_Z12sendSequencet+0x40>
			{
				transmit(1, 3);// 1
 800295a:	2103      	movs	r1, #3
 800295c:	2001      	movs	r0, #1
 800295e:	f7ff ffc3 	bl	80028e8 <_Z8transmitii>
 8002962:	e003      	b.n	800296c <_Z12sendSequencet+0x48>
			}
			else
			{
				transmit(3, 1);// 0
 8002964:	2101      	movs	r1, #1
 8002966:	2003      	movs	r0, #3
 8002968:	f7ff ffbe 	bl	80028e8 <_Z8transmitii>
		for( i = 0; i < 12; i++)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3301      	adds	r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b0b      	cmp	r3, #11
 8002976:	dde4      	ble.n	8002942 <_Z12sendSequencet+0x1e>
			}
		}
		transmit(1,31);
 8002978:	211f      	movs	r1, #31
 800297a:	2001      	movs	r0, #1
 800297c:	f7ff ffb4 	bl	80028e8 <_Z8transmitii>
	for(t=0 ; t<10;t++)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3301      	adds	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b09      	cmp	r3, #9
 800298a:	ddd7      	ble.n	800293c <_Z12sendSequencet+0x18>
	}

}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <_Z13initializeLCDv>:

void initializeLCD() {
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	LCD_Clear(lcddev);
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <_Z13initializeLCDv+0x2c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fe27 	bl	80015f4 <LCD_Clear>
	LCD_SetCursor(lcddev, 0, 0);
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_Z13initializeLCDv+0x2c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fdfb 	bl	80015aa <LCD_SetCursor>
    LCD_Print(lcddev, "Test");
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <_Z13initializeLCDv+0x2c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <_Z13initializeLCDv+0x30>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fda3 	bl	8001506 <LCD_Print>
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20016050 	.word	0x20016050
 80029c8:	080130c8 	.word	0x080130c8

080029cc <_Z8setTimeri>:
void displayLCD(const char* message) {
	LCD_Clear(lcddev);
    LCD_Print(lcddev, message);
}

void setTimer(int minutes) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
    uint32_t start_time = __HAL_TIM_GET_COUNTER(htim4__);
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <_Z8setTimeri+0x5c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	60fb      	str	r3, [r7, #12]
    uint32_t end_time = start_time + minutes * 60 * 1000000;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <_Z8setTimeri+0x60>)
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	60bb      	str	r3, [r7, #8]

    sendSequence(ON);
 80029ee:	f640 70c2 	movw	r0, #4034	; 0xfc2
 80029f2:	f7ff ff97 	bl	8002924 <_Z12sendSequencet>

    while (__HAL_TIM_GET_COUNTER(htim4__) < end_time) {
 80029f6:	e003      	b.n	8002a00 <_Z8setTimeri+0x34>
        HAL_Delay(1000);
 80029f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029fc:	f002 f87c 	bl	8004af8 <HAL_Delay>
    while (__HAL_TIM_GET_COUNTER(htim4__) < end_time) {
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <_Z8setTimeri+0x5c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	bf8c      	ite	hi
 8002a0e:	2301      	movhi	r3, #1
 8002a10:	2300      	movls	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ef      	bne.n	80029f8 <_Z8setTimeri+0x2c>
    }

    sendSequence(OFF);
 8002a18:	f640 70c1 	movw	r0, #4033	; 0xfc1
 8002a1c:	f7ff ff82 	bl	8002924 <_Z12sendSequencet>
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200027b4 	.word	0x200027b4
 8002a2c:	03938700 	.word	0x03938700

08002a30 <_Z15turnOffLEDArrayv>:


void turnOffLEDArray() {
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b090      	sub	sp, #64	; 0x40
 8002a34:	af00      	add	r7, sp, #0
    GPIO_TypeDef* LED_PORTS[] = {GPIOG, GPIOG, GPIOE, GPIOE, GPIOE, GPIOE, GPIOE, GPIOE, GPIOF, GPIOB};
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <_Z15turnOffLEDArrayv+0x68>)
 8002a38:	f107 0414 	add.w	r4, r7, #20
 8002a3c:	461d      	mov	r5, r3
 8002a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a4a:	e884 0003 	stmia.w	r4, {r0, r1}
    uint16_t LED_PINS[] = {GPIO_PIN_14, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7, GPIO_PIN_10, GPIO_PIN_12, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_15, GPIO_PIN_11};
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <_Z15turnOffLEDArrayv+0x6c>)
 8002a50:	463c      	mov	r4, r7
 8002a52:	461d      	mov	r5, r3
 8002a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	6023      	str	r3, [r4, #0]

    for (int i = 0; i < 10; i++) {
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a60:	e012      	b.n	8002a88 <_Z15turnOffLEDArrayv+0x58>
        HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_RESET);
 8002a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	3340      	adds	r3, #64	; 0x40
 8002a68:	443b      	add	r3, r7
 8002a6a:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8002a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	3340      	adds	r3, #64	; 0x40
 8002a74:	443b      	add	r3, r7
 8002a76:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f003 f9e9 	bl	8005e54 <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) {
 8002a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a84:	3301      	adds	r3, #1
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8a:	2b09      	cmp	r3, #9
 8002a8c:	dde9      	ble.n	8002a62 <_Z15turnOffLEDArrayv+0x32>
    }
}
 8002a8e:	bf00      	nop
 8002a90:	bf00      	nop
 8002a92:	3740      	adds	r7, #64	; 0x40
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bdb0      	pop	{r4, r5, r7, pc}
 8002a98:	080130d0 	.word	0x080130d0
 8002a9c:	080130f8 	.word	0x080130f8

08002aa0 <_Z13Konvertierungv>:

void Konvertierung()
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	f6ad 4dcc 	subw	sp, sp, #3276	; 0xccc
 8002aa6:	af00      	add	r7, sp, #0
	MFCC* mfcc = new MFCC(MFCC_OUT_SIZE, MFCC_IN_SIZE, 2);
 8002aa8:	2034      	movs	r0, #52	; 0x34
 8002aaa:	f00a ffa3 	bl	800d9f4 <_Znwj>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461c      	mov	r4, r3
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002ab8:	210a      	movs	r1, #10
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff f974 	bl	8001da8 <_ZN4MFCCC1Eiii>
 8002ac0:	f8c7 4cb4 	str.w	r4, [r7, #3252]	; 0xcb4
	KWS * kws= new KWS();
 8002ac4:	f645 70d8 	movw	r0, #24536	; 0x5fd8
 8002ac8:	f00a ff94 	bl	800d9f4 <_Znwj>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461c      	mov	r4, r3
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7fe fab7 	bl	8001044 <_ZN3KWSC1Ev>
 8002ad6:	f8c7 4cb0 	str.w	r4, [r7, #3248]	; 0xcb0
	float mfccInputFrame[MFCC_IN_SIZE]; // input frame of mfcc
	q7_t mfccOutTmp[MFCC_OUT_SIZE]; // result of mfcc
	//float mfccOut[MFCC_OUT_SIZE]; // result after typecast

	//Feature extraction
	printf("Feature extraction started\r\n");
 8002ada:	4869      	ldr	r0, [pc, #420]	; (8002c80 <_Z13Konvertierungv+0x1e0>)
 8002adc:	f00e fa76 	bl	8010fcc <puts>
	int feature_counter = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
	for (int i = 0; i < 16000-MFCC_STEP_SIZE; i+=MFCC_STEP_SIZE,feature_counter++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 3cc0 	str.w	r3, [r7, #3264]	; 0xcc0
 8002aec:	e077      	b.n	8002bde <_Z13Konvertierungv+0x13e>
	{
		for (int j = 0; j < MFCC_IN_SIZE; j++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 3cbc 	str.w	r3, [r7, #3260]	; 0xcbc
 8002af4:	e02e      	b.n	8002b54 <_Z13Konvertierungv+0xb4>
		{
			if (i+j >= 16000)
 8002af6:	f8d7 2cc0 	ldr.w	r2, [r7, #3264]	; 0xcc0
 8002afa:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8002afe:	4413      	add	r3, r2
 8002b00:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002b04:	db0b      	blt.n	8002b1e <_Z13Konvertierungv+0x7e>
				mfccInputFrame[j] = 0;
 8002b06:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8002b0a:	f5a3 624a 	sub.w	r2, r3, #3232	; 0xca0
 8002b0e:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e015      	b.n	8002b4a <_Z13Konvertierungv+0xaa>
			else
			{
				mfccInputFrame[j] = (float) ISA[i+j];
 8002b1e:	f8d7 2cc0 	ldr.w	r2, [r7, #3264]	; 0xcc0
 8002b22:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8002b26:	4413      	add	r3, r2
 8002b28:	4a56      	ldr	r2, [pc, #344]	; (8002c84 <_Z13Konvertierungv+0x1e4>)
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b36:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8002b3a:	f5a3 624a 	sub.w	r2, r3, #3232	; 0xca0
 8002b3e:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < MFCC_IN_SIZE; j++)
 8002b4a:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f8c7 3cbc 	str.w	r3, [r7, #3260]	; 0xcbc
 8002b54:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8002b58:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002b5c:	dbcb      	blt.n	8002af6 <_Z13Konvertierungv+0x56>
				//printf("%f, ", mfccInputFrame[j]);
			}
		}
		mfcc->mfcc_compute(mfccInputFrame, mfccOutTmp);
 8002b5e:	f107 021c 	add.w	r2, r7, #28
 8002b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b66:	4619      	mov	r1, r3
 8002b68:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 8002b6c:	f7ff fc6a 	bl	8002444 <_ZN4MFCC12mfcc_computeEPKfPa>
		for (int k = 0; k < MFCC_OUT_SIZE; k++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 3cb8 	str.w	r3, [r7, #3256]	; 0xcb8
 8002b76:	e023      	b.n	8002bc0 <_Z13Konvertierungv+0x120>
		{
			kws->mMFCC[feature_counter][k] = (ai_float) mfccOutTmp[k];
 8002b78:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8002b7c:	f6a3 42ac 	subw	r2, r3, #3244	; 0xcac
 8002b80:	f8d7 3cb8 	ldr.w	r3, [r7, #3256]	; 0xcb8
 8002b84:	4413      	add	r3, r2
 8002b86:	f993 3000 	ldrsb.w	r3, [r3]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b92:	f8d7 1cb0 	ldr.w	r1, [r7, #3248]	; 0xcb0
 8002b96:	f8d7 2cc4 	ldr.w	r2, [r7, #3268]	; 0xcc4
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	f8d7 2cb8 	ldr.w	r2, [r7, #3256]	; 0xcb8
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8002bac:	3316      	adds	r3, #22
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	edc3 7a00 	vstr	s15, [r3]
		for (int k = 0; k < MFCC_OUT_SIZE; k++)
 8002bb6:	f8d7 3cb8 	ldr.w	r3, [r7, #3256]	; 0xcb8
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f8c7 3cb8 	str.w	r3, [r7, #3256]	; 0xcb8
 8002bc0:	f8d7 3cb8 	ldr.w	r3, [r7, #3256]	; 0xcb8
 8002bc4:	2b09      	cmp	r3, #9
 8002bc6:	ddd7      	ble.n	8002b78 <_Z13Konvertierungv+0xd8>
	for (int i = 0; i < 16000-MFCC_STEP_SIZE; i+=MFCC_STEP_SIZE,feature_counter++)
 8002bc8:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 8002bcc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002bd0:	f8c7 3cc0 	str.w	r3, [r7, #3264]	; 0xcc0
 8002bd4:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
 8002bde:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 8002be2:	f5b3 5f75 	cmp.w	r3, #15680	; 0x3d40
 8002be6:	db82      	blt.n	8002aee <_Z13Konvertierungv+0x4e>
		}
	}
	printf("Feature extraction ended\r\n");
 8002be8:	4827      	ldr	r0, [pc, #156]	; (8002c88 <_Z13Konvertierungv+0x1e8>)
 8002bea:	f00e f9ef 	bl	8010fcc <puts>
	//typcast
	/*for (int m = 0; m < MFCC_OUT_SIZE; m++)
	{
		mfccOut[m]=float(mfccOutTmp[m]);
	}*/
	float index2=kws->runInference();
 8002bee:	2101      	movs	r1, #1
 8002bf0:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 8002bf4:	f7fe fabe 	bl	8001174 <_ZN3KWS12runInferenceEi>
 8002bf8:	ee07 0a90 	vmov	s15, r0
 8002bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c00:	f607 43ac 	addw	r3, r7, #3244	; 0xcac
 8002c04:	edc3 7a00 	vstr	s15, [r3]

	std::string result=kws->indexToWord(index2);
 8002c08:	f607 43ac 	addw	r3, r7, #3244	; 0xcac
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c14:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8002c18:	f6a3 43c4 	subw	r3, r3, #3268	; 0xcc4
 8002c1c:	ee17 2a90 	vmov	r2, s15
 8002c20:	f8d7 1cb0 	ldr.w	r1, [r7, #3248]	; 0xcb0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fb05 	bl	8001234 <_ZN3KWS11indexToWordB5cxx11Ei>





	char *str = (char*)result.data();
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f00b f83e 	bl	800dcae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8002c32:	f8c7 0ca8 	str.w	r0, [r7, #3240]	; 0xca8
	printf("%s\n",str);
 8002c36:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 8002c3a:	f00e f9c7 	bl	8010fcc <puts>
	delete kws;
 8002c3e:	f8d7 3cb0 	ldr.w	r3, [r7, #3248]	; 0xcb0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <_Z13Konvertierungv+0x1b0>
 8002c46:	f645 71d8 	movw	r1, #24536	; 0x5fd8
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f00a fece 	bl	800d9ec <_ZdlPvj>
	delete mfcc;
 8002c50:	f8d7 4cb4 	ldr.w	r4, [r7, #3252]	; 0xcb4
 8002c54:	2c00      	cmp	r4, #0
 8002c56:	d006      	beq.n	8002c66 <_Z13Konvertierungv+0x1c6>
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7ff f99b 	bl	8001f94 <_ZN4MFCCD1Ev>
 8002c5e:	2134      	movs	r1, #52	; 0x34
 8002c60:	4620      	mov	r0, r4
 8002c62:	f00a fec3 	bl	800d9ec <_ZdlPvj>
	MFCCuebergeben(str);
 8002c66:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 8002c6a:	f000 fa0b 	bl	8003084 <_Z14MFCCuebergebenPc>


}
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	4618      	mov	r0, r3
 8002c72:	f00a ff84 	bl	800db7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002c76:	f607 47cc 	addw	r7, r7, #3276	; 0xccc
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	0801310c 	.word	0x0801310c
 8002c84:	200027b8 	.word	0x200027b8
 8002c88:	08013128 	.word	0x08013128

08002c8c <_Z9Audio1Secv>:
void Audio1Sec()
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0

      int alpha = 0.1;  // Faktor zur Anpassung des Schwellwerts
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
	  int loudSoundCounter = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
	  const int LOUD_SOUND_DURATION = 5;
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	603b      	str	r3, [r7, #0]
	 for (int i = 0; i < I2S_BUF_SIZE/4; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	e0c9      	b.n	8002e38 <_Z9Audio1Secv+0x1ac>
	 {
		 OFFSET= alpha * abs(mergedFrame[i]) + (1 - alpha) * OFFSET;
 8002ca4:	4a69      	ldr	r2, [pc, #420]	; (8002e4c <_Z9Audio1Secv+0x1c0>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fdac 	bl	800280a <_ZSt3absl>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	fb03 f202 	mul.w	r2, r3, r2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f1c3 0301 	rsb	r3, r3, #1
 8002cc0:	4963      	ldr	r1, [pc, #396]	; (8002e50 <_Z9Audio1Secv+0x1c4>)
 8002cc2:	6809      	ldr	r1, [r1, #0]
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a61      	ldr	r2, [pc, #388]	; (8002e50 <_Z9Audio1Secv+0x1c4>)
 8002ccc:	6013      	str	r3, [r2, #0]
		 //printf("Offset: %d Frame: %d\n", OFFSET, mergedFrame[i]);
		  // Überprüfen, ob das Signal lauter als der Schwellwert ist
			if (abs(mergedFrame[i]) > OFFSET)
 8002cce:	4a5f      	ldr	r2, [pc, #380]	; (8002e4c <_Z9Audio1Secv+0x1c0>)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fd97 	bl	800280a <_ZSt3absl>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b5c      	ldr	r3, [pc, #368]	; (8002e50 <_Z9Audio1Secv+0x1c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	bfcc      	ite	gt
 8002ce6:	2301      	movgt	r3, #1
 8002ce8:	2300      	movle	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <_Z9Audio1Secv+0x6c>
			{
				loudSoundCounter++;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e001      	b.n	8002cfc <_Z9Audio1Secv+0x70>
			} else
			{
				loudSoundCounter = 0;  // Zurücksetzen, wenn das Geräusch nicht mehr laut ist
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
			}
				 //// Filtern von Geräuschen unter dem Schwellwert
		   if(abs(mergedFrame[i])>noise)
 8002cfc:	4a53      	ldr	r2, [pc, #332]	; (8002e4c <_Z9Audio1Secv+0x1c0>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fd80 	bl	800280a <_ZSt3absl>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <_Z9Audio1Secv+0x1c8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	bfcc      	ite	gt
 8002d14:	2301      	movgt	r3, #1
 8002d16:	2300      	movle	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 8088 	bne.w	8002e30 <_Z9Audio1Secv+0x1a4>
		   {
			   continue;//// Überspringen der aktuellen Iteration
		   }

			   //ein Teil des Audiosignal vor der Überschreitung des Schwellwert
			   RingBuffer[RingBufferIndex] = mergedFrame[i];
 8002d20:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <_Z9Audio1Secv+0x1cc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4949      	ldr	r1, [pc, #292]	; (8002e4c <_Z9Audio1Secv+0x1c0>)
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002d2c:	494b      	ldr	r1, [pc, #300]	; (8002e5c <_Z9Audio1Secv+0x1d0>)
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			   RingBufferIndex = (RingBufferIndex + 1) % RingBufferSize;
 8002d32:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <_Z9Audio1Secv+0x1cc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4a49      	ldr	r2, [pc, #292]	; (8002e60 <_Z9Audio1Secv+0x1d4>)
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002d40:	fb01 f202 	mul.w	r2, r1, r2
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	4a44      	ldr	r2, [pc, #272]	; (8002e58 <_Z9Audio1Secv+0x1cc>)
 8002d48:	6013      	str	r3, [r2, #0]
		 if (abs(mergedFrame[i])>OFFSET&& !isRC&&loudSoundCounter >= LOUD_SOUND_DURATION)
 8002d4a:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <_Z9Audio1Secv+0x1c0>)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fd59 	bl	800280a <_ZSt3absl>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <_Z9Audio1Secv+0x1c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	dd0b      	ble.n	8002d7a <_Z9Audio1Secv+0xee>
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <_Z9Audio1Secv+0x1d8>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f083 0301 	eor.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <_Z9Audio1Secv+0xee>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	dd01      	ble.n	8002d7a <_Z9Audio1Secv+0xee>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <_Z9Audio1Secv+0xf0>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02f      	beq.n	8002de0 <_Z9Audio1Secv+0x154>
		 {
			 isRC= true;
 8002d80:	4b38      	ldr	r3, [pc, #224]	; (8002e64 <_Z9Audio1Secv+0x1d8>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]

			 rcStTm = HAL_GetTick();
 8002d86:	f001 feab 	bl	8004ae0 <HAL_GetTick>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <_Z9Audio1Secv+0x1dc>)
 8002d90:	601a      	str	r2, [r3, #0]
			 printf("Aufnahme beginnt\n");
 8002d92:	4836      	ldr	r0, [pc, #216]	; (8002e6c <_Z9Audio1Secv+0x1e0>)
 8002d94:	f00e f91a 	bl	8010fcc <puts>
			 int copyIndex = RingBufferIndex;
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <_Z9Audio1Secv+0x1cc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
			 for(int k=0;k<RingBufferSize;k++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	e018      	b.n	8002dd6 <_Z9Audio1Secv+0x14a>
			 {
				 ISA[iZaehler++] = RingBuffer[copyIndex];
 8002da4:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <_Z9Audio1Secv+0x1e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	4931      	ldr	r1, [pc, #196]	; (8002e70 <_Z9Audio1Secv+0x1e4>)
 8002dac:	600a      	str	r2, [r1, #0]
 8002dae:	492b      	ldr	r1, [pc, #172]	; (8002e5c <_Z9Audio1Secv+0x1d0>)
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002db6:	492f      	ldr	r1, [pc, #188]	; (8002e74 <_Z9Audio1Secv+0x1e8>)
 8002db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				 copyIndex = (copyIndex + 1) % RingBufferSize;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <_Z9Audio1Secv+0x1d4>)
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	fb93 f1f2 	sdiv	r1, r3, r2
 8002dc8:	fb01 f202 	mul.w	r2, r1, r2
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
			 for(int k=0;k<RingBufferSize;k++)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <_Z9Audio1Secv+0x1d4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	dbe1      	blt.n	8002da4 <_Z9Audio1Secv+0x118>
			 }

		 }


		 if(isRC)
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <_Z9Audio1Secv+0x1d8>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d024      	beq.n	8002e32 <_Z9Audio1Secv+0x1a6>
        {

 				ISA[iZaehler++] = mergedFrame[i];
 8002de8:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <_Z9Audio1Secv+0x1e4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	4920      	ldr	r1, [pc, #128]	; (8002e70 <_Z9Audio1Secv+0x1e4>)
 8002df0:	600a      	str	r2, [r1, #0]
 8002df2:	4916      	ldr	r1, [pc, #88]	; (8002e4c <_Z9Audio1Secv+0x1c0>)
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002dfa:	491e      	ldr	r1, [pc, #120]	; (8002e74 <_Z9Audio1Secv+0x1e8>)
 8002dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 				if(iZaehler==16000)
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <_Z9Audio1Secv+0x1e4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002e08:	d113      	bne.n	8002e32 <_Z9Audio1Secv+0x1a6>
 				{
 					iZaehler=0;
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <_Z9Audio1Secv+0x1e4>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 					Konvertierung();
 8002e10:	f7ff fe46 	bl	8002aa0 <_Z13Konvertierungv>
 					isRC = false;
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <_Z9Audio1Secv+0x1d8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
 					printf("Aufnahme beendet. Dauer: %lu ms\n", HAL_GetTick() - rcStTm);
 8002e1a:	f001 fe61 	bl	8004ae0 <HAL_GetTick>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <_Z9Audio1Secv+0x1dc>)
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	4813      	ldr	r0, [pc, #76]	; (8002e78 <_Z9Audio1Secv+0x1ec>)
 8002e2a:	f00e f869 	bl	8010f00 <iprintf>
 				break;
 8002e2e:	e008      	b.n	8002e42 <_Z9Audio1Secv+0x1b6>
			   continue;//// Überspringen der aktuellen Iteration
 8002e30:	bf00      	nop
	 for (int i = 0; i < I2S_BUF_SIZE/4; i++)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3301      	adds	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2bf9      	cmp	r3, #249	; 0xf9
 8002e3c:	f77f af32 	ble.w	8002ca4 <_Z9Audio1Secv+0x18>



        }
	 }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200023c8 	.word	0x200023c8
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000008 	.word	0x20000008
 8002e58:	2001603c 	.word	0x2001603c
 8002e5c:	200121b8 	.word	0x200121b8
 8002e60:	20000004 	.word	0x20000004
 8002e64:	200027b0 	.word	0x200027b0
 8002e68:	20016044 	.word	0x20016044
 8002e6c:	08013144 	.word	0x08013144
 8002e70:	20016040 	.word	0x20016040
 8002e74:	200027b8 	.word	0x200027b8
 8002e78:	08013158 	.word	0x08013158

08002e7c <_Z12Control_LEDsl>:


void Control_LEDs(int32_t numberOfLEDs) {
 8002e7c:	b5b0      	push	{r4, r5, r7, lr}
 8002e7e:	b094      	sub	sp, #80	; 0x50
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

    GPIO_TypeDef* LED_PORTS[] = {GPIOG, GPIOG, GPIOE, GPIOE, GPIOE, GPIOE, GPIOE, GPIOE, GPIOF, GPIOB};
 8002e84:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <_Z12Control_LEDsl+0xa8>)
 8002e86:	f107 0420 	add.w	r4, r7, #32
 8002e8a:	461d      	mov	r5, r3
 8002e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e98:	e884 0003 	stmia.w	r4, {r0, r1}
    uint16_t LED_PINS[] = {GPIO_PIN_14, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7, GPIO_PIN_10, GPIO_PIN_12, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_15, GPIO_PIN_11};
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <_Z12Control_LEDsl+0xac>)
 8002e9e:	f107 040c 	add.w	r4, r7, #12
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ea8:	682b      	ldr	r3, [r5, #0]
 8002eaa:	6023      	str	r3, [r4, #0]


    for (int i = 0; i < 10; i++) {
 8002eac:	2300      	movs	r3, #0
 8002eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb0:	e012      	b.n	8002ed8 <_Z12Control_LEDsl+0x5c>
        HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_RESET);
 8002eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	3350      	adds	r3, #80	; 0x50
 8002eb8:	443b      	add	r3, r7
 8002eba:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	3350      	adds	r3, #80	; 0x50
 8002ec4:	443b      	add	r3, r7
 8002ec6:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f002 ffc1 	bl	8005e54 <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) {
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eda:	2b09      	cmp	r3, #9
 8002edc:	dde9      	ble.n	8002eb2 <_Z12Control_LEDsl+0x36>
    }

    for (int i = 0; i < numberOfLEDs; i++) {
 8002ede:	2300      	movs	r3, #0
 8002ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ee2:	e015      	b.n	8002f10 <_Z12Control_LEDsl+0x94>
        if (i < 10)
 8002ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee6:	2b09      	cmp	r3, #9
 8002ee8:	dc0f      	bgt.n	8002f0a <_Z12Control_LEDsl+0x8e>
        {
            HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_SET);
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	3350      	adds	r3, #80	; 0x50
 8002ef0:	443b      	add	r3, r7
 8002ef2:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8002ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	3350      	adds	r3, #80	; 0x50
 8002efc:	443b      	add	r3, r7
 8002efe:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8002f02:	2201      	movs	r2, #1
 8002f04:	4619      	mov	r1, r3
 8002f06:	f002 ffa5 	bl	8005e54 <HAL_GPIO_WritePin>
    for (int i = 0; i < numberOfLEDs; i++) {
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dbe5      	blt.n	8002ee4 <_Z12Control_LEDsl+0x68>
        }
    }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3750      	adds	r7, #80	; 0x50
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bdb0      	pop	{r4, r5, r7, pc}
 8002f22:	bf00      	nop
 8002f24:	080130d0 	.word	0x080130d0
 8002f28:	080130f8 	.word	0x080130f8

08002f2c <HAL_I2S_RxHalfCpltCallback>:


void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef* hi2s2 )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	if(!datenVerarbeiten) {
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f083 0301 	eor.w	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d124      	bne.n	8002f8e <HAL_I2S_RxHalfCpltCallback+0x62>

	    }
	else
	{
	for (int i = 0, j = 0; i < I2S_BUF_SIZE ; i += 4, j++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	e019      	b.n	8002f82 <HAL_I2S_RxHalfCpltCallback+0x56>
			{
				// Zm
				int32_t mv = ((int32_t)inputBuffer1[i] << 16) | inputBuffer1[i + 1];
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <HAL_I2S_RxHalfCpltCallback+0x70>)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	490f      	ldr	r1, [pc, #60]	; (8002f9c <HAL_I2S_RxHalfCpltCallback+0x70>)
 8002f5e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
				mv= ((int32_t)mv>>14);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	139b      	asrs	r3, r3, #14
 8002f6a:	60fb      	str	r3, [r7, #12]
				// Sp
				mergedFrame[j] = mv;
 8002f6c:	490c      	ldr	r1, [pc, #48]	; (8002fa0 <HAL_I2S_RxHalfCpltCallback+0x74>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0, j = 0; i < I2S_BUF_SIZE ; i += 4, j++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f88:	dbe1      	blt.n	8002f4e <HAL_I2S_RxHalfCpltCallback+0x22>
				//printf("%d\n",mv);
			}
	Audio1Sec();
 8002f8a:	f7ff fe7f 	bl	8002c8c <_Z9Audio1Secv>
	}


}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20016038 	.word	0x20016038
 8002f9c:	20001428 	.word	0x20001428
 8002fa0:	200023c8 	.word	0x200023c8

08002fa4 <_Z13TimerCallbackv>:

void TimerCallback()
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
    datenVerarbeiten = true;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <_Z13TimerCallbackv+0x14>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	20016038 	.word	0x20016038

08002fbc <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s2)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	if(!datenVerarbeiten) {
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <HAL_I2S_RxCpltCallback+0x6c>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f083 0301 	eor.w	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d125      	bne.n	8003020 <HAL_I2S_RxCpltCallback+0x64>

	    }
	else
	{
	for (int i =I2S_BUF_SIZE , j = 0; i < I2S_BUF_SIZE*2 ; i += 4, j++)
 8002fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e019      	b.n	8003014 <HAL_I2S_RxCpltCallback+0x58>
			{
				// Zm
				int32_t mv = ((int32_t)inputBuffer1[i] << 16) | inputBuffer1[i + 1];
 8002fe0:	4a12      	ldr	r2, [pc, #72]	; (800302c <HAL_I2S_RxCpltCallback+0x70>)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	3201      	adds	r2, #1
 8002fee:	490f      	ldr	r1, [pc, #60]	; (800302c <HAL_I2S_RxCpltCallback+0x70>)
 8002ff0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
				mv= ((int32_t)mv>>14);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	139b      	asrs	r3, r3, #14
 8002ffc:	60fb      	str	r3, [r7, #12]
				// Sp
				mergedFrame[j] = mv;
 8002ffe:	490c      	ldr	r1, [pc, #48]	; (8003030 <HAL_I2S_RxCpltCallback+0x74>)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i =I2S_BUF_SIZE , j = 0; i < I2S_BUF_SIZE*2 ; i += 4, j++)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3304      	adds	r3, #4
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	3301      	adds	r3, #1
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800301a:	dbe1      	blt.n	8002fe0 <HAL_I2S_RxCpltCallback+0x24>
				//printf("%d\n",mv);
			}
	Audio1Sec();
 800301c:	f7ff fe36 	bl	8002c8c <_Z9Audio1Secv>
	}
}
 8003020:	bf00      	nop
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20016038 	.word	0x20016038
 800302c:	20001428 	.word	0x20001428
 8003030:	200023c8 	.word	0x200023c8

08003034 <_Z9LauteZeigv>:


void LauteZeig()
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
	//static bool seStat = false;

    for (int i = 0; i < I2S_BUF_SIZE/4; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	e015      	b.n	800306c <_Z9LauteZeigv+0x38>
    {
    	HAL_Delay(3000);
 8003040:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003044:	f001 fd58 	bl	8004af8 <HAL_Delay>
     	int al=(mergedFrame[i]/1000)-5;
 8003048:	4a0c      	ldr	r2, [pc, #48]	; (800307c <_Z9LauteZeigv+0x48>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003050:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <_Z9LauteZeigv+0x4c>)
 8003052:	fb82 1203 	smull	r1, r2, r2, r3
 8003056:	1192      	asrs	r2, r2, #6
 8003058:	17db      	asrs	r3, r3, #31
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	3b05      	subs	r3, #5
 800305e:	603b      	str	r3, [r7, #0]
        Control_LEDs(al); // 音量展示
 8003060:	6838      	ldr	r0, [r7, #0]
 8003062:	f7ff ff0b 	bl	8002e7c <_Z12Control_LEDsl>
    for (int i = 0; i < I2S_BUF_SIZE/4; i++)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3301      	adds	r3, #1
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2bf9      	cmp	r3, #249	; 0xf9
 8003070:	dde6      	ble.n	8003040 <_Z9LauteZeigv+0xc>
        {
        	//Control_LEDs(1);
        }
    }*/
    }
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	200023c8 	.word	0x200023c8
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <_Z14MFCCuebergebenPc>:
	    volume /=(I2S_BUF_SIZE/4) ;  // 平均值
	    return volume;


}
void MFCCuebergeben(char* result) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
    //Konvertierung();



	if(!commandHistory.empty()) printf("Last Cmd %s\n", commandHistory.back());
 800308c:	4894      	ldr	r0, [pc, #592]	; (80032e0 <_Z14MFCCuebergebenPc+0x25c>)
 800308e:	f000 fa3c 	bl	800350a <_ZNKSt5dequeIPcSaIS0_EE5emptyEv>
 8003092:	4603      	mov	r3, r0
 8003094:	f083 0301 	eor.w	r3, r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <_Z14MFCCuebergebenPc+0x2c>
 800309e:	4890      	ldr	r0, [pc, #576]	; (80032e0 <_Z14MFCCuebergebenPc+0x25c>)
 80030a0:	f000 fa45 	bl	800352e <_ZNSt5dequeIPcSaIS0_EE4backEv>
 80030a4:	4603      	mov	r3, r0
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4619      	mov	r1, r3
 80030aa:	488e      	ldr	r0, [pc, #568]	; (80032e4 <_Z14MFCCuebergebenPc+0x260>)
 80030ac:	f00d ff28 	bl	8010f00 <iprintf>
    // Zustand des Buttons überprüfen (Button Backup)
    int buttonPressCount = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80030b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030b8:	488b      	ldr	r0, [pc, #556]	; (80032e8 <_Z14MFCCuebergebenPc+0x264>)
 80030ba:	f002 feb3 	bl	8005e24 <HAL_GPIO_ReadPin>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d031      	beq.n	8003132 <_Z14MFCCuebergebenPc+0xae>
        // Taste wurde gedrückt, Zähler erhöhen
        buttonPressCount++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
        // Warten, bis die Taste losgelassen wird
        while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 80030d4:	bf00      	nop
 80030d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030da:	4883      	ldr	r0, [pc, #524]	; (80032e8 <_Z14MFCCuebergebenPc+0x264>)
 80030dc:	f002 fea2 	bl	8005e24 <HAL_GPIO_ReadPin>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f2      	bne.n	80030d6 <_Z14MFCCuebergebenPc+0x52>
        HAL_Delay(250); // Kurze Verzögerung für Entprellung
 80030f0:	20fa      	movs	r0, #250	; 0xfa
 80030f2:	f001 fd01 	bl	8004af8 <HAL_Delay>
        // Überprüfen, ob die Taste erneut gedrückt und losgelassen wird
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80030f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030fa:	487b      	ldr	r0, [pc, #492]	; (80032e8 <_Z14MFCCuebergebenPc+0x264>)
 80030fc:	f002 fe92 	bl	8005e24 <HAL_GPIO_ReadPin>
 8003100:	4603      	mov	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	bf0c      	ite	eq
 8003106:	2301      	moveq	r3, #1
 8003108:	2300      	movne	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <_Z14MFCCuebergebenPc+0xae>
            buttonPressCount++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3301      	adds	r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
            // Warten, bis die Taste losgelassen wird
            while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 8003116:	bf00      	nop
 8003118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800311c:	4872      	ldr	r0, [pc, #456]	; (80032e8 <_Z14MFCCuebergebenPc+0x264>)
 800311e:	f002 fe81 	bl	8005e24 <HAL_GPIO_ReadPin>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f2      	bne.n	8003118 <_Z14MFCCuebergebenPc+0x94>
        }
    }
    	if (strcmp(result, "ON")==0) {
 8003132:	496e      	ldr	r1, [pc, #440]	; (80032ec <_Z14MFCCuebergebenPc+0x268>)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7fd f8bb 	bl	80002b0 <strcmp>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <_Z14MFCCuebergebenPc+0xca>
        // Steckdose wird eingeschaltet und Modi auf dem LCD angezeigt
        sendSequence(ON);
 8003140:	f640 70c2 	movw	r0, #4034	; 0xfc2
 8003144:	f7ff fbee 	bl	8002924 <_Z12sendSequencet>
        //displayLCD("Socket ON");
        printf("\nSocket ON\n1. Timer Mode\n2. Night Mode");
 8003148:	4869      	ldr	r0, [pc, #420]	; (80032f0 <_Z14MFCCuebergebenPc+0x26c>)
 800314a:	f00d fed9 	bl	8010f00 <iprintf>
    	}
        if ((strcmp(result, "ONE")==0 || buttonPressCount == 1) && lastCommand==("ON")) {
 800314e:	4969      	ldr	r1, [pc, #420]	; (80032f4 <_Z14MFCCuebergebenPc+0x270>)
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7fd f8ad 	bl	80002b0 <strcmp>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <_Z14MFCCuebergebenPc+0xde>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <_Z14MFCCuebergebenPc+0xf0>
 8003162:	4962      	ldr	r1, [pc, #392]	; (80032ec <_Z14MFCCuebergebenPc+0x268>)
 8003164:	4864      	ldr	r0, [pc, #400]	; (80032f8 <_Z14MFCCuebergebenPc+0x274>)
 8003166:	f000 f9fb 	bl	8003560 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <_Z14MFCCuebergebenPc+0xf0>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <_Z14MFCCuebergebenPc+0xf2>
 8003174:	2300      	movs	r3, #0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <_Z14MFCCuebergebenPc+0xfe>
            // Timer-Modus wird aktiviert
            //displayLCD("1-15m 2-60m 3-d");
            printf("\n1. 15 minuten\n2. 60 minuten\n3. Dauerhaft");
 800317a:	4860      	ldr	r0, [pc, #384]	; (80032fc <_Z14MFCCuebergebenPc+0x278>)
 800317c:	f00d fec0 	bl	8010f00 <iprintf>
 8003180:	e017      	b.n	80031b2 <_Z14MFCCuebergebenPc+0x12e>
        } else if ((strcmp(result , "TWO")==0 || buttonPressCount == 2) && lastCommand==("ON")) {
 8003182:	495f      	ldr	r1, [pc, #380]	; (8003300 <_Z14MFCCuebergebenPc+0x27c>)
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fd f893 	bl	80002b0 <strcmp>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <_Z14MFCCuebergebenPc+0x112>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d108      	bne.n	80031a8 <_Z14MFCCuebergebenPc+0x124>
 8003196:	4955      	ldr	r1, [pc, #340]	; (80032ec <_Z14MFCCuebergebenPc+0x268>)
 8003198:	4857      	ldr	r0, [pc, #348]	; (80032f8 <_Z14MFCCuebergebenPc+0x274>)
 800319a:	f000 f9e1 	bl	8003560 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <_Z14MFCCuebergebenPc+0x124>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <_Z14MFCCuebergebenPc+0x126>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <_Z14MFCCuebergebenPc+0x12e>
            // Nachtmodus wird aktiviert
            turnOffLEDArray();
 80031ae:	f7ff fc3f 	bl	8002a30 <_Z15turnOffLEDArrayv>
            // Bei unbekanntem oder unerwartetem Befehl
            //displayLCD("unbekannter Befehl");
            //printf("unbekannter Befehl\n");
        }

        if (strcmp(result, "OFF")==0) {
 80031b2:	4954      	ldr	r1, [pc, #336]	; (8003304 <_Z14MFCCuebergebenPc+0x280>)
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fd f87b 	bl	80002b0 <strcmp>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <_Z14MFCCuebergebenPc+0x142>
        //displayLCD("Sicher? 1.Y 2.N");
        printf("\nSind Sie sicher?\n1.YES\n2.NO");
 80031c0:	4851      	ldr	r0, [pc, #324]	; (8003308 <_Z14MFCCuebergebenPc+0x284>)
 80031c2:	f00d fe9d 	bl	8010f00 <iprintf>
        }
        if ((strcmp(result, "YES")==0 || buttonPressCount == 1) && lastCommand==("OFF"))  {
 80031c6:	4951      	ldr	r1, [pc, #324]	; (800330c <_Z14MFCCuebergebenPc+0x288>)
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fd f871 	bl	80002b0 <strcmp>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <_Z14MFCCuebergebenPc+0x156>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d108      	bne.n	80031ec <_Z14MFCCuebergebenPc+0x168>
 80031da:	494a      	ldr	r1, [pc, #296]	; (8003304 <_Z14MFCCuebergebenPc+0x280>)
 80031dc:	4846      	ldr	r0, [pc, #280]	; (80032f8 <_Z14MFCCuebergebenPc+0x274>)
 80031de:	f000 f9bf 	bl	8003560 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <_Z14MFCCuebergebenPc+0x168>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <_Z14MFCCuebergebenPc+0x16a>
 80031ec:	2300      	movs	r3, #0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <_Z14MFCCuebergebenPc+0x178>
            // Steckdose wird ausgeschaltet
            sendSequence(OFF);
 80031f2:	f640 70c1 	movw	r0, #4033	; 0xfc1
 80031f6:	f7ff fb95 	bl	8002924 <_Z12sendSequencet>
 80031fa:	e00f      	b.n	800321c <_Z14MFCCuebergebenPc+0x198>
        } else if ((strcmp(result, "NO")==0 || buttonPressCount == 2)&& lastCommand==("OFF")) {
 80031fc:	4944      	ldr	r1, [pc, #272]	; (8003310 <_Z14MFCCuebergebenPc+0x28c>)
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd f856 	bl	80002b0 <strcmp>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <_Z14MFCCuebergebenPc+0x18c>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d105      	bne.n	800321c <_Z14MFCCuebergebenPc+0x198>
 8003210:	493c      	ldr	r1, [pc, #240]	; (8003304 <_Z14MFCCuebergebenPc+0x280>)
 8003212:	4839      	ldr	r0, [pc, #228]	; (80032f8 <_Z14MFCCuebergebenPc+0x274>)
 8003214:	f000 f9a4 	bl	8003560 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
            // Bei unbekanntem oder unerwartetem Befehl
            //displayLCD("unbekannter Befehl");
            //printf("unbekannter Befehl\n");
        }

        if ((strcmp(result, "ONE")==0 || buttonPressCount == 1) && lastCommand==("ONE")) {
 800321c:	4935      	ldr	r1, [pc, #212]	; (80032f4 <_Z14MFCCuebergebenPc+0x270>)
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd f846 	bl	80002b0 <strcmp>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <_Z14MFCCuebergebenPc+0x1ac>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d108      	bne.n	8003242 <_Z14MFCCuebergebenPc+0x1be>
 8003230:	4930      	ldr	r1, [pc, #192]	; (80032f4 <_Z14MFCCuebergebenPc+0x270>)
 8003232:	4831      	ldr	r0, [pc, #196]	; (80032f8 <_Z14MFCCuebergebenPc+0x274>)
 8003234:	f000 f994 	bl	8003560 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <_Z14MFCCuebergebenPc+0x1be>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <_Z14MFCCuebergebenPc+0x1c0>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <_Z14MFCCuebergebenPc+0x1d2>
            // Timer auf 15 Minuten gesetzt
            setTimer(15);
 8003248:	200f      	movs	r0, #15
 800324a:	f7ff fbbf 	bl	80029cc <_Z8setTimeri>
            //displayLCD("15 Minuten ");
            printf("\nTimer für 15 Minuten eingestellt");
 800324e:	4831      	ldr	r0, [pc, #196]	; (8003314 <_Z14MFCCuebergebenPc+0x290>)
 8003250:	f00d fe56 	bl	8010f00 <iprintf>
 8003254:	e039      	b.n	80032ca <_Z14MFCCuebergebenPc+0x246>
        } else if ((strcmp(result, "TWO")==0 || buttonPressCount == 2) && lastCommand==("ONE")) {
 8003256:	492a      	ldr	r1, [pc, #168]	; (8003300 <_Z14MFCCuebergebenPc+0x27c>)
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fd f829 	bl	80002b0 <strcmp>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <_Z14MFCCuebergebenPc+0x1e6>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d108      	bne.n	800327c <_Z14MFCCuebergebenPc+0x1f8>
 800326a:	4922      	ldr	r1, [pc, #136]	; (80032f4 <_Z14MFCCuebergebenPc+0x270>)
 800326c:	4822      	ldr	r0, [pc, #136]	; (80032f8 <_Z14MFCCuebergebenPc+0x274>)
 800326e:	f000 f977 	bl	8003560 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <_Z14MFCCuebergebenPc+0x1f8>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <_Z14MFCCuebergebenPc+0x1fa>
 800327c:	2300      	movs	r3, #0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <_Z14MFCCuebergebenPc+0x20c>
            // Timer auf 1 Stunde gesetzt
            setTimer(60);
 8003282:	203c      	movs	r0, #60	; 0x3c
 8003284:	f7ff fba2 	bl	80029cc <_Z8setTimeri>
            //displayLCD("1 Stunde");
            printf("\nTimer für 1 Stunde eingestellt");
 8003288:	4823      	ldr	r0, [pc, #140]	; (8003318 <_Z14MFCCuebergebenPc+0x294>)
 800328a:	f00d fe39 	bl	8010f00 <iprintf>
 800328e:	e01c      	b.n	80032ca <_Z14MFCCuebergebenPc+0x246>
        } else if ((strcmp(result,"THREE")==0 || buttonPressCount == 3) && lastCommand==("ONE")) {
 8003290:	4922      	ldr	r1, [pc, #136]	; (800331c <_Z14MFCCuebergebenPc+0x298>)
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd f80c 	bl	80002b0 <strcmp>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <_Z14MFCCuebergebenPc+0x220>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d108      	bne.n	80032b6 <_Z14MFCCuebergebenPc+0x232>
 80032a4:	4913      	ldr	r1, [pc, #76]	; (80032f4 <_Z14MFCCuebergebenPc+0x270>)
 80032a6:	4814      	ldr	r0, [pc, #80]	; (80032f8 <_Z14MFCCuebergebenPc+0x274>)
 80032a8:	f000 f95a 	bl	8003560 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <_Z14MFCCuebergebenPc+0x232>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <_Z14MFCCuebergebenPc+0x234>
 80032b6:	2300      	movs	r3, #0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <_Z14MFCCuebergebenPc+0x240>
            // Steckdose bleibt an
            //displayLCD("Dauerhaft");
            printf("\nSteckdose bleibt eingeschaltet");
 80032bc:	4818      	ldr	r0, [pc, #96]	; (8003320 <_Z14MFCCuebergebenPc+0x29c>)
 80032be:	f00d fe1f 	bl	8010f00 <iprintf>
 80032c2:	e002      	b.n	80032ca <_Z14MFCCuebergebenPc+0x246>
        } else {
            // Timer-Modus abgebrochen
            //displayLCD("Timer beendet");
            printf("\nTimer-Modus abgebrochen");
 80032c4:	4817      	ldr	r0, [pc, #92]	; (8003324 <_Z14MFCCuebergebenPc+0x2a0>)
 80032c6:	f00d fe1b 	bl	8010f00 <iprintf>
        }
        addCommandToHistory(result);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff fab8 	bl	8002840 <_Z19addCommandToHistoryPc>
        lastCommand = result;
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4809      	ldr	r0, [pc, #36]	; (80032f8 <_Z14MFCCuebergebenPc+0x274>)
 80032d4:	f00a fce7 	bl	800dca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
    }
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20016070 	.word	0x20016070
 80032e4:	0801317c 	.word	0x0801317c
 80032e8:	40020800 	.word	0x40020800
 80032ec:	0801318c 	.word	0x0801318c
 80032f0:	08013190 	.word	0x08013190
 80032f4:	080131b8 	.word	0x080131b8
 80032f8:	20016058 	.word	0x20016058
 80032fc:	080131bc 	.word	0x080131bc
 8003300:	080131e8 	.word	0x080131e8
 8003304:	080131ec 	.word	0x080131ec
 8003308:	080131f0 	.word	0x080131f0
 800330c:	08013210 	.word	0x08013210
 8003310:	08013214 	.word	0x08013214
 8003314:	08013218 	.word	0x08013218
 8003318:	0801323c 	.word	0x0801323c
 800331c:	08013260 	.word	0x08013260
 8003320:	08013268 	.word	0x08013268
 8003324:	08013288 	.word	0x08013288

08003328 <my_main>:



void my_main(I2S_HandleTypeDef* hi2s2,TIM_HandleTypeDef* htim4_,I2C_HandleTypeDef* __hi2c2)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	HAL_I2S_Receive_DMA(hi2s2, &inputBuffer1[0], I2S_BUF_SIZE);
 8003334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003338:	4924      	ldr	r1, [pc, #144]	; (80033cc <my_main+0xa4>)
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f003 fcd8 	bl	8006cf0 <HAL_I2S_Receive_DMA>

	int t=HAL_GetTick();
 8003340:	f001 fbce 	bl	8004ae0 <HAL_GetTick>
 8003344:	4603      	mov	r3, r0
 8003346:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick()-t<2000)
 8003348:	bf00      	nop
 800334a:	f001 fbc9 	bl	8004ae0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003358:	4293      	cmp	r3, r2
 800335a:	bf94      	ite	ls
 800335c:	2301      	movls	r3, #1
 800335e:	2300      	movhi	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f1      	bne.n	800334a <my_main+0x22>
	{

	}
	printf("2 Sekunde vorbei\n");
 8003366:	481a      	ldr	r0, [pc, #104]	; (80033d0 <my_main+0xa8>)
 8003368:	f00d fe30 	bl	8010fcc <puts>
	TimerCallback();
 800336c:	f7ff fe1a 	bl	8002fa4 <_Z13TimerCallbackv>
	htim4__=htim4_;
 8003370:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <my_main+0xac>)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim4__);
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <my_main+0xac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f005 f942 	bl	8008604 <HAL_TIM_Base_Start>
	_hi2c2=__hi2c2;
 8003380:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <my_main+0xb0>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6013      	str	r3, [r2, #0]
	lcddev = new LCD_HandleTypeDef();
 8003386:	200c      	movs	r0, #12
 8003388:	f00a fb34 	bl	800d9f4 <_Znwj>
 800338c:	4603      	mov	r3, r0
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	721a      	strb	r2, [r3, #8]
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <my_main+0xb4>)
 800339c:	6013      	str	r3, [r2, #0]
	lcddev->i2c_addr = LCD_DEFAULT_ADDR;
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <my_main+0xb4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	224e      	movs	r2, #78	; 0x4e
 80033a4:	701a      	strb	r2, [r3, #0]
	lcddev->backlight_enable = 1;
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <my_main+0xb4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	721a      	strb	r2, [r3, #8]
	lcddev->i2c = __hi2c2;
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <my_main+0xb4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	605a      	str	r2, [r3, #4]
	LCD_Begin(lcddev);
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <my_main+0xb4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe f8c2 	bl	8001544 <LCD_Begin>
	initializeLCD();
 80033c0:	f7ff faea 	bl	8002998 <_Z13initializeLCDv>
		volume=mittelwert();


		//for(int loop = 0; loop < 1; loop++)
			printf("%d ", volume);*/
		LauteZeig();
 80033c4:	f7ff fe36 	bl	8003034 <_Z9LauteZeigv>
 80033c8:	e7fc      	b.n	80033c4 <my_main+0x9c>
 80033ca:	bf00      	nop
 80033cc:	20001428 	.word	0x20001428
 80033d0:	080132a4 	.word	0x080132a4
 80033d4:	200027b4 	.word	0x200027b4
 80033d8:	20016054 	.word	0x20016054
 80033dc:	20016050 	.word	0x20016050

080033e0 <_ZNSt11_Deque_baseIPcSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f8dc 	bl	80035a6 <_ZNSaIPcED1Ev>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZNSt11_Deque_baseIPcSaIS0_EEC1Ev>:
      _Deque_base()
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f8bf 	bl	8003586 <_ZNSt11_Deque_baseIPcSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8003408:	2100      	movs	r1, #0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8d7 	bl	80035be <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_initialize_mapEj>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <_ZNSt11_Deque_baseIPcSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d010      	beq.n	800344c <_ZNSt11_Deque_baseIPcSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003432:	3304      	adds	r3, #4
 8003434:	461a      	mov	r2, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f924 	bl	8003684 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	461a      	mov	r2, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f937 	bl	80036ba <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ffc6 	bl	80033e0 <_ZNSt11_Deque_baseIPcSaIS0_EE11_Deque_implD1Ev>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <_ZNKSt5dequeIPcSaIS0_EE4sizeEv>:
#endif

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f103 0218 	add.w	r2, r3, #24
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3308      	adds	r3, #8
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f000 f93c 	bl	80036f0 <_ZStmiRKSt15_Deque_iteratorIPcRS0_PS0_ES5_>
 8003478:	4603      	mov	r3, r0
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <_ZNSt5dequeIPcSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8003494:	429a      	cmp	r2, r3
 8003496:	d010      	beq.n	80034ba <_ZNSt5dequeIPcSaIS0_EE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f954 	bl	8003748 <_ZNSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 80034a0:	4602      	mov	r2, r0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f000 f958 	bl	800375e <_ZNSt16allocator_traitsISaIPcEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	1d1a      	adds	r2, r3, #4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 80034b8:	e002      	b.n	80034c0 <_ZNSt5dequeIPcSaIS0_EE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f95c 	bl	8003778 <_ZNSt5dequeIPcSaIS0_EE16_M_pop_front_auxEv>
      }
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_ZNSt5dequeIPcSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80034dc:	429a      	cmp	r2, r3
 80034de:	d00c      	beq.n	80034fa <_ZNSt5dequeIPcSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4619      	mov	r1, r3
 80034ea:	f000 f96d 	bl	80037c8 <_ZNSt16allocator_traitsISaIPcEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	1d1a      	adds	r2, r3, #4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	619a      	str	r2, [r3, #24]
      }
 80034f8:	e003      	b.n	8003502 <_ZNSt5dequeIPcSaIS0_EE9push_backERKS0_+0x3a>
	  _M_push_back_aux(__x);
 80034fa:	6839      	ldr	r1, [r7, #0]
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f977 	bl	80037f0 <_ZNSt5dequeIPcSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>
      }
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <_ZNKSt5dequeIPcSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f103 0218 	add.w	r2, r3, #24
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3308      	adds	r3, #8
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f000 f9aa 	bl	8003878 <_ZSteqRKSt15_Deque_iteratorIPcRS0_PS0_ES5_>
 8003524:	4603      	mov	r3, r0
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_ZNSt5dequeIPcSaIS0_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8003536:	f107 0308 	add.w	r3, r7, #8
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f9af 	bl	80038a0 <_ZNSt5dequeIPcSaIS0_EE3endEv>
	--__tmp;
 8003542:	f107 0308 	add.w	r3, r7, #8
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f9d5 	bl	80038f6 <_ZNSt15_Deque_iteratorIPcRS0_PS0_EmmEv>
	return *__tmp;
 800354c:	f107 0308 	add.w	r3, r7, #8
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f9ef 	bl	8003934 <_ZNKSt15_Deque_iteratorIPcRS0_PS0_EdeEv>
 8003556:	4603      	mov	r3, r0
      }
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 800356a:	6839      	ldr	r1, [r7, #0]
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f00a fba0 	bl	800dcb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_ZNSt11_Deque_baseIPcSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9dc 	bl	800394c <_ZNSaIPcEC1Ev>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f9e4 	bl	8003964 <_ZNSt11_Deque_baseIPcSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_ZNSaIPcED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f9f1 	bl	8003996 <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80035be:	b590      	push	{r4, r7, lr}
 80035c0:	b089      	sub	sp, #36	; 0x24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80035c8:	2004      	movs	r0, #4
 80035ca:	f7ff f909 	bl	80027e0 <_ZSt16__deque_buf_sizej>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80035da:	2308      	movs	r3, #8
 80035dc:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3302      	adds	r3, #2
 80035e2:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80035e4:	f107 0210 	add.w	r2, r7, #16
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f9dc 	bl	80039ac <_ZSt3maxIjERKT_S2_S2_>
 80035f4:	4603      	mov	r3, r0
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f9e6 	bl	80039d4 <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_allocate_mapEj>
 8003608:	4602      	mov	r2, r0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	1acb      	subs	r3, r1, r3
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800361e:	4413      	add	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	69b9      	ldr	r1, [r7, #24]
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f9ec 	bl	8003a0e <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3308      	adds	r3, #8
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fa01 	bl	8003a44 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f103 0218 	add.w	r2, r3, #24
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3b04      	subs	r3, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f000 f9f8 	bl	8003a44 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003660:	2004      	movs	r0, #4
 8003662:	f7ff f8bd 	bl	80027e0 <_ZSt16__deque_buf_sizej>
 8003666:	4602      	mov	r2, r0
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	fbb3 f1f2 	udiv	r1, r3, r2
 800366e:	fb01 f202 	mul.w	r2, r1, r2
 8003672:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	619a      	str	r2, [r3, #24]
    }
 800367c:	bf00      	nop
 800367e:	3724      	adds	r7, #36	; 0x24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd90      	pop	{r4, r7, pc}

08003684 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e008      	b.n	80036a8 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x24>
	_M_deallocate_node(*__n);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4619      	mov	r1, r3
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f9ea 	bl	8003a76 <_ZNSt11_Deque_baseIPcSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3304      	adds	r3, #4
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d3f2      	bcc.n	8003696 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x12>
    }
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f9e5 	bl	8003a9c <_ZNKSt11_Deque_baseIPcSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f9fb 	bl	8003ad6 <_ZNSt16allocator_traitsISaIPPcEE10deallocateERS2_PS1_j>
      }
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f9ea 	bl	8003abe <_ZNSaIPPcED1Ev>
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <_ZStmiRKSt15_Deque_iteratorIPcRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80036fa:	f000 f9fb 	bl	8003af4 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E14_S_buffer_sizeEv>
 80036fe:	4603      	mov	r3, r0
 8003700:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	109b      	asrs	r3, r3, #2
 800370e:	461a      	mov	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6811      	ldr	r1, [r2, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6852      	ldr	r2, [r2, #4]
 800372c:	1a8a      	subs	r2, r1, r2
 800372e:	1092      	asrs	r2, r2, #2
 8003730:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	6891      	ldr	r1, [r2, #8]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	1a8a      	subs	r2, r1, r2
 800373c:	1092      	asrs	r2, r2, #2
 800373e:	4413      	add	r3, r2
      }
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_ZNSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <_ZNSt16allocator_traitsISaIPcEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8003768:	6839      	ldr	r1, [r7, #0]
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9ca 	bl	8003b04 <_ZN9__gnu_cxx13new_allocatorIPcE7destroyIS1_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <_ZNSt5dequeIPcSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ffe0 	bl	8003748 <_ZNSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8003788:	4602      	mov	r2, r0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7ff ffe4 	bl	800375e <_ZNSt16allocator_traitsISaIPcEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f000 f969 	bl	8003a76 <_ZNSt11_Deque_baseIPcSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f103 0208 	add.w	r2, r3, #8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 f946 	bl	8003a44 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	609a      	str	r2, [r3, #8]
    }
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_ZNSt16allocator_traitsISaIPcEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f9a0 	bl	8003b1a <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f9a5 	bl	8003b30 <_ZN9__gnu_cxx13new_allocatorIPcE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <_ZNSt5dequeIPcSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fe2f 	bl	800345e <_ZNKSt5dequeIPcSaIS0_EE4sizeEv>
 8003800:	4604      	mov	r4, r0
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9aa 	bl	8003b5c <_ZNKSt5dequeIPcSaIS0_EE8max_sizeEv>
 8003808:	4603      	mov	r3, r0
 800380a:	429c      	cmp	r4, r3
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <_ZNSt5dequeIPcSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003818:	4816      	ldr	r0, [pc, #88]	; (8003874 <_ZNSt5dequeIPcSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x84>)
 800381a:	f00a f909 	bl	800da30 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 800381e:	2101      	movs	r1, #1
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f9ac 	bl	8003b7e <_ZNSt5dequeIPcSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	1d1c      	adds	r4, r3, #4
 800382e:	4610      	mov	r0, r2
 8003830:	f000 f9c0 	bl	8003bb4 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_allocate_nodeEv>
 8003834:	4603      	mov	r3, r0
 8003836:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8003838:	687c      	ldr	r4, [r7, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699d      	ldr	r5, [r3, #24]
 800383e:	6838      	ldr	r0, [r7, #0]
 8003840:	f000 f96b 	bl	8003b1a <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003844:	4603      	mov	r3, r0
 8003846:	461a      	mov	r2, r3
 8003848:	4629      	mov	r1, r5
 800384a:	4620      	mov	r0, r4
 800384c:	f7ff ffbc 	bl	80037c8 <_ZNSt16allocator_traitsISaIPcEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f103 0218 	add.w	r2, r3, #24
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 f8f0 	bl	8003a44 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	619a      	str	r2, [r3, #24]
      }
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bdb0      	pop	{r4, r5, r7, pc}
 8003874:	080132b8 	.word	0x080132b8

08003878 <_ZSteqRKSt15_Deque_iteratorIPcRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_ZNSt5dequeIPcSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	3318      	adds	r3, #24
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f804 	bl	80038be <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1ERKS3_>
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <_ZNSt15_Deque_iteratorIPcRS0_PS0_EmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d10a      	bne.n	8003920 <_ZNSt15_Deque_iteratorIPcRS0_PS0_EmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	3b04      	subs	r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f896 	bl	8003a44 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_last;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1f1a      	subs	r2, r3, #4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
	return *this;
 800392a:	687b      	ldr	r3, [r7, #4]
      }
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_ZNKSt15_Deque_iteratorIPcRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <_ZNSaIPcEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f93f 	bl	8003bd8 <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_ZNSt11_Deque_baseIPcSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3308      	adds	r3, #8
 800397c:	4618      	mov	r0, r3
 800397e:	f000 f936 	bl	8003bee <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1Ev>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3318      	adds	r3, #24
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f931 	bl	8003bee <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1Ev>
	{ }
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d201      	bcs.n	80039c6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	e000      	b.n	80039c8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80039c6:	687b      	ldr	r3, [r7, #4]
    }
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80039de:	f107 030c 	add.w	r3, r7, #12
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 f859 	bl	8003a9c <_ZNKSt11_Deque_baseIPcSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	6839      	ldr	r1, [r7, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f913 	bl	8003c1c <_ZNSt16allocator_traitsISaIPPcEE8allocateERS2_j>
 80039f6:	4604      	mov	r4, r0
 80039f8:	bf00      	nop
      }
 80039fa:	f107 030c 	add.w	r3, r7, #12
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f85d 	bl	8003abe <_ZNSaIPPcED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003a04:	4623      	mov	r3, r4
      }
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}

08003a0e <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e008      	b.n	8003a32 <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_create_nodesEPPS0_S4_+0x24>
	    *__cur = this->_M_allocate_node();
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f8c7 	bl	8003bb4 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_allocate_nodeEv>
 8003a26:	4602      	mov	r2, r0
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d3f2      	bcc.n	8003a20 <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_create_nodesEPPS0_S4_+0x12>
    }
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685c      	ldr	r4, [r3, #4]
 8003a60:	f000 f848 	bl	8003af4 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E14_S_buffer_sizeEv>
 8003a64:	4603      	mov	r3, r0
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	18e2      	adds	r2, r4, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
      }
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}

08003a76 <_ZNSt11_Deque_baseIPcSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8003a76:	b590      	push	{r4, r7, lr}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8003a80:	687c      	ldr	r4, [r7, #4]
 8003a82:	2004      	movs	r0, #4
 8003a84:	f7fe feac 	bl	80027e0 <_ZSt16__deque_buf_sizej>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f000 f8d3 	bl	8003c3a <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>
      }
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd90      	pop	{r4, r7, pc}

08003a9c <_ZNKSt11_Deque_baseIPcSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003aa6:	6838      	ldr	r0, [r7, #0]
 8003aa8:	f000 f8d6 	bl	8003c58 <_ZNKSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f8dc 	bl	8003c6e <_ZNSaIPPcEC1IS_EERKSaIT_E>
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <_ZNSaIPPcED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8de 	bl	8003c88 <_ZN9__gnu_cxx13new_allocatorIPPcED1Ev>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <_ZNSt16allocator_traitsISaIPPcEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f8d9 	bl	8003c9e <_ZN9__gnu_cxx13new_allocatorIPPcE10deallocateEPS2_j>
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8003af8:	2004      	movs	r0, #4
 8003afa:	f7fe fe71 	bl	80027e0 <_ZSt16__deque_buf_sizej>
 8003afe:	4603      	mov	r3, r0
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <_ZN9__gnu_cxx13new_allocatorIPcE7destroyIS1_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_ZN9__gnu_cxx13new_allocatorIPcE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ffec 	bl	8003b1a <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b42:	4603      	mov	r3, r0
 8003b44:	681c      	ldr	r4, [r3, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	2004      	movs	r0, #4
 8003b4c:	f7fe fe3c 	bl	80027c8 <_ZnwjPv>
 8003b50:	4603      	mov	r3, r0
 8003b52:	601c      	str	r4, [r3, #0]
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd90      	pop	{r4, r7, pc}

08003b5c <_ZNKSt5dequeIPcSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f876 	bl	8003c58 <_ZNKSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f8a5 	bl	8003cbe <_ZNSt5dequeIPcSaIS0_EE11_S_max_sizeERKS1_>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <_ZNSt5dequeIPcSaIS0_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	6809      	ldr	r1, [r1, #0]
 8003b98:	1a41      	subs	r1, r0, r1
 8003b9a:	1089      	asrs	r1, r1, #2
 8003b9c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d904      	bls.n	8003bac <_ZNSt5dequeIPcSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8a3 	bl	8003cf2 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb>
      }
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8003bbc:	687c      	ldr	r4, [r7, #4]
 8003bbe:	2004      	movs	r0, #4
 8003bc0:	f7fe fe0e 	bl	80027e0 <_ZSt16__deque_buf_sizej>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f000 f92c 	bl	8003e26 <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>
 8003bce:	4603      	mov	r3, r0
      }
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd90      	pop	{r4, r7, pc}

08003bd8 <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_ZNSt16allocator_traitsISaIPPcEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003c26:	2200      	movs	r2, #0
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f916 	bl	8003e5c <_ZN9__gnu_cxx13new_allocatorIPPcE8allocateEjPKv>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f92f 	bl	8003eae <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <_ZNKSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <_ZNSaIPPcEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f928 	bl	8003ece <_ZN9__gnu_cxx13new_allocatorIPPcEC1Ev>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_ZN9__gnu_cxx13new_allocatorIPPcED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <_ZN9__gnu_cxx13new_allocatorIPPcE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	68b8      	ldr	r0, [r7, #8]
 8003cb2:	f009 fe9b 	bl	800d9ec <_ZdlPvj>
      }
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <_ZNSt5dequeIPcSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8003cc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003cca:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f909 	bl	8003ee4 <_ZNSt16allocator_traitsISaIPcEE8max_sizeERKS1_>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003cd6:	f107 0208 	add.w	r2, r7, #8
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f90b 	bl	8003efc <_ZSt3minIjERKT_S2_S2_>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	681b      	ldr	r3, [r3, #0]
      }
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8003cf2:	b590      	push	{r4, r7, lr}
 8003cf4:	b08b      	sub	sp, #44	; 0x2c
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	109b      	asrs	r3, r3, #2
 8003d0c:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8003d0e:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	4413      	add	r3, r2
 8003d16:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d92d      	bls.n	8003d80 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	1acb      	subs	r3, r1, r3
 8003d30:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003d32:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	e000      	b.n	8003d42 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8003d40:	2300      	movs	r3, #0
 8003d42:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003d44:	4413      	add	r3, r2
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d209      	bcs.n	8003d66 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f000 f8e0 	bl	8003f24 <_ZSt4copyIPPPcS2_ET0_T_S4_S3_>
 8003d64:	e048      	b.n	8003df8 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003d6e:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d76:	4413      	add	r3, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f000 f8eb 	bl	8003f54 <_ZSt13copy_backwardIPPPcS2_ET0_T_S4_S3_>
 8003d7e:	e03b      	b.n	8003df8 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3304      	adds	r3, #4
 8003d88:	f107 0208 	add.w	r2, r7, #8
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fe0c 	bl	80039ac <_ZSt3maxIjERKT_S2_S2_>
 8003d94:	4603      	mov	r3, r0
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	69b9      	ldr	r1, [r7, #24]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fe16 	bl	80039d4 <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_allocate_mapEj>
 8003da8:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	e000      	b.n	8003dc2 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f000 f8a4 	bl	8003f24 <_ZSt4copyIPPPcS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f7ff fc67 	bl	80036ba <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fe20 	bl	8003a44 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f103 0018 	add.w	r0, r3, #24
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e10:	3b01      	subs	r3, #1
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	4413      	add	r3, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f7ff fe13 	bl	8003a44 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8003e1e:	bf00      	nop
 8003e20:	372c      	adds	r7, #44	; 0x2c
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd90      	pop	{r4, r7, pc}

08003e26 <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003e30:	2200      	movs	r2, #0
 8003e32:	6839      	ldr	r1, [r7, #0]
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8b1 	bl	8003f9c <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZNK9__gnu_cxx13new_allocatorIPPcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003e4c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_ZN9__gnu_cxx13new_allocatorIPPcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff ffeb 	bl	8003e44 <_ZNK9__gnu_cxx13new_allocatorIPPcE11_M_max_sizeEv>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4293      	cmp	r3, r2
 8003e74:	bf8c      	ite	hi
 8003e76:	2301      	movhi	r3, #1
 8003e78:	2300      	movls	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <_ZN9__gnu_cxx13new_allocatorIPPcE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e90:	d301      	bcc.n	8003e96 <_ZN9__gnu_cxx13new_allocatorIPPcE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003e92:	f009 fdc7 	bl	800da24 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003e96:	f009 fdc2 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f009 fda8 	bl	800d9f4 <_Znwj>
 8003ea4:	4603      	mov	r3, r0
      }
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68b8      	ldr	r0, [r7, #8]
 8003ec2:	f009 fd93 	bl	800d9ec <_ZdlPvj>
      }
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <_ZN9__gnu_cxx13new_allocatorIPPcEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_ZNSt16allocator_traitsISaIPcEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f87e 	bl	8003fee <_ZNK9__gnu_cxx13new_allocatorIPcE8max_sizeEv>
 8003ef2:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d201      	bcs.n	8003f16 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	e000      	b.n	8003f18 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003f16:	687b      	ldr	r3, [r7, #4]
    }
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <_ZSt4copyIPPPcS2_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f868 	bl	8004006 <_ZSt12__miter_baseIPPPcET_S3_>
 8003f36:	4604      	mov	r4, r0
 8003f38:	68b8      	ldr	r0, [r7, #8]
 8003f3a:	f000 f864 	bl	8004006 <_ZSt12__miter_baseIPPPcET_S3_>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4619      	mov	r1, r3
 8003f44:	4620      	mov	r0, r4
 8003f46:	f000 f869 	bl	800401c <_ZSt13__copy_move_aILb0EPPPcS2_ET1_T0_S4_S3_>
 8003f4a:	4603      	mov	r3, r0
    }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}

08003f54 <_ZSt13copy_backwardIPPPcS2_ET0_T_S4_S3_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f850 	bl	8004006 <_ZSt12__miter_baseIPPPcET_S3_>
 8003f66:	4604      	mov	r4, r0
 8003f68:	68b8      	ldr	r0, [r7, #8]
 8003f6a:	f000 f84c 	bl	8004006 <_ZSt12__miter_baseIPPPcET_S3_>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 f874 	bl	8004062 <_ZSt22__copy_move_backward_aILb0EPPPcS2_ET1_T0_S4_S3_>
 8003f7a:	4603      	mov	r3, r0
    }
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd90      	pop	{r4, r7, pc}

08003f84 <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003f8c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff ffeb 	bl	8003f84 <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	bf8c      	ite	hi
 8003fb6:	2301      	movhi	r3, #1
 8003fb8:	2300      	movls	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf14      	ite	ne
 8003fc0:	2301      	movne	r3, #1
 8003fc2:	2300      	moveq	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd0:	d301      	bcc.n	8003fd6 <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003fd2:	f009 fd27 	bl	800da24 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003fd6:	f009 fd22 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f009 fd08 	bl	800d9f4 <_Znwj>
 8003fe4:	4603      	mov	r3, r0
      }
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <_ZNK9__gnu_cxx13new_allocatorIPcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ffc4 	bl	8003f84 <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <_ZSt12__miter_baseIPPPcET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <_ZSt13__copy_move_aILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800401c:	b5b0      	push	{r4, r5, r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f83d 	bl	80040a8 <_ZSt12__niter_baseIPPPcET_S3_>
 800402e:	4604      	mov	r4, r0
 8004030:	68b8      	ldr	r0, [r7, #8]
 8004032:	f000 f839 	bl	80040a8 <_ZSt12__niter_baseIPPPcET_S3_>
 8004036:	4605      	mov	r5, r0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f834 	bl	80040a8 <_ZSt12__niter_baseIPPPcET_S3_>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	4629      	mov	r1, r5
 8004046:	4620      	mov	r0, r4
 8004048:	f000 f839 	bl	80040be <_ZSt14__copy_move_a1ILb0EPPPcS2_ET1_T0_S4_S3_>
 800404c:	4602      	mov	r2, r0
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f843 	bl	80040de <_ZSt12__niter_wrapIPPPcET_RKS3_S3_>
 8004058:	4603      	mov	r3, r0
    }
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bdb0      	pop	{r4, r5, r7, pc}

08004062 <_ZSt22__copy_move_backward_aILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8004062:	b5b0      	push	{r4, r5, r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f81a 	bl	80040a8 <_ZSt12__niter_baseIPPPcET_S3_>
 8004074:	4604      	mov	r4, r0
 8004076:	68b8      	ldr	r0, [r7, #8]
 8004078:	f000 f816 	bl	80040a8 <_ZSt12__niter_baseIPPPcET_S3_>
 800407c:	4605      	mov	r5, r0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 f811 	bl	80040a8 <_ZSt12__niter_baseIPPPcET_S3_>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	4629      	mov	r1, r5
 800408c:	4620      	mov	r0, r4
 800408e:	f000 f832 	bl	80040f6 <_ZSt23__copy_move_backward_a1ILb0EPPPcS2_ET1_T0_S4_S3_>
 8004092:	4602      	mov	r2, r0
 8004094:	1d3b      	adds	r3, r7, #4
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f820 	bl	80040de <_ZSt12__niter_wrapIPPPcET_RKS3_S3_>
 800409e:	4603      	mov	r3, r0
    }
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bdb0      	pop	{r4, r5, r7, pc}

080040a8 <_ZSt12__niter_baseIPPPcET_S3_>:
    __niter_base(_Iterator __it)
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
    { return __it; }
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <_ZSt14__copy_move_a1ILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f821 	bl	8004116 <_ZSt14__copy_move_a2ILb0EPPPcS2_ET1_T0_S4_S3_>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <_ZSt12__niter_wrapIPPPcET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
    { return __res; }
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <_ZSt23__copy_move_backward_a1ILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f815 	bl	8004136 <_ZSt23__copy_move_backward_a2ILb0EPPPcS2_ET1_T0_S4_S3_>
 800410c:	4603      	mov	r3, r0
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_ZSt14__copy_move_a2ILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f815 	bl	8004156 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPcEEPT_PKS5_S8_S6_>
 800412c:	4603      	mov	r3, r0
    }
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <_ZSt23__copy_move_backward_a2ILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f822 	bl	8004190 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPcEEPT_PKS5_S8_S6_>
 800414c:	4603      	mov	r3, r0
    }
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPcEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	109b      	asrs	r3, r3, #2
 800416a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPcEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	461a      	mov	r2, r3
 8004178:	68f9      	ldr	r1, [r7, #12]
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f00d f816 	bl	80111ac <memmove>
	  return __result + _Num;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
	}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPcEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	109b      	asrs	r3, r3, #2
 80041a4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPcEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	425b      	negs	r3, r3
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	18d0      	adds	r0, r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	461a      	mov	r2, r3
 80041bc:	68f9      	ldr	r1, [r7, #12]
 80041be:	f00c fff5 	bl	80111ac <memmove>
	  return __result - _Num;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	425b      	negs	r3, r3
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
	}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_Z41__static_initialization_and_destruction_0ii>:


	}


}
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d131      	bne.n	8004248 <_Z41__static_initialization_and_destruction_0ii+0x74>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d12c      	bne.n	8004248 <_Z41__static_initialization_and_destruction_0ii+0x74>
MFCC* mfcc = new MFCC(MFCC_OUT_SIZE, MFCC_IN_SIZE, 2);
 80041ee:	2034      	movs	r0, #52	; 0x34
 80041f0:	f009 fc00 	bl	800d9f4 <_Znwj>
 80041f4:	4603      	mov	r3, r0
 80041f6:	461c      	mov	r4, r3
 80041f8:	2302      	movs	r3, #2
 80041fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80041fe:	210a      	movs	r1, #10
 8004200:	4620      	mov	r0, r4
 8004202:	f7fd fdd1 	bl	8001da8 <_ZN4MFCCC1Eiii>
 8004206:	4b19      	ldr	r3, [pc, #100]	; (800426c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004208:	601c      	str	r4, [r3, #0]
KWS *kws=new KWS();
 800420a:	f645 70d8 	movw	r0, #24536	; 0x5fd8
 800420e:	f009 fbf1 	bl	800d9f4 <_Znwj>
 8004212:	4603      	mov	r3, r0
 8004214:	461c      	mov	r4, r3
 8004216:	4620      	mov	r0, r4
 8004218:	f7fc ff14 	bl	8001044 <_ZN3KWSC1Ev>
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800421e:	601c      	str	r4, [r3, #0]
std::string lastCommand = "";
 8004220:	f107 030c 	add.w	r3, r7, #12
 8004224:	4618      	mov	r0, r3
 8004226:	f009 fbf8 	bl	800da1a <_ZNSaIcEC1Ev>
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	461a      	mov	r2, r3
 8004230:	4910      	ldr	r1, [pc, #64]	; (8004274 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004232:	4811      	ldr	r0, [pc, #68]	; (8004278 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004234:	f009 fd76 	bl	800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004238:	f107 030c 	add.w	r3, r7, #12
 800423c:	4618      	mov	r0, r3
 800423e:	f009 fbed 	bl	800da1c <_ZNSaIcED1Ev>
std::deque<char*> commandHistory;
 8004242:	480e      	ldr	r0, [pc, #56]	; (800427c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004244:	f7fe faef 	bl	8002826 <_ZNSt5dequeIPcSaIS0_EEC1Ev>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <_Z41__static_initialization_and_destruction_0ii+0x90>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004254:	4293      	cmp	r3, r2
 8004256:	d105      	bne.n	8004264 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8004258:	4808      	ldr	r0, [pc, #32]	; (800427c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800425a:	f000 f811 	bl	8004280 <_ZNSt5dequeIPcSaIS0_EED1Ev>
std::string lastCommand = "";
 800425e:	4806      	ldr	r0, [pc, #24]	; (8004278 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004260:	f009 fc8d 	bl	800db7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bd90      	pop	{r4, r7, pc}
 800426c:	20016048 	.word	0x20016048
 8004270:	2001604c 	.word	0x2001604c
 8004274:	080132e8 	.word	0x080132e8
 8004278:	20016058 	.word	0x20016058
 800427c:	20016070 	.word	0x20016070

08004280 <_ZNSt5dequeIPcSaIS0_EED1Ev>:
      ~deque()
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8004288:	f107 0308 	add.w	r3, r7, #8
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f81b 	bl	80042ca <_ZNSt5dequeIPcSaIS0_EE5beginEv>
 8004294:	f107 0318 	add.w	r3, r7, #24
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fb00 	bl	80038a0 <_ZNSt5dequeIPcSaIS0_EE3endEv>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fa50 	bl	8003748 <_ZNSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f107 0218 	add.w	r2, r7, #24
 80042ae:	f107 0108 	add.w	r1, r7, #8
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f818 	bl	80042e8 <_ZNSt5dequeIPcSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff f8ad 	bl	800341a <_ZNSt11_Deque_baseIPcSaIS0_EED1Ev>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4618      	mov	r0, r3
 80042c4:	3728      	adds	r7, #40	; 0x28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_ZNSt5dequeIPcSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	3308      	adds	r3, #8
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff faef 	bl	80038be <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1ERKS3_>
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_ZNSt5dequeIPcSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 80042e8:	b480      	push	{r7}
 80042ea:	b08d      	sub	sp, #52	; 0x34
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
      }
 80042f6:	bf00      	nop
 80042f8:	3734      	adds	r7, #52	; 0x34
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <_GLOBAL__sub_I_OFFSET>:
 8004302:	b580      	push	{r7, lr}
 8004304:	af00      	add	r7, sp, #0
 8004306:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800430a:	2001      	movs	r0, #1
 800430c:	f7ff ff62 	bl	80041d4 <_Z41__static_initialization_and_destruction_0ii>
 8004310:	bd80      	pop	{r7, pc}

08004312 <_GLOBAL__sub_D_OFFSET>:
 8004312:	b580      	push	{r7, lr}
 8004314:	af00      	add	r7, sp, #0
 8004316:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800431a:	2000      	movs	r0, #0
 800431c:	f7ff ff5a 	bl	80041d4 <_Z41__static_initialization_and_destruction_0ii>
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_MspInit+0x4c>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <HAL_MspInit+0x4c>)
 8004334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004338:	6453      	str	r3, [r2, #68]	; 0x44
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_MspInit+0x4c>)
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_MspInit+0x4c>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_MspInit+0x4c>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_MspInit+0x4c>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800

08004374 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <HAL_CRC_MspInit+0x3c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10d      	bne.n	80043a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_CRC_MspInit+0x40>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <HAL_CRC_MspInit+0x40>)
 8004390:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004394:	6313      	str	r3, [r2, #48]	; 0x30
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_CRC_MspInit+0x40>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40023000 	.word	0x40023000
 80043b4:	40023800 	.word	0x40023800

080043b8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	; 0x38
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a55      	ldr	r2, [pc, #340]	; (800452c <HAL_ETH_MspInit+0x174>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	f040 80a4 	bne.w	8004524 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80043dc:	2300      	movs	r3, #0
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	4b53      	ldr	r3, [pc, #332]	; (8004530 <HAL_ETH_MspInit+0x178>)
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	4a52      	ldr	r2, [pc, #328]	; (8004530 <HAL_ETH_MspInit+0x178>)
 80043e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043ea:	6313      	str	r3, [r2, #48]	; 0x30
 80043ec:	4b50      	ldr	r3, [pc, #320]	; (8004530 <HAL_ETH_MspInit+0x178>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	4b4c      	ldr	r3, [pc, #304]	; (8004530 <HAL_ETH_MspInit+0x178>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	4a4b      	ldr	r2, [pc, #300]	; (8004530 <HAL_ETH_MspInit+0x178>)
 8004402:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004406:	6313      	str	r3, [r2, #48]	; 0x30
 8004408:	4b49      	ldr	r3, [pc, #292]	; (8004530 <HAL_ETH_MspInit+0x178>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	4b45      	ldr	r3, [pc, #276]	; (8004530 <HAL_ETH_MspInit+0x178>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4a44      	ldr	r2, [pc, #272]	; (8004530 <HAL_ETH_MspInit+0x178>)
 800441e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004422:	6313      	str	r3, [r2, #48]	; 0x30
 8004424:	4b42      	ldr	r3, [pc, #264]	; (8004530 <HAL_ETH_MspInit+0x178>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	4b3e      	ldr	r3, [pc, #248]	; (8004530 <HAL_ETH_MspInit+0x178>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	4a3d      	ldr	r2, [pc, #244]	; (8004530 <HAL_ETH_MspInit+0x178>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	6313      	str	r3, [r2, #48]	; 0x30
 8004440:	4b3b      	ldr	r3, [pc, #236]	; (8004530 <HAL_ETH_MspInit+0x178>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	4b37      	ldr	r3, [pc, #220]	; (8004530 <HAL_ETH_MspInit+0x178>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	4a36      	ldr	r2, [pc, #216]	; (8004530 <HAL_ETH_MspInit+0x178>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6313      	str	r3, [r2, #48]	; 0x30
 800445c:	4b34      	ldr	r3, [pc, #208]	; (8004530 <HAL_ETH_MspInit+0x178>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	4b30      	ldr	r3, [pc, #192]	; (8004530 <HAL_ETH_MspInit+0x178>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	4a2f      	ldr	r2, [pc, #188]	; (8004530 <HAL_ETH_MspInit+0x178>)
 8004472:	f043 0302 	orr.w	r3, r3, #2
 8004476:	6313      	str	r3, [r2, #48]	; 0x30
 8004478:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <HAL_ETH_MspInit+0x178>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	4b29      	ldr	r3, [pc, #164]	; (8004530 <HAL_ETH_MspInit+0x178>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	4a28      	ldr	r2, [pc, #160]	; (8004530 <HAL_ETH_MspInit+0x178>)
 800448e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004492:	6313      	str	r3, [r2, #48]	; 0x30
 8004494:	4b26      	ldr	r3, [pc, #152]	; (8004530 <HAL_ETH_MspInit+0x178>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80044a0:	2332      	movs	r3, #50	; 0x32
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a4:	2302      	movs	r3, #2
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ac:	2303      	movs	r3, #3
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044b0:	230b      	movs	r3, #11
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b8:	4619      	mov	r1, r3
 80044ba:	481e      	ldr	r0, [pc, #120]	; (8004534 <HAL_ETH_MspInit+0x17c>)
 80044bc:	f001 fb06 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80044c0:	2386      	movs	r3, #134	; 0x86
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c4:	2302      	movs	r3, #2
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044cc:	2303      	movs	r3, #3
 80044ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044d0:	230b      	movs	r3, #11
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d8:	4619      	mov	r1, r3
 80044da:	4817      	ldr	r0, [pc, #92]	; (8004538 <HAL_ETH_MspInit+0x180>)
 80044dc:	f001 faf6 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80044e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e6:	2302      	movs	r3, #2
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ee:	2303      	movs	r3, #3
 80044f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044f2:	230b      	movs	r3, #11
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80044f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044fa:	4619      	mov	r1, r3
 80044fc:	480f      	ldr	r0, [pc, #60]	; (800453c <HAL_ETH_MspInit+0x184>)
 80044fe:	f001 fae5 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004502:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004508:	2302      	movs	r3, #2
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004510:	2303      	movs	r3, #3
 8004512:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004514:	230b      	movs	r3, #11
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800451c:	4619      	mov	r1, r3
 800451e:	4808      	ldr	r0, [pc, #32]	; (8004540 <HAL_ETH_MspInit+0x188>)
 8004520:	f001 fad4 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8004524:	bf00      	nop
 8004526:	3738      	adds	r7, #56	; 0x38
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40028000 	.word	0x40028000
 8004530:	40023800 	.word	0x40023800
 8004534:	40020800 	.word	0x40020800
 8004538:	40020000 	.word	0x40020000
 800453c:	40020400 	.word	0x40020400
 8004540:	40021800 	.word	0x40021800

08004544 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800454c:	f107 0314 	add.w	r3, r7, #20
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	60da      	str	r2, [r3, #12]
 800455a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <HAL_I2C_MspInit+0x84>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d12b      	bne.n	80045be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <HAL_I2C_MspInit+0x88>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <HAL_I2C_MspInit+0x88>)
 8004570:	f043 0320 	orr.w	r3, r3, #32
 8004574:	6313      	str	r3, [r2, #48]	; 0x30
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <HAL_I2C_MspInit+0x88>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004582:	2303      	movs	r3, #3
 8004584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004586:	2312      	movs	r3, #18
 8004588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458e:	2303      	movs	r3, #3
 8004590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004592:	2304      	movs	r3, #4
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004596:	f107 0314 	add.w	r3, r7, #20
 800459a:	4619      	mov	r1, r3
 800459c:	480c      	ldr	r0, [pc, #48]	; (80045d0 <HAL_I2C_MspInit+0x8c>)
 800459e:	f001 fa95 	bl	8005acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_I2C_MspInit+0x88>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	4a08      	ldr	r2, [pc, #32]	; (80045cc <HAL_I2C_MspInit+0x88>)
 80045ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045b0:	6413      	str	r3, [r2, #64]	; 0x40
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_I2C_MspInit+0x88>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80045be:	bf00      	nop
 80045c0:	3728      	adds	r7, #40	; 0x28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40005800 	.word	0x40005800
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40021400 	.word	0x40021400

080045d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b096      	sub	sp, #88	; 0x58
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045ec:	f107 0314 	add.w	r3, r7, #20
 80045f0:	2230      	movs	r2, #48	; 0x30
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f00c fdf3 	bl	80111e0 <memset>
  if(hi2s->Instance==SPI2)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a4a      	ldr	r2, [pc, #296]	; (8004728 <HAL_I2S_MspInit+0x154>)
 8004600:	4293      	cmp	r3, r2
 8004602:	f040 808c 	bne.w	800471e <HAL_I2S_MspInit+0x14a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004606:	2301      	movs	r3, #1
 8004608:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800460a:	2332      	movs	r3, #50	; 0x32
 800460c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800460e:	2302      	movs	r3, #2
 8004610:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	4618      	mov	r0, r3
 8004618:	f003 fd86 	bl	8008128 <HAL_RCCEx_PeriphCLKConfig>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004622:	f7fd fb55 	bl	8001cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	4b40      	ldr	r3, [pc, #256]	; (800472c <HAL_I2S_MspInit+0x158>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	4a3f      	ldr	r2, [pc, #252]	; (800472c <HAL_I2S_MspInit+0x158>)
 8004630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004634:	6413      	str	r3, [r2, #64]	; 0x40
 8004636:	4b3d      	ldr	r3, [pc, #244]	; (800472c <HAL_I2S_MspInit+0x158>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_I2S_MspInit+0x158>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_I2S_MspInit+0x158>)
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <HAL_I2S_MspInit+0x158>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	4b32      	ldr	r3, [pc, #200]	; (800472c <HAL_I2S_MspInit+0x158>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	4a31      	ldr	r2, [pc, #196]	; (800472c <HAL_I2S_MspInit+0x158>)
 8004668:	f043 0302 	orr.w	r3, r3, #2
 800466c:	6313      	str	r3, [r2, #48]	; 0x30
 800466e:	4b2f      	ldr	r3, [pc, #188]	; (800472c <HAL_I2S_MspInit+0x158>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800467a:	2308      	movs	r3, #8
 800467c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467e:	2302      	movs	r3, #2
 8004680:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004682:	2300      	movs	r3, #0
 8004684:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004686:	2300      	movs	r3, #0
 8004688:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800468a:	2305      	movs	r3, #5
 800468c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004692:	4619      	mov	r1, r3
 8004694:	4826      	ldr	r0, [pc, #152]	; (8004730 <HAL_I2S_MspInit+0x15c>)
 8004696:	f001 fa19 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800469a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800469e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a8:	2300      	movs	r3, #0
 80046aa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046ac:	2305      	movs	r3, #5
 80046ae:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046b4:	4619      	mov	r1, r3
 80046b6:	481f      	ldr	r0, [pc, #124]	; (8004734 <HAL_I2S_MspInit+0x160>)
 80046b8:	f001 fa08 	bl	8005acc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046be:	4a1f      	ldr	r2, [pc, #124]	; (800473c <HAL_I2S_MspInit+0x168>)
 80046c0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046ce:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046da:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80046dc:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046ea:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046f2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046f4:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046fa:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <HAL_I2S_MspInit+0x164>)
 80046fe:	2200      	movs	r2, #0
 8004700:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004702:	480d      	ldr	r0, [pc, #52]	; (8004738 <HAL_I2S_MspInit+0x164>)
 8004704:	f000 fb4a 	bl	8004d9c <HAL_DMA_Init>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 800470e:	f7fd fadf 	bl	8001cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a08      	ldr	r2, [pc, #32]	; (8004738 <HAL_I2S_MspInit+0x164>)
 8004716:	63da      	str	r2, [r3, #60]	; 0x3c
 8004718:	4a07      	ldr	r2, [pc, #28]	; (8004738 <HAL_I2S_MspInit+0x164>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800471e:	bf00      	nop
 8004720:	3758      	adds	r7, #88	; 0x58
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40003800 	.word	0x40003800
 800472c:	40023800 	.word	0x40023800
 8004730:	40020800 	.word	0x40020800
 8004734:	40020400 	.word	0x40020400
 8004738:	20000e28 	.word	0x20000e28
 800473c:	40026058 	.word	0x40026058

08004740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a0b      	ldr	r2, [pc, #44]	; (800477c <HAL_TIM_Base_MspInit+0x3c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10d      	bne.n	800476e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_TIM_Base_MspInit+0x40>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	4a09      	ldr	r2, [pc, #36]	; (8004780 <HAL_TIM_Base_MspInit+0x40>)
 800475c:	f043 0304 	orr.w	r3, r3, #4
 8004760:	6413      	str	r3, [r2, #64]	; 0x40
 8004762:	4b07      	ldr	r3, [pc, #28]	; (8004780 <HAL_TIM_Base_MspInit+0x40>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40000800 	.word	0x40000800
 8004780:	40023800 	.word	0x40023800

08004784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478c:	f107 0314 	add.w	r3, r7, #20
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a19      	ldr	r2, [pc, #100]	; (8004808 <HAL_UART_MspInit+0x84>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d12c      	bne.n	8004800 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	4b18      	ldr	r3, [pc, #96]	; (800480c <HAL_UART_MspInit+0x88>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_UART_MspInit+0x88>)
 80047b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b15      	ldr	r3, [pc, #84]	; (800480c <HAL_UART_MspInit+0x88>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	4b11      	ldr	r3, [pc, #68]	; (800480c <HAL_UART_MspInit+0x88>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	4a10      	ldr	r2, [pc, #64]	; (800480c <HAL_UART_MspInit+0x88>)
 80047cc:	f043 0308 	orr.w	r3, r3, #8
 80047d0:	6313      	str	r3, [r2, #48]	; 0x30
 80047d2:	4b0e      	ldr	r3, [pc, #56]	; (800480c <HAL_UART_MspInit+0x88>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80047de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e4:	2302      	movs	r3, #2
 80047e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ec:	2303      	movs	r3, #3
 80047ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80047f0:	2307      	movs	r3, #7
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	4619      	mov	r1, r3
 80047fa:	4805      	ldr	r0, [pc, #20]	; (8004810 <HAL_UART_MspInit+0x8c>)
 80047fc:	f001 f966 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004800:	bf00      	nop
 8004802:	3728      	adds	r7, #40	; 0x28
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40004800 	.word	0x40004800
 800480c:	40023800 	.word	0x40023800
 8004810:	40020c00 	.word	0x40020c00

08004814 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481c:	f107 0314 	add.w	r3, r7, #20
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004834:	d13f      	bne.n	80048b6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <HAL_PCD_MspInit+0xac>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <HAL_PCD_MspInit+0xac>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	6313      	str	r3, [r2, #48]	; 0x30
 8004846:	4b1e      	ldr	r3, [pc, #120]	; (80048c0 <HAL_PCD_MspInit+0xac>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004852:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004858:	2302      	movs	r3, #2
 800485a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004860:	2303      	movs	r3, #3
 8004862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004864:	230a      	movs	r3, #10
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004868:	f107 0314 	add.w	r3, r7, #20
 800486c:	4619      	mov	r1, r3
 800486e:	4815      	ldr	r0, [pc, #84]	; (80048c4 <HAL_PCD_MspInit+0xb0>)
 8004870:	f001 f92c 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004882:	f107 0314 	add.w	r3, r7, #20
 8004886:	4619      	mov	r1, r3
 8004888:	480e      	ldr	r0, [pc, #56]	; (80048c4 <HAL_PCD_MspInit+0xb0>)
 800488a:	f001 f91f 	bl	8005acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <HAL_PCD_MspInit+0xac>)
 8004890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004892:	4a0b      	ldr	r2, [pc, #44]	; (80048c0 <HAL_PCD_MspInit+0xac>)
 8004894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004898:	6353      	str	r3, [r2, #52]	; 0x34
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <HAL_PCD_MspInit+0xac>)
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <HAL_PCD_MspInit+0xac>)
 80048a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a8:	6453      	str	r3, [r2, #68]	; 0x44
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_PCD_MspInit+0xac>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80048b6:	bf00      	nop
 80048b8:	3728      	adds	r7, #40	; 0x28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40020000 	.word	0x40020000

080048c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048cc:	e7fe      	b.n	80048cc <NMI_Handler+0x4>

080048ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ce:	b480      	push	{r7}
 80048d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048d2:	e7fe      	b.n	80048d2 <HardFault_Handler+0x4>

080048d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048d8:	e7fe      	b.n	80048d8 <MemManage_Handler+0x4>

080048da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048da:	b480      	push	{r7}
 80048dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048de:	e7fe      	b.n	80048de <BusFault_Handler+0x4>

080048e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048e4:	e7fe      	b.n	80048e4 <UsageFault_Handler+0x4>

080048e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048e6:	b480      	push	{r7}
 80048e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004902:	b480      	push	{r7}
 8004904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004914:	f000 f8d0 	bl	8004ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004918:	bf00      	nop
 800491a:	bd80      	pop	{r7, pc}

0800491c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004920:	4802      	ldr	r0, [pc, #8]	; (800492c <DMA1_Stream3_IRQHandler+0x10>)
 8004922:	f000 fb41 	bl	8004fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000e28 	.word	0x20000e28

08004930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004938:	4a14      	ldr	r2, [pc, #80]	; (800498c <_sbrk+0x5c>)
 800493a:	4b15      	ldr	r3, [pc, #84]	; (8004990 <_sbrk+0x60>)
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004944:	4b13      	ldr	r3, [pc, #76]	; (8004994 <_sbrk+0x64>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800494c:	4b11      	ldr	r3, [pc, #68]	; (8004994 <_sbrk+0x64>)
 800494e:	4a12      	ldr	r2, [pc, #72]	; (8004998 <_sbrk+0x68>)
 8004950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <_sbrk+0x64>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	429a      	cmp	r2, r3
 800495e:	d207      	bcs.n	8004970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004960:	f00c fce4 	bl	801132c <__errno>
 8004964:	4603      	mov	r3, r0
 8004966:	220c      	movs	r2, #12
 8004968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800496a:	f04f 33ff 	mov.w	r3, #4294967295
 800496e:	e009      	b.n	8004984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <_sbrk+0x64>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <_sbrk+0x64>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	4a05      	ldr	r2, [pc, #20]	; (8004994 <_sbrk+0x64>)
 8004980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20030000 	.word	0x20030000
 8004990:	00000800 	.word	0x00000800
 8004994:	20016098 	.word	0x20016098
 8004998:	200162c8 	.word	0x200162c8

0800499c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <SystemInit+0x20>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	4a05      	ldr	r2, [pc, #20]	; (80049bc <SystemInit+0x20>)
 80049a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80049c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049f8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049c4:	480d      	ldr	r0, [pc, #52]	; (80049fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049c6:	490e      	ldr	r1, [pc, #56]	; (8004a00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049c8:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049cc:	e002      	b.n	80049d4 <LoopCopyDataInit>

080049ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049d2:	3304      	adds	r3, #4

080049d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049d8:	d3f9      	bcc.n	80049ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049da:	4a0b      	ldr	r2, [pc, #44]	; (8004a08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049dc:	4c0b      	ldr	r4, [pc, #44]	; (8004a0c <LoopFillZerobss+0x26>)
  movs r3, #0
 80049de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049e0:	e001      	b.n	80049e6 <LoopFillZerobss>

080049e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049e4:	3204      	adds	r2, #4

080049e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049e8:	d3fb      	bcc.n	80049e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049ea:	f7ff ffd7 	bl	800499c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049ee:	f00c fca3 	bl	8011338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049f2:	f7fc fe0d 	bl	8001610 <main>
  bx  lr    
 80049f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80049f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80049fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a00:	20000b40 	.word	0x20000b40
  ldr r2, =_sidata
 8004a04:	0802cb24 	.word	0x0802cb24
  ldr r2, =_sbss
 8004a08:	20000b40 	.word	0x20000b40
  ldr r4, =_ebss
 8004a0c:	200162c8 	.word	0x200162c8

08004a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a10:	e7fe      	b.n	8004a10 <ADC_IRQHandler>
	...

08004a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <HAL_Init+0x40>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <HAL_Init+0x40>)
 8004a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_Init+0x40>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_Init+0x40>)
 8004a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <HAL_Init+0x40>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <HAL_Init+0x40>)
 8004a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a3c:	2003      	movs	r0, #3
 8004a3e:	f000 f94f 	bl	8004ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a42:	2000      	movs	r0, #0
 8004a44:	f000 f808 	bl	8004a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a48:	f7ff fc6c 	bl	8004324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40023c00 	.word	0x40023c00

08004a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a60:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_InitTick+0x54>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <HAL_InitTick+0x58>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f967 	bl	8004d4a <HAL_SYSTICK_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e00e      	b.n	8004aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b0f      	cmp	r3, #15
 8004a8a:	d80a      	bhi.n	8004aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	f000 f92f 	bl	8004cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a98:	4a06      	ldr	r2, [pc, #24]	; (8004ab4 <HAL_InitTick+0x5c>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e000      	b.n	8004aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	2000000c 	.word	0x2000000c
 8004ab0:	20000014 	.word	0x20000014
 8004ab4:	20000010 	.word	0x20000010

08004ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <HAL_IncTick+0x20>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_IncTick+0x24>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4a04      	ldr	r2, [pc, #16]	; (8004adc <HAL_IncTick+0x24>)
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000014 	.word	0x20000014
 8004adc:	2001609c 	.word	0x2001609c

08004ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_GetTick+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	2001609c 	.word	0x2001609c

08004af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b00:	f7ff ffee 	bl	8004ae0 <HAL_GetTick>
 8004b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d005      	beq.n	8004b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_Delay+0x44>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b1e:	bf00      	nop
 8004b20:	f7ff ffde 	bl	8004ae0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d8f7      	bhi.n	8004b20 <HAL_Delay+0x28>
  {
  }
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000014 	.word	0x20000014

08004b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <__NVIC_SetPriorityGrouping+0x44>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b72:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <__NVIC_SetPriorityGrouping+0x44>)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	60d3      	str	r3, [r2, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b8c:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	0a1b      	lsrs	r3, r3, #8
 8004b92:	f003 0307 	and.w	r3, r3, #7
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	db0b      	blt.n	8004bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	f003 021f 	and.w	r2, r3, #31
 8004bbc:	4907      	ldr	r1, [pc, #28]	; (8004bdc <__NVIC_EnableIRQ+0x38>)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	e000e100 	.word	0xe000e100

08004be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	6039      	str	r1, [r7, #0]
 8004bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	db0a      	blt.n	8004c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	490c      	ldr	r1, [pc, #48]	; (8004c2c <__NVIC_SetPriority+0x4c>)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	0112      	lsls	r2, r2, #4
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	440b      	add	r3, r1
 8004c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c08:	e00a      	b.n	8004c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	4908      	ldr	r1, [pc, #32]	; (8004c30 <__NVIC_SetPriority+0x50>)
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	3b04      	subs	r3, #4
 8004c18:	0112      	lsls	r2, r2, #4
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	761a      	strb	r2, [r3, #24]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	e000e100 	.word	0xe000e100
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b089      	sub	sp, #36	; 0x24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f1c3 0307 	rsb	r3, r3, #7
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	bf28      	it	cs
 8004c52:	2304      	movcs	r3, #4
 8004c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d902      	bls.n	8004c64 <NVIC_EncodePriority+0x30>
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3b03      	subs	r3, #3
 8004c62:	e000      	b.n	8004c66 <NVIC_EncodePriority+0x32>
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c68:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43da      	mvns	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	401a      	ands	r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	43d9      	mvns	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c8c:	4313      	orrs	r3, r2
         );
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3724      	adds	r7, #36	; 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cac:	d301      	bcc.n	8004cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e00f      	b.n	8004cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <SysTick_Config+0x40>)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cba:	210f      	movs	r1, #15
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc0:	f7ff ff8e 	bl	8004be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <SysTick_Config+0x40>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cca:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <SysTick_Config+0x40>)
 8004ccc:	2207      	movs	r2, #7
 8004cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	e000e010 	.word	0xe000e010

08004ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ff29 	bl	8004b40 <__NVIC_SetPriorityGrouping>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b086      	sub	sp, #24
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d08:	f7ff ff3e 	bl	8004b88 <__NVIC_GetPriorityGrouping>
 8004d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	6978      	ldr	r0, [r7, #20]
 8004d14:	f7ff ff8e 	bl	8004c34 <NVIC_EncodePriority>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff5d 	bl	8004be0 <__NVIC_SetPriority>
}
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	4603      	mov	r3, r0
 8004d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ff31 	bl	8004ba4 <__NVIC_EnableIRQ>
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff ffa2 	bl	8004c9c <SysTick_Config>
 8004d58:	4603      	mov	r3, r0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e00e      	b.n	8004d92 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	795b      	ldrb	r3, [r3, #5]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d105      	bne.n	8004d8a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff faf5 	bl	8004374 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004da8:	f7ff fe9a 	bl	8004ae0 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e099      	b.n	8004eec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dd8:	e00f      	b.n	8004dfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dda:	f7ff fe81 	bl	8004ae0 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d908      	bls.n	8004dfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2203      	movs	r2, #3
 8004df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e078      	b.n	8004eec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e8      	bne.n	8004dda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4b38      	ldr	r3, [pc, #224]	; (8004ef4 <HAL_DMA_Init+0x158>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d107      	bne.n	8004e64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0307 	bic.w	r3, r3, #7
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d117      	bne.n	8004ebe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa6f 	bl	8005384 <DMA_CheckFifoParam>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2240      	movs	r2, #64	; 0x40
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e016      	b.n	8004eec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa26 	bl	8005318 <DMA_CalcBaseAndBitshift>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	223f      	movs	r2, #63	; 0x3f
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	f010803f 	.word	0xf010803f

08004ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_DMA_Start_IT+0x26>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e040      	b.n	8004fa0 <HAL_DMA_Start_IT+0xa8>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d12f      	bne.n	8004f92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2202      	movs	r2, #2
 8004f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f9b8 	bl	80052bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f50:	223f      	movs	r2, #63	; 0x3f
 8004f52:	409a      	lsls	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0216 	orr.w	r2, r2, #22
 8004f66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0208 	orr.w	r2, r2, #8
 8004f7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e005      	b.n	8004f9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fb4:	4b8e      	ldr	r3, [pc, #568]	; (80051f0 <HAL_DMA_IRQHandler+0x248>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a8e      	ldr	r2, [pc, #568]	; (80051f4 <HAL_DMA_IRQHandler+0x24c>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0a9b      	lsrs	r3, r3, #10
 8004fc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01a      	beq.n	8005014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0204 	bic.w	r2, r2, #4
 8004ffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005000:	2208      	movs	r2, #8
 8005002:	409a      	lsls	r2, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	f043 0201 	orr.w	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	2201      	movs	r2, #1
 800501a:	409a      	lsls	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005036:	2201      	movs	r2, #1
 8005038:	409a      	lsls	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f043 0202 	orr.w	r2, r3, #2
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	2204      	movs	r2, #4
 8005050:	409a      	lsls	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d012      	beq.n	8005080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506c:	2204      	movs	r2, #4
 800506e:	409a      	lsls	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	f043 0204 	orr.w	r2, r3, #4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	2210      	movs	r2, #16
 8005086:	409a      	lsls	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d043      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d03c      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	2210      	movs	r2, #16
 80050a4:	409a      	lsls	r2, r3
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d018      	beq.n	80050ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d024      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
 80050d6:	e01f      	b.n	8005118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
 80050e8:	e016      	b.n	8005118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0208 	bic.w	r2, r2, #8
 8005106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	2220      	movs	r2, #32
 800511e:	409a      	lsls	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 808f 	beq.w	8005248 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8087 	beq.w	8005248 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513e:	2220      	movs	r2, #32
 8005140:	409a      	lsls	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b05      	cmp	r3, #5
 8005150:	d136      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0216 	bic.w	r2, r2, #22
 8005160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <HAL_DMA_IRQHandler+0x1da>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0208 	bic.w	r2, r2, #8
 8005190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005196:	223f      	movs	r2, #63	; 0x3f
 8005198:	409a      	lsls	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d07e      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
        }
        return;
 80051be:	e079      	b.n	80052b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01d      	beq.n	800520a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10d      	bne.n	80051f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d031      	beq.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
 80051ec:	e02c      	b.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
 80051ee:	bf00      	nop
 80051f0:	2000000c 	.word	0x2000000c
 80051f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d023      	beq.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
 8005208:	e01e      	b.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10f      	bne.n	8005238 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0210 	bic.w	r2, r2, #16
 8005226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524c:	2b00      	cmp	r3, #0
 800524e:	d032      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d022      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2205      	movs	r2, #5
 8005260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	3301      	adds	r3, #1
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	429a      	cmp	r2, r3
 800527e:	d307      	bcc.n	8005290 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f2      	bne.n	8005274 <HAL_DMA_IRQHandler+0x2cc>
 800528e:	e000      	b.n	8005292 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005290:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
 80052b2:	e000      	b.n	80052b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80052b4:	bf00      	nop
    }
  }
}
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d108      	bne.n	80052fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052fa:	e007      	b.n	800530c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	60da      	str	r2, [r3, #12]
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	3b10      	subs	r3, #16
 8005328:	4a14      	ldr	r2, [pc, #80]	; (800537c <DMA_CalcBaseAndBitshift+0x64>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <DMA_CalcBaseAndBitshift+0x68>)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d909      	bls.n	800535a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	1d1a      	adds	r2, r3, #4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	659a      	str	r2, [r3, #88]	; 0x58
 8005358:	e007      	b.n	800536a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	aaaaaaab 	.word	0xaaaaaaab
 8005380:	08013334 	.word	0x08013334

08005384 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d11f      	bne.n	80053de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d856      	bhi.n	8005452 <DMA_CheckFifoParam+0xce>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <DMA_CheckFifoParam+0x28>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	080053cf 	.word	0x080053cf
 80053b4:	080053bd 	.word	0x080053bd
 80053b8:	08005453 	.word	0x08005453
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d046      	beq.n	8005456 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053cc:	e043      	b.n	8005456 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053d6:	d140      	bne.n	800545a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053dc:	e03d      	b.n	800545a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e6:	d121      	bne.n	800542c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d837      	bhi.n	800545e <DMA_CheckFifoParam+0xda>
 80053ee:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <DMA_CheckFifoParam+0x70>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005405 	.word	0x08005405
 80053f8:	0800540b 	.word	0x0800540b
 80053fc:	08005405 	.word	0x08005405
 8005400:	0800541d 	.word	0x0800541d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e030      	b.n	800546c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d025      	beq.n	8005462 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800541a:	e022      	b.n	8005462 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005424:	d11f      	bne.n	8005466 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800542a:	e01c      	b.n	8005466 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d903      	bls.n	800543a <DMA_CheckFifoParam+0xb6>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d003      	beq.n	8005440 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005438:	e018      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
      break;
 800543e:	e015      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00e      	beq.n	800546a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      break;
 8005450:	e00b      	b.n	800546a <DMA_CheckFifoParam+0xe6>
      break;
 8005452:	bf00      	nop
 8005454:	e00a      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 8005456:	bf00      	nop
 8005458:	e008      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 800545a:	bf00      	nop
 800545c:	e006      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 800545e:	bf00      	nop
 8005460:	e004      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;   
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 800546a:	bf00      	nop
    }
  } 
  
  return status; 
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop

0800547c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e06c      	b.n	8005568 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2223      	movs	r2, #35	; 0x23
 800549c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fe ff89 	bl	80043b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	4b31      	ldr	r3, [pc, #196]	; (8005570 <HAL_ETH_Init+0xf4>)
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	4a30      	ldr	r2, [pc, #192]	; (8005570 <HAL_ETH_Init+0xf4>)
 80054b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b4:	6453      	str	r3, [r2, #68]	; 0x44
 80054b6:	4b2e      	ldr	r3, [pc, #184]	; (8005570 <HAL_ETH_Init+0xf4>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80054c2:	4b2c      	ldr	r3, [pc, #176]	; (8005574 <HAL_ETH_Init+0xf8>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	4a2b      	ldr	r2, [pc, #172]	; (8005574 <HAL_ETH_Init+0xf8>)
 80054c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80054cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80054ce:	4b29      	ldr	r3, [pc, #164]	; (8005574 <HAL_ETH_Init+0xf8>)
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	4927      	ldr	r1, [pc, #156]	; (8005574 <HAL_ETH_Init+0xf8>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80054dc:	4b25      	ldr	r3, [pc, #148]	; (8005574 <HAL_ETH_Init+0xf8>)
 80054de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6812      	ldr	r2, [r2, #0]
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054f8:	f7ff faf2 	bl	8004ae0 <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80054fe:	e011      	b.n	8005524 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005500:	f7ff faee 	bl	8004ae0 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800550e:	d909      	bls.n	8005524 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2204      	movs	r2, #4
 8005514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	22e0      	movs	r2, #224	; 0xe0
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e021      	b.n	8005568 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e4      	bne.n	8005500 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f958 	bl	80057ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f9ff 	bl	8005940 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa55 	bl	80059f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	461a      	mov	r2, r3
 800554e:	2100      	movs	r1, #0
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f9bd 	bl	80058d0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2210      	movs	r2, #16
 8005562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40023800 	.word	0x40023800
 8005574:	40013800 	.word	0x40013800

08005578 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4b51      	ldr	r3, [pc, #324]	; (80056d4 <ETH_SetMACConfig+0x15c>)
 800558e:	4013      	ands	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	7c1b      	ldrb	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <ETH_SetMACConfig+0x28>
 800559a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800559e:	e000      	b.n	80055a2 <ETH_SetMACConfig+0x2a>
 80055a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	7c5b      	ldrb	r3, [r3, #17]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <ETH_SetMACConfig+0x38>
 80055aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80055ae:	e000      	b.n	80055b2 <ETH_SetMACConfig+0x3a>
 80055b0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80055b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80055b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	7fdb      	ldrb	r3, [r3, #31]
 80055be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80055c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80055c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	7f92      	ldrb	r2, [r2, #30]
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	d102      	bne.n	80055d6 <ETH_SetMACConfig+0x5e>
 80055d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055d4:	e000      	b.n	80055d8 <ETH_SetMACConfig+0x60>
 80055d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80055d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	7f1b      	ldrb	r3, [r3, #28]
 80055de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80055e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80055e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	791b      	ldrb	r3, [r3, #4]
 80055ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80055ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80055f6:	2a00      	cmp	r2, #0
 80055f8:	d102      	bne.n	8005600 <ETH_SetMACConfig+0x88>
 80055fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055fe:	e000      	b.n	8005602 <ETH_SetMACConfig+0x8a>
 8005600:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005602:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	7bdb      	ldrb	r3, [r3, #15]
 8005608:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800560a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005610:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005618:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800561a:	4313      	orrs	r3, r2
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005632:	2001      	movs	r0, #1
 8005634:	f7ff fa60 	bl	8004af8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800564e:	4013      	ands	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005656:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800565e:	2a00      	cmp	r2, #0
 8005660:	d101      	bne.n	8005666 <ETH_SetMACConfig+0xee>
 8005662:	2280      	movs	r2, #128	; 0x80
 8005664:	e000      	b.n	8005668 <ETH_SetMACConfig+0xf0>
 8005666:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005668:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800566e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005676:	2a01      	cmp	r2, #1
 8005678:	d101      	bne.n	800567e <ETH_SetMACConfig+0x106>
 800567a:	2208      	movs	r2, #8
 800567c:	e000      	b.n	8005680 <ETH_SetMACConfig+0x108>
 800567e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005680:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005688:	2a01      	cmp	r2, #1
 800568a:	d101      	bne.n	8005690 <ETH_SetMACConfig+0x118>
 800568c:	2204      	movs	r2, #4
 800568e:	e000      	b.n	8005692 <ETH_SetMACConfig+0x11a>
 8005690:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005692:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800569a:	2a01      	cmp	r2, #1
 800569c:	d101      	bne.n	80056a2 <ETH_SetMACConfig+0x12a>
 800569e:	2202      	movs	r2, #2
 80056a0:	e000      	b.n	80056a4 <ETH_SetMACConfig+0x12c>
 80056a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80056a4:	4313      	orrs	r3, r2
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80056bc:	2001      	movs	r0, #1
 80056be:	f7ff fa1b 	bl	8004af8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	619a      	str	r2, [r3, #24]
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	ff20810f 	.word	0xff20810f

080056d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4b3d      	ldr	r3, [pc, #244]	; (80057e8 <ETH_SetDMAConfig+0x110>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	7b1b      	ldrb	r3, [r3, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <ETH_SetDMAConfig+0x2c>
 80056fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005702:	e000      	b.n	8005706 <ETH_SetDMAConfig+0x2e>
 8005704:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	7b5b      	ldrb	r3, [r3, #13]
 800570a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800570c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	7f52      	ldrb	r2, [r2, #29]
 8005712:	2a00      	cmp	r2, #0
 8005714:	d102      	bne.n	800571c <ETH_SetDMAConfig+0x44>
 8005716:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800571a:	e000      	b.n	800571e <ETH_SetDMAConfig+0x46>
 800571c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800571e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	7b9b      	ldrb	r3, [r3, #14]
 8005724:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005726:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800572c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	7f1b      	ldrb	r3, [r3, #28]
 8005732:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005734:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	7f9b      	ldrb	r3, [r3, #30]
 800573a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800573c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005742:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800574a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800574c:	4313      	orrs	r3, r2
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575c:	461a      	mov	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800576e:	2001      	movs	r0, #1
 8005770:	f7ff f9c2 	bl	8004af8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800577c:	461a      	mov	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	791b      	ldrb	r3, [r3, #4]
 8005786:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800578c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005792:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005798:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80057a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80057aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80057b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80057cc:	2001      	movs	r0, #1
 80057ce:	f7ff f993 	bl	8004af8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057da:	461a      	mov	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6013      	str	r3, [r2, #0]
}
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	f8de3f23 	.word	0xf8de3f23

080057ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b0a6      	sub	sp, #152	; 0x98
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005800:	2300      	movs	r3, #0
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005804:	2300      	movs	r3, #0
 8005806:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005810:	2300      	movs	r3, #0
 8005812:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800581c:	2300      	movs	r3, #0
 800581e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005822:	2300      	movs	r3, #0
 8005824:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005828:	2300      	movs	r3, #0
 800582a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800582c:	2300      	movs	r3, #0
 800582e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005832:	2300      	movs	r3, #0
 8005834:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005836:	2300      	movs	r3, #0
 8005838:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800583c:	2300      	movs	r3, #0
 800583e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005848:	2300      	movs	r3, #0
 800584a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800584e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005858:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800585a:	2300      	movs	r3, #0
 800585c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005860:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fe86 	bl	8005578 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800586c:	2301      	movs	r3, #1
 800586e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005870:	2301      	movs	r3, #1
 8005872:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800587a:	2301      	movs	r3, #1
 800587c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005882:	2300      	movs	r3, #0
 8005884:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005888:	2300      	movs	r3, #0
 800588a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800588e:	2300      	movs	r3, #0
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005898:	2301      	movs	r3, #1
 800589a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800589c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058a0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80058a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80058a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80058bc:	f107 0308 	add.w	r3, r7, #8
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ff08 	bl	80056d8 <ETH_SetDMAConfig>
}
 80058c8:	bf00      	nop
 80058ca:	3798      	adds	r7, #152	; 0x98
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3305      	adds	r3, #5
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	3204      	adds	r2, #4
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <ETH_MACAddressConfig+0x68>)
 80058f2:	4413      	add	r3, r2
 80058f4:	461a      	mov	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3303      	adds	r3, #3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	061a      	lsls	r2, r3, #24
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3302      	adds	r3, #2
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3301      	adds	r3, #1
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	4313      	orrs	r3, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	7812      	ldrb	r2, [r2, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <ETH_MACAddressConfig+0x6c>)
 8005922:	4413      	add	r3, r2
 8005924:	461a      	mov	r2, r3
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6013      	str	r3, [r2, #0]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40028040 	.word	0x40028040
 800593c:	40028044 	.word	0x40028044

08005940 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e03e      	b.n	80059cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68d9      	ldr	r1, [r3, #12]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	440b      	add	r3, r1
 800595e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2200      	movs	r2, #0
 800596a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2200      	movs	r2, #0
 8005970:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	3206      	adds	r2, #6
 8005980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d80c      	bhi.n	80059b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68d9      	ldr	r1, [r3, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	440b      	add	r3, r1
 80059a8:	461a      	mov	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	60da      	str	r2, [r3, #12]
 80059ae:	e004      	b.n	80059ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	461a      	mov	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3301      	adds	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d9bd      	bls.n	800594e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e4:	611a      	str	r2, [r3, #16]
}
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e046      	b.n	8005a8e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6919      	ldr	r1, [r3, #16]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	440b      	add	r3, r1
 8005a10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2200      	movs	r2, #0
 8005a28:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2200      	movs	r2, #0
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a3c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005a44:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	3212      	adds	r2, #18
 8005a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d80c      	bhi.n	8005a7e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6919      	ldr	r1, [r3, #16]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	440b      	add	r3, r1
 8005a76:	461a      	mov	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	60da      	str	r2, [r3, #12]
 8005a7c:	e004      	b.n	8005a88 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	461a      	mov	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d9b5      	bls.n	8005a00 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abe:	60da      	str	r2, [r3, #12]
}
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	e177      	b.n	8005dd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ae8:	2201      	movs	r2, #1
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4013      	ands	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	f040 8166 	bne.w	8005dd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d005      	beq.n	8005b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d130      	bne.n	8005b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	2203      	movs	r2, #3
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4013      	ands	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b54:	2201      	movs	r2, #1
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4013      	ands	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 0201 	and.w	r2, r3, #1
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d017      	beq.n	8005bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	2203      	movs	r2, #3
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d123      	bne.n	8005c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	08da      	lsrs	r2, r3, #3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3208      	adds	r2, #8
 8005bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	220f      	movs	r2, #15
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	08da      	lsrs	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3208      	adds	r2, #8
 8005c0a:	69b9      	ldr	r1, [r7, #24]
 8005c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	2203      	movs	r2, #3
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	43db      	mvns	r3, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4013      	ands	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 0203 	and.w	r2, r3, #3
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80c0 	beq.w	8005dd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	4b66      	ldr	r3, [pc, #408]	; (8005df0 <HAL_GPIO_Init+0x324>)
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	4a65      	ldr	r2, [pc, #404]	; (8005df0 <HAL_GPIO_Init+0x324>)
 8005c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c60:	6453      	str	r3, [r2, #68]	; 0x44
 8005c62:	4b63      	ldr	r3, [pc, #396]	; (8005df0 <HAL_GPIO_Init+0x324>)
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c6e:	4a61      	ldr	r2, [pc, #388]	; (8005df4 <HAL_GPIO_Init+0x328>)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	3302      	adds	r3, #2
 8005c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	220f      	movs	r2, #15
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a58      	ldr	r2, [pc, #352]	; (8005df8 <HAL_GPIO_Init+0x32c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d037      	beq.n	8005d0a <HAL_GPIO_Init+0x23e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a57      	ldr	r2, [pc, #348]	; (8005dfc <HAL_GPIO_Init+0x330>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d031      	beq.n	8005d06 <HAL_GPIO_Init+0x23a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a56      	ldr	r2, [pc, #344]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d02b      	beq.n	8005d02 <HAL_GPIO_Init+0x236>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a55      	ldr	r2, [pc, #340]	; (8005e04 <HAL_GPIO_Init+0x338>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d025      	beq.n	8005cfe <HAL_GPIO_Init+0x232>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a54      	ldr	r2, [pc, #336]	; (8005e08 <HAL_GPIO_Init+0x33c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01f      	beq.n	8005cfa <HAL_GPIO_Init+0x22e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a53      	ldr	r2, [pc, #332]	; (8005e0c <HAL_GPIO_Init+0x340>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d019      	beq.n	8005cf6 <HAL_GPIO_Init+0x22a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a52      	ldr	r2, [pc, #328]	; (8005e10 <HAL_GPIO_Init+0x344>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_GPIO_Init+0x226>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a51      	ldr	r2, [pc, #324]	; (8005e14 <HAL_GPIO_Init+0x348>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00d      	beq.n	8005cee <HAL_GPIO_Init+0x222>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a50      	ldr	r2, [pc, #320]	; (8005e18 <HAL_GPIO_Init+0x34c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d007      	beq.n	8005cea <HAL_GPIO_Init+0x21e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a4f      	ldr	r2, [pc, #316]	; (8005e1c <HAL_GPIO_Init+0x350>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <HAL_GPIO_Init+0x21a>
 8005ce2:	2309      	movs	r3, #9
 8005ce4:	e012      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005ce6:	230a      	movs	r3, #10
 8005ce8:	e010      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cea:	2308      	movs	r3, #8
 8005cec:	e00e      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cee:	2307      	movs	r3, #7
 8005cf0:	e00c      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cf2:	2306      	movs	r3, #6
 8005cf4:	e00a      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cf6:	2305      	movs	r3, #5
 8005cf8:	e008      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	e006      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e004      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e002      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	f002 0203 	and.w	r2, r2, #3
 8005d12:	0092      	lsls	r2, r2, #2
 8005d14:	4093      	lsls	r3, r2
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d1c:	4935      	ldr	r1, [pc, #212]	; (8005df4 <HAL_GPIO_Init+0x328>)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	089b      	lsrs	r3, r3, #2
 8005d22:	3302      	adds	r3, #2
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d2a:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	43db      	mvns	r3, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4013      	ands	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d4e:	4a34      	ldr	r2, [pc, #208]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d54:	4b32      	ldr	r3, [pc, #200]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	4013      	ands	r3, r2
 8005d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d78:	4a29      	ldr	r2, [pc, #164]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d7e:	4b28      	ldr	r3, [pc, #160]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005da2:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005da8:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	43db      	mvns	r3, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4013      	ands	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dcc:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	f67f ae84 	bls.w	8005ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	3724      	adds	r7, #36	; 0x24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40023800 	.word	0x40023800
 8005df4:	40013800 	.word	0x40013800
 8005df8:	40020000 	.word	0x40020000
 8005dfc:	40020400 	.word	0x40020400
 8005e00:	40020800 	.word	0x40020800
 8005e04:	40020c00 	.word	0x40020c00
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40021400 	.word	0x40021400
 8005e10:	40021800 	.word	0x40021800
 8005e14:	40021c00 	.word	0x40021c00
 8005e18:	40022000 	.word	0x40022000
 8005e1c:	40022400 	.word	0x40022400
 8005e20:	40013c00 	.word	0x40013c00

08005e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	887b      	ldrh	r3, [r7, #2]
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
 8005e40:	e001      	b.n	8005e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	807b      	strh	r3, [r7, #2]
 8005e60:	4613      	mov	r3, r2
 8005e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e64:	787b      	ldrb	r3, [r7, #1]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e6a:	887a      	ldrh	r2, [r7, #2]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e70:	e003      	b.n	8005e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e72:	887b      	ldrh	r3, [r7, #2]
 8005e74:	041a      	lsls	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	619a      	str	r2, [r3, #24]
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e12b      	b.n	80060f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fe fb48 	bl	8004544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2224      	movs	r2, #36	; 0x24
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005eec:	f002 f8f4 	bl	80080d8 <HAL_RCC_GetPCLK1Freq>
 8005ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	4a81      	ldr	r2, [pc, #516]	; (80060fc <HAL_I2C_Init+0x274>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d807      	bhi.n	8005f0c <HAL_I2C_Init+0x84>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a80      	ldr	r2, [pc, #512]	; (8006100 <HAL_I2C_Init+0x278>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	bf94      	ite	ls
 8005f04:	2301      	movls	r3, #1
 8005f06:	2300      	movhi	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	e006      	b.n	8005f1a <HAL_I2C_Init+0x92>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a7d      	ldr	r2, [pc, #500]	; (8006104 <HAL_I2C_Init+0x27c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	bf94      	ite	ls
 8005f14:	2301      	movls	r3, #1
 8005f16:	2300      	movhi	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e0e7      	b.n	80060f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a78      	ldr	r2, [pc, #480]	; (8006108 <HAL_I2C_Init+0x280>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	0c9b      	lsrs	r3, r3, #18
 8005f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a6a      	ldr	r2, [pc, #424]	; (80060fc <HAL_I2C_Init+0x274>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d802      	bhi.n	8005f5c <HAL_I2C_Init+0xd4>
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	e009      	b.n	8005f70 <HAL_I2C_Init+0xe8>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
 8005f66:	4a69      	ldr	r2, [pc, #420]	; (800610c <HAL_I2C_Init+0x284>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	099b      	lsrs	r3, r3, #6
 8005f6e:	3301      	adds	r3, #1
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	495c      	ldr	r1, [pc, #368]	; (80060fc <HAL_I2C_Init+0x274>)
 8005f8c:	428b      	cmp	r3, r1
 8005f8e:	d819      	bhi.n	8005fc4 <HAL_I2C_Init+0x13c>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	1e59      	subs	r1, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f9e:	1c59      	adds	r1, r3, #1
 8005fa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005fa4:	400b      	ands	r3, r1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_I2C_Init+0x138>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1e59      	subs	r1, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fb8:	3301      	adds	r3, #1
 8005fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fbe:	e051      	b.n	8006064 <HAL_I2C_Init+0x1dc>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	e04f      	b.n	8006064 <HAL_I2C_Init+0x1dc>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d111      	bne.n	8005ff0 <HAL_I2C_Init+0x168>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1e58      	subs	r0, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6859      	ldr	r1, [r3, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	440b      	add	r3, r1
 8005fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fde:	3301      	adds	r3, #1
 8005fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bf0c      	ite	eq
 8005fe8:	2301      	moveq	r3, #1
 8005fea:	2300      	movne	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	e012      	b.n	8006016 <HAL_I2C_Init+0x18e>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	1e58      	subs	r0, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6859      	ldr	r1, [r3, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	0099      	lsls	r1, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	fbb0 f3f3 	udiv	r3, r0, r3
 8006006:	3301      	adds	r3, #1
 8006008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800600c:	2b00      	cmp	r3, #0
 800600e:	bf0c      	ite	eq
 8006010:	2301      	moveq	r3, #1
 8006012:	2300      	movne	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_I2C_Init+0x196>
 800601a:	2301      	movs	r3, #1
 800601c:	e022      	b.n	8006064 <HAL_I2C_Init+0x1dc>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10e      	bne.n	8006044 <HAL_I2C_Init+0x1bc>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1e58      	subs	r0, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6859      	ldr	r1, [r3, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	440b      	add	r3, r1
 8006034:	fbb0 f3f3 	udiv	r3, r0, r3
 8006038:	3301      	adds	r3, #1
 800603a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006042:	e00f      	b.n	8006064 <HAL_I2C_Init+0x1dc>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	1e58      	subs	r0, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6859      	ldr	r1, [r3, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	0099      	lsls	r1, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	fbb0 f3f3 	udiv	r3, r0, r3
 800605a:	3301      	adds	r3, #1
 800605c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	6809      	ldr	r1, [r1, #0]
 8006068:	4313      	orrs	r3, r2
 800606a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6911      	ldr	r1, [r2, #16]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	68d2      	ldr	r2, [r2, #12]
 800609e:	4311      	orrs	r1, r2
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	430b      	orrs	r3, r1
 80060a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	000186a0 	.word	0x000186a0
 8006100:	001e847f 	.word	0x001e847f
 8006104:	003d08ff 	.word	0x003d08ff
 8006108:	431bde83 	.word	0x431bde83
 800610c:	10624dd3 	.word	0x10624dd3

08006110 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	461a      	mov	r2, r3
 800611c:	460b      	mov	r3, r1
 800611e:	817b      	strh	r3, [r7, #10]
 8006120:	4613      	mov	r3, r2
 8006122:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006124:	f7fe fcdc 	bl	8004ae0 <HAL_GetTick>
 8006128:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b20      	cmp	r3, #32
 8006134:	f040 80e0 	bne.w	80062f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	2319      	movs	r3, #25
 800613e:	2201      	movs	r2, #1
 8006140:	4970      	ldr	r1, [pc, #448]	; (8006304 <HAL_I2C_Master_Transmit+0x1f4>)
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fa92 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800614e:	2302      	movs	r3, #2
 8006150:	e0d3      	b.n	80062fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_I2C_Master_Transmit+0x50>
 800615c:	2302      	movs	r3, #2
 800615e:	e0cc      	b.n	80062fa <HAL_I2C_Master_Transmit+0x1ea>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b01      	cmp	r3, #1
 8006174:	d007      	beq.n	8006186 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0201 	orr.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006194:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2221      	movs	r2, #33	; 0x21
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2210      	movs	r2, #16
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	893a      	ldrh	r2, [r7, #8]
 80061b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a50      	ldr	r2, [pc, #320]	; (8006308 <HAL_I2C_Master_Transmit+0x1f8>)
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80061c8:	8979      	ldrh	r1, [r7, #10]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f9ca 	bl	8006568 <I2C_MasterRequestWrite>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e08d      	b.n	80062fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061de:	2300      	movs	r3, #0
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80061f4:	e066      	b.n	80062c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	6a39      	ldr	r1, [r7, #32]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fb0c 	bl	8006818 <I2C_WaitOnTXEFlagUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00d      	beq.n	8006222 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	2b04      	cmp	r3, #4
 800620c:	d107      	bne.n	800621e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800621c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e06b      	b.n	80062fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	781a      	ldrb	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b04      	cmp	r3, #4
 800625e:	d11b      	bne.n	8006298 <HAL_I2C_Master_Transmit+0x188>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006264:	2b00      	cmp	r3, #0
 8006266:	d017      	beq.n	8006298 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	781a      	ldrb	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	6a39      	ldr	r1, [r7, #32]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fafc 	bl	800689a <I2C_WaitOnBTFFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00d      	beq.n	80062c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d107      	bne.n	80062c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e01a      	b.n	80062fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d194      	bne.n	80061f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e000      	b.n	80062fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80062f8:	2302      	movs	r3, #2
  }
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	00100002 	.word	0x00100002
 8006308:	ffff0000 	.word	0xffff0000

0800630c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	460b      	mov	r3, r1
 800631a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800631c:	f7fe fbe0 	bl	8004ae0 <HAL_GetTick>
 8006320:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b20      	cmp	r3, #32
 8006330:	f040 8111 	bne.w	8006556 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	2319      	movs	r3, #25
 800633a:	2201      	movs	r2, #1
 800633c:	4988      	ldr	r1, [pc, #544]	; (8006560 <HAL_I2C_IsDeviceReady+0x254>)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f994 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
 800634c:	e104      	b.n	8006558 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_I2C_IsDeviceReady+0x50>
 8006358:	2302      	movs	r3, #2
 800635a:	e0fd      	b.n	8006558 <HAL_I2C_IsDeviceReady+0x24c>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b01      	cmp	r3, #1
 8006370:	d007      	beq.n	8006382 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 0201 	orr.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2224      	movs	r2, #36	; 0x24
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4a70      	ldr	r2, [pc, #448]	; (8006564 <HAL_I2C_IsDeviceReady+0x258>)
 80063a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2200      	movs	r2, #0
 80063be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f952 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00d      	beq.n	80063ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063dc:	d103      	bne.n	80063e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e0b6      	b.n	8006558 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063ea:	897b      	ldrh	r3, [r7, #10]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80063fa:	f7fe fb71 	bl	8004ae0 <HAL_GetTick>
 80063fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006424:	bf0c      	ite	eq
 8006426:	2301      	moveq	r3, #1
 8006428:	2300      	movne	r3, #0
 800642a:	b2db      	uxtb	r3, r3
 800642c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800642e:	e025      	b.n	800647c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006430:	f7fe fb56 	bl	8004ae0 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d302      	bcc.n	8006446 <HAL_I2C_IsDeviceReady+0x13a>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	22a0      	movs	r2, #160	; 0xa0
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b02      	cmp	r3, #2
 800645a:	bf0c      	ite	eq
 800645c:	2301      	moveq	r3, #1
 800645e:	2300      	movne	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800646e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2ba0      	cmp	r3, #160	; 0xa0
 8006486:	d005      	beq.n	8006494 <HAL_I2C_IsDeviceReady+0x188>
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <HAL_I2C_IsDeviceReady+0x188>
 800648e:	7dbb      	ldrb	r3, [r7, #22]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0cd      	beq.n	8006430 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d129      	bne.n	80064fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ba:	2300      	movs	r3, #0
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2319      	movs	r3, #25
 80064d6:	2201      	movs	r2, #1
 80064d8:	4921      	ldr	r1, [pc, #132]	; (8006560 <HAL_I2C_IsDeviceReady+0x254>)
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f8c6 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e036      	b.n	8006558 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e02c      	b.n	8006558 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006516:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2319      	movs	r3, #25
 800651e:	2201      	movs	r2, #1
 8006520:	490f      	ldr	r1, [pc, #60]	; (8006560 <HAL_I2C_IsDeviceReady+0x254>)
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f8a2 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e012      	b.n	8006558 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	3301      	adds	r3, #1
 8006536:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	f4ff af32 	bcc.w	80063a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006556:	2302      	movs	r3, #2
  }
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	00100002 	.word	0x00100002
 8006564:	ffff0000 	.word	0xffff0000

08006568 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	460b      	mov	r3, r1
 8006576:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d006      	beq.n	8006592 <I2C_MasterRequestWrite+0x2a>
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d003      	beq.n	8006592 <I2C_MasterRequestWrite+0x2a>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006590:	d108      	bne.n	80065a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e00b      	b.n	80065bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	2b12      	cmp	r3, #18
 80065aa:	d107      	bne.n	80065bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f84f 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00d      	beq.n	80065f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e2:	d103      	bne.n	80065ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e035      	b.n	800665c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f8:	d108      	bne.n	800660c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065fa:	897b      	ldrh	r3, [r7, #10]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006608:	611a      	str	r2, [r3, #16]
 800660a:	e01b      	b.n	8006644 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800660c:	897b      	ldrh	r3, [r7, #10]
 800660e:	11db      	asrs	r3, r3, #7
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0306 	and.w	r3, r3, #6
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f063 030f 	orn	r3, r3, #15
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	490e      	ldr	r1, [pc, #56]	; (8006664 <I2C_MasterRequestWrite+0xfc>)
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f875 	bl	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e010      	b.n	800665c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800663a:	897b      	ldrh	r3, [r7, #10]
 800663c:	b2da      	uxtb	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	4907      	ldr	r1, [pc, #28]	; (8006668 <I2C_MasterRequestWrite+0x100>)
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f865 	bl	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	00010008 	.word	0x00010008
 8006668:	00010002 	.word	0x00010002

0800666c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800667c:	e025      	b.n	80066ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d021      	beq.n	80066ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006686:	f7fe fa2b 	bl	8004ae0 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d302      	bcc.n	800669c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d116      	bne.n	80066ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f043 0220 	orr.w	r2, r3, #32
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e023      	b.n	8006712 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	0c1b      	lsrs	r3, r3, #16
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d10d      	bne.n	80066f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	43da      	mvns	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4013      	ands	r3, r2
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bf0c      	ite	eq
 80066e6:	2301      	moveq	r3, #1
 80066e8:	2300      	movne	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	e00c      	b.n	800670a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	43da      	mvns	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4013      	ands	r3, r2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf0c      	ite	eq
 8006702:	2301      	moveq	r3, #1
 8006704:	2300      	movne	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	429a      	cmp	r2, r3
 800670e:	d0b6      	beq.n	800667e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006728:	e051      	b.n	80067ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006738:	d123      	bne.n	8006782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006748:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006752:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f043 0204 	orr.w	r2, r3, #4
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e046      	b.n	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d021      	beq.n	80067ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7fe f9a9 	bl	8004ae0 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d116      	bne.n	80067ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f043 0220 	orr.w	r2, r3, #32
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e020      	b.n	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	0c1b      	lsrs	r3, r3, #16
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10c      	bne.n	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	43da      	mvns	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4013      	ands	r3, r2
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bf14      	ite	ne
 80067ea:	2301      	movne	r3, #1
 80067ec:	2300      	moveq	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	e00b      	b.n	800680a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	43da      	mvns	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4013      	ands	r3, r2
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d18d      	bne.n	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006824:	e02d      	b.n	8006882 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f878 	bl	800691c <I2C_IsAcknowledgeFailed>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e02d      	b.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d021      	beq.n	8006882 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683e:	f7fe f94f 	bl	8004ae0 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	d302      	bcc.n	8006854 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d116      	bne.n	8006882 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e007      	b.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688c:	2b80      	cmp	r3, #128	; 0x80
 800688e:	d1ca      	bne.n	8006826 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068a6:	e02d      	b.n	8006904 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f837 	bl	800691c <I2C_IsAcknowledgeFailed>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e02d      	b.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d021      	beq.n	8006904 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c0:	f7fe f90e 	bl	8004ae0 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d116      	bne.n	8006904 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e007      	b.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b04      	cmp	r3, #4
 8006910:	d1ca      	bne.n	80068a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800692e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006932:	d11b      	bne.n	800696c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800693c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	f043 0204 	orr.w	r2, r3, #4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b20      	cmp	r3, #32
 800698e:	d129      	bne.n	80069e4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2224      	movs	r2, #36	; 0x24
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0201 	bic.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0210 	bic.w	r2, r2, #16
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e000      	b.n	80069e6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d12a      	bne.n	8006a62 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2224      	movs	r2, #36	; 0x24
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0201 	bic.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006a2c:	89fb      	ldrh	r3, [r7, #14]
 8006a2e:	f023 030f 	bic.w	r3, r3, #15
 8006a32:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	89fb      	ldrh	r3, [r7, #14]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	89fa      	ldrh	r2, [r7, #14]
 8006a44:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e000      	b.n	8006a64 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006a62:	2302      	movs	r3, #2
  }
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e128      	b.n	8006cd4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a90      	ldr	r2, [pc, #576]	; (8006cdc <HAL_I2S_Init+0x26c>)
 8006a9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7fd fd99 	bl	80045d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006ab8:	f023 030f 	bic.w	r3, r3, #15
 8006abc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d060      	beq.n	8006b90 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d102      	bne.n	8006adc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006ad6:	2310      	movs	r3, #16
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	e001      	b.n	8006ae0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006adc:	2320      	movs	r3, #32
 8006ade:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d802      	bhi.n	8006aee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006aee:	2001      	movs	r0, #1
 8006af0:	f001 fcda 	bl	80084a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006af4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006afe:	d125      	bne.n	8006b4c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d010      	beq.n	8006b2a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b24:	3305      	adds	r3, #5
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	e01f      	b.n	8006b6a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b46:	3305      	adds	r3, #5
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	e00e      	b.n	8006b6a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	3305      	adds	r3, #5
 8006b68:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4a5c      	ldr	r2, [pc, #368]	; (8006ce0 <HAL_I2S_Init+0x270>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	08db      	lsrs	r3, r3, #3
 8006b74:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	e003      	b.n	8006b98 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006b90:	2302      	movs	r3, #2
 8006b92:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d902      	bls.n	8006ba4 <HAL_I2S_Init+0x134>
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	2bff      	cmp	r3, #255	; 0xff
 8006ba2:	d907      	bls.n	8006bb4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba8:	f043 0210 	orr.w	r2, r3, #16
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e08f      	b.n	8006cd4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	ea42 0103 	orr.w	r1, r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006bd2:	f023 030f 	bic.w	r3, r3, #15
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6851      	ldr	r1, [r2, #4]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6892      	ldr	r2, [r2, #8]
 8006bde:	4311      	orrs	r1, r2
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	68d2      	ldr	r2, [r2, #12]
 8006be4:	4311      	orrs	r1, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6992      	ldr	r2, [r2, #24]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d161      	bne.n	8006cc4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a38      	ldr	r2, [pc, #224]	; (8006ce4 <HAL_I2S_Init+0x274>)
 8006c04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a37      	ldr	r2, [pc, #220]	; (8006ce8 <HAL_I2S_Init+0x278>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d101      	bne.n	8006c14 <HAL_I2S_Init+0x1a4>
 8006c10:	4b36      	ldr	r3, [pc, #216]	; (8006cec <HAL_I2S_Init+0x27c>)
 8006c12:	e001      	b.n	8006c18 <HAL_I2S_Init+0x1a8>
 8006c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	4932      	ldr	r1, [pc, #200]	; (8006ce8 <HAL_I2S_Init+0x278>)
 8006c20:	428a      	cmp	r2, r1
 8006c22:	d101      	bne.n	8006c28 <HAL_I2S_Init+0x1b8>
 8006c24:	4a31      	ldr	r2, [pc, #196]	; (8006cec <HAL_I2S_Init+0x27c>)
 8006c26:	e001      	b.n	8006c2c <HAL_I2S_Init+0x1bc>
 8006c28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006c2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006c30:	f023 030f 	bic.w	r3, r3, #15
 8006c34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a2b      	ldr	r2, [pc, #172]	; (8006ce8 <HAL_I2S_Init+0x278>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d101      	bne.n	8006c44 <HAL_I2S_Init+0x1d4>
 8006c40:	4b2a      	ldr	r3, [pc, #168]	; (8006cec <HAL_I2S_Init+0x27c>)
 8006c42:	e001      	b.n	8006c48 <HAL_I2S_Init+0x1d8>
 8006c44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c48:	2202      	movs	r2, #2
 8006c4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a25      	ldr	r2, [pc, #148]	; (8006ce8 <HAL_I2S_Init+0x278>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d101      	bne.n	8006c5a <HAL_I2S_Init+0x1ea>
 8006c56:	4b25      	ldr	r3, [pc, #148]	; (8006cec <HAL_I2S_Init+0x27c>)
 8006c58:	e001      	b.n	8006c5e <HAL_I2S_Init+0x1ee>
 8006c5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6a:	d003      	beq.n	8006c74 <HAL_I2S_Init+0x204>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d103      	bne.n	8006c7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	e001      	b.n	8006c80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c94:	4313      	orrs	r3, r2
 8006c96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	897b      	ldrh	r3, [r7, #10]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a0d      	ldr	r2, [pc, #52]	; (8006ce8 <HAL_I2S_Init+0x278>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d101      	bne.n	8006cbc <HAL_I2S_Init+0x24c>
 8006cb8:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <HAL_I2S_Init+0x27c>)
 8006cba:	e001      	b.n	8006cc0 <HAL_I2S_Init+0x250>
 8006cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cc0:	897a      	ldrh	r2, [r7, #10]
 8006cc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	08006ff5 	.word	0x08006ff5
 8006ce0:	cccccccd 	.word	0xcccccccd
 8006ce4:	08007109 	.word	0x08007109
 8006ce8:	40003800 	.word	0x40003800
 8006cec:	40003400 	.word	0x40003400

08006cf0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_I2S_Receive_DMA+0x1a>
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e0a1      	b.n	8006e52 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_I2S_Receive_DMA+0x2e>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e099      	b.n	8006e52 <HAL_I2S_Receive_DMA+0x162>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d005      	beq.n	8006d3e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e089      	b.n	8006e52 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2204      	movs	r2, #4
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d002      	beq.n	8006d6a <HAL_I2S_Receive_DMA+0x7a>
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d10a      	bne.n	8006d80 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006d74:	88fb      	ldrh	r3, [r7, #6]
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	865a      	strh	r2, [r3, #50]	; 0x32
 8006d7e:	e005      	b.n	8006d8c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	88fa      	ldrh	r2, [r7, #6]
 8006d84:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	4a32      	ldr	r2, [pc, #200]	; (8006e5c <HAL_I2S_Receive_DMA+0x16c>)
 8006d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d98:	4a31      	ldr	r2, [pc, #196]	; (8006e60 <HAL_I2S_Receive_DMA+0x170>)
 8006d9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da0:	4a30      	ldr	r2, [pc, #192]	; (8006e64 <HAL_I2S_Receive_DMA+0x174>)
 8006da2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db2:	d10a      	bne.n	8006dca <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006de0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006de2:	f7fe f889 	bl	8004ef8 <HAL_DMA_Start_IT>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00f      	beq.n	8006e0c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df0:	f043 0208 	orr.w	r2, r3, #8
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e022      	b.n	8006e52 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d107      	bne.n	8006e2a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e28:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d107      	bne.n	8006e48 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	08006ed3 	.word	0x08006ed3
 8006e60:	08006e91 	.word	0x08006e91
 8006e64:	08006eef 	.word	0x08006eef

08006e68 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10e      	bne.n	8006ec4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0201 	bic.w	r2, r2, #1
 8006eb4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7fc f879 	bl	8002fbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006eca:	bf00      	nop
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7fc f823 	bl	8002f2c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0203 	bic.w	r2, r2, #3
 8006f0a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f24:	f043 0208 	orr.w	r2, r3, #8
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff ffa5 	bl	8006e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	881a      	ldrh	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10e      	bne.n	8006f8e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff ff6d 	bl	8006e68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10e      	bne.n	8006fec <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fdc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fb ffe8 	bl	8002fbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b04      	cmp	r3, #4
 800700e:	d13a      	bne.n	8007086 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b01      	cmp	r3, #1
 8007018:	d109      	bne.n	800702e <I2S_IRQHandler+0x3a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	d102      	bne.n	800702e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff ffb4 	bl	8006f96 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d126      	bne.n	8007086 <I2S_IRQHandler+0x92>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b20      	cmp	r3, #32
 8007044:	d11f      	bne.n	8007086 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007054:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007056:	2300      	movs	r3, #0
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007078:	f043 0202 	orr.w	r2, r3, #2
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fefb 	bl	8006e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b03      	cmp	r3, #3
 8007090:	d136      	bne.n	8007100 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b02      	cmp	r3, #2
 800709a:	d109      	bne.n	80070b0 <I2S_IRQHandler+0xbc>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a6:	2b80      	cmp	r3, #128	; 0x80
 80070a8:	d102      	bne.n	80070b0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff ff45 	bl	8006f3a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d122      	bne.n	8007100 <I2S_IRQHandler+0x10c>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d11b      	bne.n	8007100 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070d6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f2:	f043 0204 	orr.w	r2, r3, #4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff febe 	bl	8006e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007100:	bf00      	nop
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a92      	ldr	r2, [pc, #584]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d101      	bne.n	8007126 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007122:	4b92      	ldr	r3, [pc, #584]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007124:	e001      	b.n	800712a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007126:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a8b      	ldr	r2, [pc, #556]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d101      	bne.n	8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007140:	4b8a      	ldr	r3, [pc, #552]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007142:	e001      	b.n	8007148 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007144:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007154:	d004      	beq.n	8007160 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f040 8099 	bne.w	8007292 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b02      	cmp	r3, #2
 8007168:	d107      	bne.n	800717a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f925 	bl	80073c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d107      	bne.n	8007194 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9c8 	bl	8007524 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d13a      	bne.n	8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d035      	beq.n	8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a6e      	ldr	r2, [pc, #440]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d101      	bne.n	80071b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80071b2:	4b6e      	ldr	r3, [pc, #440]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071b4:	e001      	b.n	80071ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80071b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4969      	ldr	r1, [pc, #420]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071c2:	428b      	cmp	r3, r1
 80071c4:	d101      	bne.n	80071ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80071c6:	4b69      	ldr	r3, [pc, #420]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071c8:	e001      	b.n	80071ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80071ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	f043 0202 	orr.w	r2, r3, #2
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff fe34 	bl	8006e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b08      	cmp	r3, #8
 800721c:	f040 80c3 	bne.w	80073a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80bd 	beq.w	80073a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800723a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a49      	ldr	r2, [pc, #292]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d101      	bne.n	800724a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007246:	4b49      	ldr	r3, [pc, #292]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007248:	e001      	b.n	800724e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800724a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4944      	ldr	r1, [pc, #272]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007256:	428b      	cmp	r3, r1
 8007258:	d101      	bne.n	800725e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800725a:	4b44      	ldr	r3, [pc, #272]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800725c:	e001      	b.n	8007262 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800725e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007262:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007266:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	60bb      	str	r3, [r7, #8]
 8007274:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	f043 0204 	orr.w	r2, r3, #4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff fdf6 	bl	8006e7c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007290:	e089      	b.n	80073a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b02      	cmp	r3, #2
 800729a:	d107      	bne.n	80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f8be 	bl	8007428 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d107      	bne.n	80072c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f8fd 	bl	80074c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d12f      	bne.n	8007330 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d02a      	beq.n	8007330 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d101      	bne.n	80072f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80072f4:	4b1d      	ldr	r3, [pc, #116]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80072f6:	e001      	b.n	80072fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80072f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4919      	ldr	r1, [pc, #100]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007304:	428b      	cmp	r3, r1
 8007306:	d101      	bne.n	800730c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007308:	4b18      	ldr	r3, [pc, #96]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800730a:	e001      	b.n	8007310 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800730c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007310:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007314:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007322:	f043 0202 	orr.w	r2, r3, #2
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff fda6 	bl	8006e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f003 0308 	and.w	r3, r3, #8
 8007336:	2b08      	cmp	r3, #8
 8007338:	d136      	bne.n	80073a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b00      	cmp	r3, #0
 8007342:	d031      	beq.n	80073a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a07      	ldr	r2, [pc, #28]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d101      	bne.n	8007352 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800734e:	4b07      	ldr	r3, [pc, #28]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007350:	e001      	b.n	8007356 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4902      	ldr	r1, [pc, #8]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800735e:	428b      	cmp	r3, r1
 8007360:	d106      	bne.n	8007370 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007362:	4b02      	ldr	r3, [pc, #8]	; (800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007364:	e006      	b.n	8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007366:	bf00      	nop
 8007368:	40003800 	.word	0x40003800
 800736c:	40003400 	.word	0x40003400
 8007370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007374:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007378:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007388:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	f043 0204 	orr.w	r2, r3, #4
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff fd6c 	bl	8006e7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073a4:	e000      	b.n	80073a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80073a6:	bf00      	nop
}
 80073a8:	bf00      	nop
 80073aa:	3720      	adds	r7, #32
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	1c99      	adds	r1, r3, #2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6251      	str	r1, [r2, #36]	; 0x24
 80073d6:	881a      	ldrh	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d113      	bne.n	800741e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007404:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d106      	bne.n	800741e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff ffc9 	bl	80073b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	1c99      	adds	r1, r3, #2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6251      	str	r1, [r2, #36]	; 0x24
 800743a:	8819      	ldrh	r1, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1d      	ldr	r2, [pc, #116]	; (80074b8 <I2SEx_TxISR_I2SExt+0x90>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d101      	bne.n	800744a <I2SEx_TxISR_I2SExt+0x22>
 8007446:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <I2SEx_TxISR_I2SExt+0x94>)
 8007448:	e001      	b.n	800744e <I2SEx_TxISR_I2SExt+0x26>
 800744a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800744e:	460a      	mov	r2, r1
 8007450:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d121      	bne.n	80074ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a12      	ldr	r2, [pc, #72]	; (80074b8 <I2SEx_TxISR_I2SExt+0x90>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d101      	bne.n	8007478 <I2SEx_TxISR_I2SExt+0x50>
 8007474:	4b11      	ldr	r3, [pc, #68]	; (80074bc <I2SEx_TxISR_I2SExt+0x94>)
 8007476:	e001      	b.n	800747c <I2SEx_TxISR_I2SExt+0x54>
 8007478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	490d      	ldr	r1, [pc, #52]	; (80074b8 <I2SEx_TxISR_I2SExt+0x90>)
 8007484:	428b      	cmp	r3, r1
 8007486:	d101      	bne.n	800748c <I2SEx_TxISR_I2SExt+0x64>
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <I2SEx_TxISR_I2SExt+0x94>)
 800748a:	e001      	b.n	8007490 <I2SEx_TxISR_I2SExt+0x68>
 800748c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007494:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800749a:	b29b      	uxth	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff ff81 	bl	80073b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40003800 	.word	0x40003800
 80074bc:	40003400 	.word	0x40003400

080074c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68d8      	ldr	r0, [r3, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	1c99      	adds	r1, r3, #2
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80074d8:	b282      	uxth	r2, r0
 80074da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d113      	bne.n	800751c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007502:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff ff4a 	bl	80073b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a20      	ldr	r2, [pc, #128]	; (80075b4 <I2SEx_RxISR_I2SExt+0x90>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d101      	bne.n	800753a <I2SEx_RxISR_I2SExt+0x16>
 8007536:	4b20      	ldr	r3, [pc, #128]	; (80075b8 <I2SEx_RxISR_I2SExt+0x94>)
 8007538:	e001      	b.n	800753e <I2SEx_RxISR_I2SExt+0x1a>
 800753a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800753e:	68d8      	ldr	r0, [r3, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	1c99      	adds	r1, r3, #2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	62d1      	str	r1, [r2, #44]	; 0x2c
 800754a:	b282      	uxth	r2, r0
 800754c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d121      	bne.n	80075aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <I2SEx_RxISR_I2SExt+0x90>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d101      	bne.n	8007574 <I2SEx_RxISR_I2SExt+0x50>
 8007570:	4b11      	ldr	r3, [pc, #68]	; (80075b8 <I2SEx_RxISR_I2SExt+0x94>)
 8007572:	e001      	b.n	8007578 <I2SEx_RxISR_I2SExt+0x54>
 8007574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	490d      	ldr	r1, [pc, #52]	; (80075b4 <I2SEx_RxISR_I2SExt+0x90>)
 8007580:	428b      	cmp	r3, r1
 8007582:	d101      	bne.n	8007588 <I2SEx_RxISR_I2SExt+0x64>
 8007584:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <I2SEx_RxISR_I2SExt+0x94>)
 8007586:	e001      	b.n	800758c <I2SEx_RxISR_I2SExt+0x68>
 8007588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800758c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007590:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d106      	bne.n	80075aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff ff03 	bl	80073b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40003800 	.word	0x40003800
 80075b8:	40003400 	.word	0x40003400

080075bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80075bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075be:	b08f      	sub	sp, #60	; 0x3c
 80075c0:	af0a      	add	r7, sp, #40	; 0x28
 80075c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e10f      	b.n	80077ee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d106      	bne.n	80075ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7fd f913 	bl	8004814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2203      	movs	r2, #3
 80075f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d102      	bne.n	8007608 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f001 ff02 	bl	8009416 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	687e      	ldr	r6, [r7, #4]
 800761a:	466d      	mov	r5, sp
 800761c:	f106 0410 	add.w	r4, r6, #16
 8007620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007628:	e894 0003 	ldmia.w	r4, {r0, r1}
 800762c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007630:	1d33      	adds	r3, r6, #4
 8007632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007634:	6838      	ldr	r0, [r7, #0]
 8007636:	f001 fe8d 	bl	8009354 <USB_CoreInit>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0d0      	b.n	80077ee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2100      	movs	r1, #0
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fef0 	bl	8009438 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]
 800765c:	e04a      	b.n	80076f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800765e:	7bfa      	ldrb	r2, [r7, #15]
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	4613      	mov	r3, r2
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	333d      	adds	r3, #61	; 0x3d
 800766e:	2201      	movs	r2, #1
 8007670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007672:	7bfa      	ldrb	r2, [r7, #15]
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	333c      	adds	r3, #60	; 0x3c
 8007682:	7bfa      	ldrb	r2, [r7, #15]
 8007684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007686:	7bfa      	ldrb	r2, [r7, #15]
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	b298      	uxth	r0, r3
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4613      	mov	r3, r2
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	440b      	add	r3, r1
 8007698:	3344      	adds	r3, #68	; 0x44
 800769a:	4602      	mov	r2, r0
 800769c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800769e:	7bfa      	ldrb	r2, [r7, #15]
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	4613      	mov	r3, r2
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	440b      	add	r3, r1
 80076ac:	3340      	adds	r3, #64	; 0x40
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80076b2:	7bfa      	ldrb	r2, [r7, #15]
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	3348      	adds	r3, #72	; 0x48
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80076c6:	7bfa      	ldrb	r2, [r7, #15]
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	4613      	mov	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	440b      	add	r3, r1
 80076d4:	334c      	adds	r3, #76	; 0x4c
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80076da:	7bfa      	ldrb	r2, [r7, #15]
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	3354      	adds	r3, #84	; 0x54
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	3301      	adds	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	7bfa      	ldrb	r2, [r7, #15]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d3af      	bcc.n	800765e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]
 8007702:	e044      	b.n	800778e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007704:	7bfa      	ldrb	r2, [r7, #15]
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	440b      	add	r3, r1
 8007712:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007716:	2200      	movs	r2, #0
 8007718:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800771a:	7bfa      	ldrb	r2, [r7, #15]
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800772c:	7bfa      	ldrb	r2, [r7, #15]
 800772e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007730:	7bfa      	ldrb	r2, [r7, #15]
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	440b      	add	r3, r1
 800773e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007746:	7bfa      	ldrb	r2, [r7, #15]
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	4613      	mov	r3, r2
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	440b      	add	r3, r1
 8007754:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800775c:	7bfa      	ldrb	r2, [r7, #15]
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	4613      	mov	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	440b      	add	r3, r1
 800776a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007772:	7bfa      	ldrb	r2, [r7, #15]
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	3301      	adds	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
 800778e:	7bfa      	ldrb	r2, [r7, #15]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	429a      	cmp	r2, r3
 8007796:	d3b5      	bcc.n	8007704 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	603b      	str	r3, [r7, #0]
 800779e:	687e      	ldr	r6, [r7, #4]
 80077a0:	466d      	mov	r5, sp
 80077a2:	f106 0410 	add.w	r4, r6, #16
 80077a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80077b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80077b6:	1d33      	adds	r3, r6, #4
 80077b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077ba:	6838      	ldr	r0, [r7, #0]
 80077bc:	f001 fe88 	bl	80094d0 <USB_DevInit>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e00d      	b.n	80077ee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f002 f853 	bl	8009892 <USB_DevDisconnect>

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080077f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e267      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d075      	beq.n	8007902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007816:	4b88      	ldr	r3, [pc, #544]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 030c 	and.w	r3, r3, #12
 800781e:	2b04      	cmp	r3, #4
 8007820:	d00c      	beq.n	800783c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007822:	4b85      	ldr	r3, [pc, #532]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800782a:	2b08      	cmp	r3, #8
 800782c:	d112      	bne.n	8007854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800782e:	4b82      	ldr	r3, [pc, #520]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800783a:	d10b      	bne.n	8007854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800783c:	4b7e      	ldr	r3, [pc, #504]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d05b      	beq.n	8007900 <HAL_RCC_OscConfig+0x108>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d157      	bne.n	8007900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e242      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800785c:	d106      	bne.n	800786c <HAL_RCC_OscConfig+0x74>
 800785e:	4b76      	ldr	r3, [pc, #472]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a75      	ldr	r2, [pc, #468]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e01d      	b.n	80078a8 <HAL_RCC_OscConfig+0xb0>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007874:	d10c      	bne.n	8007890 <HAL_RCC_OscConfig+0x98>
 8007876:	4b70      	ldr	r3, [pc, #448]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a6f      	ldr	r2, [pc, #444]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 800787c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	4b6d      	ldr	r3, [pc, #436]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a6c      	ldr	r2, [pc, #432]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	e00b      	b.n	80078a8 <HAL_RCC_OscConfig+0xb0>
 8007890:	4b69      	ldr	r3, [pc, #420]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a68      	ldr	r2, [pc, #416]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	4b66      	ldr	r3, [pc, #408]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a65      	ldr	r2, [pc, #404]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 80078a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d013      	beq.n	80078d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b0:	f7fd f916 	bl	8004ae0 <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078b8:	f7fd f912 	bl	8004ae0 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b64      	cmp	r3, #100	; 0x64
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e207      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ca:	4b5b      	ldr	r3, [pc, #364]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0f0      	beq.n	80078b8 <HAL_RCC_OscConfig+0xc0>
 80078d6:	e014      	b.n	8007902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d8:	f7fd f902 	bl	8004ae0 <HAL_GetTick>
 80078dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078de:	e008      	b.n	80078f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078e0:	f7fd f8fe 	bl	8004ae0 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b64      	cmp	r3, #100	; 0x64
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e1f3      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078f2:	4b51      	ldr	r3, [pc, #324]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1f0      	bne.n	80078e0 <HAL_RCC_OscConfig+0xe8>
 80078fe:	e000      	b.n	8007902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d063      	beq.n	80079d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800790e:	4b4a      	ldr	r3, [pc, #296]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 030c 	and.w	r3, r3, #12
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800791a:	4b47      	ldr	r3, [pc, #284]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007922:	2b08      	cmp	r3, #8
 8007924:	d11c      	bne.n	8007960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007926:	4b44      	ldr	r3, [pc, #272]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d116      	bne.n	8007960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007932:	4b41      	ldr	r3, [pc, #260]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d005      	beq.n	800794a <HAL_RCC_OscConfig+0x152>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d001      	beq.n	800794a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e1c7      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800794a:	4b3b      	ldr	r3, [pc, #236]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	4937      	ldr	r1, [pc, #220]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 800795a:	4313      	orrs	r3, r2
 800795c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800795e:	e03a      	b.n	80079d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d020      	beq.n	80079aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007968:	4b34      	ldr	r3, [pc, #208]	; (8007a3c <HAL_RCC_OscConfig+0x244>)
 800796a:	2201      	movs	r2, #1
 800796c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800796e:	f7fd f8b7 	bl	8004ae0 <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007974:	e008      	b.n	8007988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007976:	f7fd f8b3 	bl	8004ae0 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d901      	bls.n	8007988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e1a8      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007988:	4b2b      	ldr	r3, [pc, #172]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0f0      	beq.n	8007976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007994:	4b28      	ldr	r3, [pc, #160]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	4925      	ldr	r1, [pc, #148]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	600b      	str	r3, [r1, #0]
 80079a8:	e015      	b.n	80079d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079aa:	4b24      	ldr	r3, [pc, #144]	; (8007a3c <HAL_RCC_OscConfig+0x244>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b0:	f7fd f896 	bl	8004ae0 <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079b8:	f7fd f892 	bl	8004ae0 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e187      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079ca:	4b1b      	ldr	r3, [pc, #108]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f0      	bne.n	80079b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d036      	beq.n	8007a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d016      	beq.n	8007a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079ea:	4b15      	ldr	r3, [pc, #84]	; (8007a40 <HAL_RCC_OscConfig+0x248>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f0:	f7fd f876 	bl	8004ae0 <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079f8:	f7fd f872 	bl	8004ae0 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e167      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <HAL_RCC_OscConfig+0x240>)
 8007a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <HAL_RCC_OscConfig+0x200>
 8007a16:	e01b      	b.n	8007a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a18:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <HAL_RCC_OscConfig+0x248>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a1e:	f7fd f85f 	bl	8004ae0 <HAL_GetTick>
 8007a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a24:	e00e      	b.n	8007a44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a26:	f7fd f85b 	bl	8004ae0 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d907      	bls.n	8007a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e150      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
 8007a38:	40023800 	.word	0x40023800
 8007a3c:	42470000 	.word	0x42470000
 8007a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a44:	4b88      	ldr	r3, [pc, #544]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1ea      	bne.n	8007a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 8097 	beq.w	8007b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a62:	4b81      	ldr	r3, [pc, #516]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10f      	bne.n	8007a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	4b7d      	ldr	r3, [pc, #500]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	4a7c      	ldr	r2, [pc, #496]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a7e:	4b7a      	ldr	r3, [pc, #488]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a86:	60bb      	str	r3, [r7, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a8e:	4b77      	ldr	r3, [pc, #476]	; (8007c6c <HAL_RCC_OscConfig+0x474>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d118      	bne.n	8007acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a9a:	4b74      	ldr	r3, [pc, #464]	; (8007c6c <HAL_RCC_OscConfig+0x474>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a73      	ldr	r2, [pc, #460]	; (8007c6c <HAL_RCC_OscConfig+0x474>)
 8007aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007aa6:	f7fd f81b 	bl	8004ae0 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aae:	f7fd f817 	bl	8004ae0 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e10c      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ac0:	4b6a      	ldr	r3, [pc, #424]	; (8007c6c <HAL_RCC_OscConfig+0x474>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0f0      	beq.n	8007aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d106      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x2ea>
 8007ad4:	4b64      	ldr	r3, [pc, #400]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad8:	4a63      	ldr	r2, [pc, #396]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae0:	e01c      	b.n	8007b1c <HAL_RCC_OscConfig+0x324>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	d10c      	bne.n	8007b04 <HAL_RCC_OscConfig+0x30c>
 8007aea:	4b5f      	ldr	r3, [pc, #380]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	4a5e      	ldr	r2, [pc, #376]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007af0:	f043 0304 	orr.w	r3, r3, #4
 8007af4:	6713      	str	r3, [r2, #112]	; 0x70
 8007af6:	4b5c      	ldr	r3, [pc, #368]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	4a5b      	ldr	r2, [pc, #364]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	6713      	str	r3, [r2, #112]	; 0x70
 8007b02:	e00b      	b.n	8007b1c <HAL_RCC_OscConfig+0x324>
 8007b04:	4b58      	ldr	r3, [pc, #352]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	4a57      	ldr	r2, [pc, #348]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007b0a:	f023 0301 	bic.w	r3, r3, #1
 8007b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b10:	4b55      	ldr	r3, [pc, #340]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b14:	4a54      	ldr	r2, [pc, #336]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007b16:	f023 0304 	bic.w	r3, r3, #4
 8007b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d015      	beq.n	8007b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b24:	f7fc ffdc 	bl	8004ae0 <HAL_GetTick>
 8007b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b2a:	e00a      	b.n	8007b42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b2c:	f7fc ffd8 	bl	8004ae0 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e0cb      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b42:	4b49      	ldr	r3, [pc, #292]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0ee      	beq.n	8007b2c <HAL_RCC_OscConfig+0x334>
 8007b4e:	e014      	b.n	8007b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b50:	f7fc ffc6 	bl	8004ae0 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b56:	e00a      	b.n	8007b6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b58:	f7fc ffc2 	bl	8004ae0 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e0b5      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b6e:	4b3e      	ldr	r3, [pc, #248]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1ee      	bne.n	8007b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d105      	bne.n	8007b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b80:	4b39      	ldr	r3, [pc, #228]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	4a38      	ldr	r2, [pc, #224]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 80a1 	beq.w	8007cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b96:	4b34      	ldr	r3, [pc, #208]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 030c 	and.w	r3, r3, #12
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d05c      	beq.n	8007c5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d141      	bne.n	8007c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007baa:	4b31      	ldr	r3, [pc, #196]	; (8007c70 <HAL_RCC_OscConfig+0x478>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb0:	f7fc ff96 	bl	8004ae0 <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bb8:	f7fc ff92 	bl	8004ae0 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e087      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bca:	4b27      	ldr	r3, [pc, #156]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1f0      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69da      	ldr	r2, [r3, #28]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	019b      	lsls	r3, r3, #6
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	061b      	lsls	r3, r3, #24
 8007bfa:	491b      	ldr	r1, [pc, #108]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c00:	4b1b      	ldr	r3, [pc, #108]	; (8007c70 <HAL_RCC_OscConfig+0x478>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c06:	f7fc ff6b 	bl	8004ae0 <HAL_GetTick>
 8007c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c0c:	e008      	b.n	8007c20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c0e:	f7fc ff67 	bl	8004ae0 <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d901      	bls.n	8007c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e05c      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c20:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0f0      	beq.n	8007c0e <HAL_RCC_OscConfig+0x416>
 8007c2c:	e054      	b.n	8007cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c2e:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <HAL_RCC_OscConfig+0x478>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c34:	f7fc ff54 	bl	8004ae0 <HAL_GetTick>
 8007c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c3c:	f7fc ff50 	bl	8004ae0 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e045      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c4e:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <HAL_RCC_OscConfig+0x470>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f0      	bne.n	8007c3c <HAL_RCC_OscConfig+0x444>
 8007c5a:	e03d      	b.n	8007cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d107      	bne.n	8007c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e038      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
 8007c68:	40023800 	.word	0x40023800
 8007c6c:	40007000 	.word	0x40007000
 8007c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c74:	4b1b      	ldr	r3, [pc, #108]	; (8007ce4 <HAL_RCC_OscConfig+0x4ec>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d028      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d121      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d11a      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d111      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d107      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d001      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e000      	b.n	8007cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40023800 	.word	0x40023800

08007ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e0cc      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cfc:	4b68      	ldr	r3, [pc, #416]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d90c      	bls.n	8007d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0a:	4b65      	ldr	r3, [pc, #404]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d12:	4b63      	ldr	r3, [pc, #396]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d001      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0b8      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d020      	beq.n	8007d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d3c:	4b59      	ldr	r3, [pc, #356]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4a58      	ldr	r2, [pc, #352]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d54:	4b53      	ldr	r3, [pc, #332]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	4a52      	ldr	r2, [pc, #328]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d60:	4b50      	ldr	r3, [pc, #320]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	494d      	ldr	r1, [pc, #308]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d044      	beq.n	8007e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d107      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d86:	4b47      	ldr	r3, [pc, #284]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d119      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e07f      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d003      	beq.n	8007da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d107      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007da6:	4b3f      	ldr	r3, [pc, #252]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e06f      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007db6:	4b3b      	ldr	r3, [pc, #236]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e067      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dc6:	4b37      	ldr	r3, [pc, #220]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f023 0203 	bic.w	r2, r3, #3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	4934      	ldr	r1, [pc, #208]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007dd8:	f7fc fe82 	bl	8004ae0 <HAL_GetTick>
 8007ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dde:	e00a      	b.n	8007df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007de0:	f7fc fe7e 	bl	8004ae0 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e04f      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df6:	4b2b      	ldr	r3, [pc, #172]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 020c 	and.w	r2, r3, #12
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d1eb      	bne.n	8007de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d20c      	bcs.n	8007e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1e:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d001      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e032      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e3c:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	4916      	ldr	r1, [pc, #88]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d009      	beq.n	8007e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e5a:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	490e      	ldr	r1, [pc, #56]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e6e:	f000 f821 	bl	8007eb4 <HAL_RCC_GetSysClockFreq>
 8007e72:	4602      	mov	r2, r0
 8007e74:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	091b      	lsrs	r3, r3, #4
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	490a      	ldr	r1, [pc, #40]	; (8007ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8007e80:	5ccb      	ldrb	r3, [r1, r3]
 8007e82:	fa22 f303 	lsr.w	r3, r2, r3
 8007e86:	4a09      	ldr	r2, [pc, #36]	; (8007eac <HAL_RCC_ClockConfig+0x1c4>)
 8007e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e8a:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fc fde2 	bl	8004a58 <HAL_InitTick>

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40023c00 	.word	0x40023c00
 8007ea4:	40023800 	.word	0x40023800
 8007ea8:	0801331c 	.word	0x0801331c
 8007eac:	2000000c 	.word	0x2000000c
 8007eb0:	20000010 	.word	0x20000010

08007eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb8:	b094      	sub	sp, #80	; 0x50
 8007eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ecc:	4b79      	ldr	r3, [pc, #484]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f003 030c 	and.w	r3, r3, #12
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d00d      	beq.n	8007ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	f200 80e1 	bhi.w	80080a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d003      	beq.n	8007eee <HAL_RCC_GetSysClockFreq+0x3a>
 8007ee6:	e0db      	b.n	80080a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ee8:	4b73      	ldr	r3, [pc, #460]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007eea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007eec:	e0db      	b.n	80080a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007eee:	4b73      	ldr	r3, [pc, #460]	; (80080bc <HAL_RCC_GetSysClockFreq+0x208>)
 8007ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ef2:	e0d8      	b.n	80080a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ef4:	4b6f      	ldr	r3, [pc, #444]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007efc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007efe:	4b6d      	ldr	r3, [pc, #436]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d063      	beq.n	8007fd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f0a:	4b6a      	ldr	r3, [pc, #424]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	099b      	lsrs	r3, r3, #6
 8007f10:	2200      	movs	r2, #0
 8007f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f1e:	2300      	movs	r3, #0
 8007f20:	637b      	str	r3, [r7, #52]	; 0x34
 8007f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f26:	4622      	mov	r2, r4
 8007f28:	462b      	mov	r3, r5
 8007f2a:	f04f 0000 	mov.w	r0, #0
 8007f2e:	f04f 0100 	mov.w	r1, #0
 8007f32:	0159      	lsls	r1, r3, #5
 8007f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f38:	0150      	lsls	r0, r2, #5
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4621      	mov	r1, r4
 8007f40:	1a51      	subs	r1, r2, r1
 8007f42:	6139      	str	r1, [r7, #16]
 8007f44:	4629      	mov	r1, r5
 8007f46:	eb63 0301 	sbc.w	r3, r3, r1
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f58:	4659      	mov	r1, fp
 8007f5a:	018b      	lsls	r3, r1, #6
 8007f5c:	4651      	mov	r1, sl
 8007f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f62:	4651      	mov	r1, sl
 8007f64:	018a      	lsls	r2, r1, #6
 8007f66:	4651      	mov	r1, sl
 8007f68:	ebb2 0801 	subs.w	r8, r2, r1
 8007f6c:	4659      	mov	r1, fp
 8007f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f86:	4690      	mov	r8, r2
 8007f88:	4699      	mov	r9, r3
 8007f8a:	4623      	mov	r3, r4
 8007f8c:	eb18 0303 	adds.w	r3, r8, r3
 8007f90:	60bb      	str	r3, [r7, #8]
 8007f92:	462b      	mov	r3, r5
 8007f94:	eb49 0303 	adc.w	r3, r9, r3
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	024b      	lsls	r3, r1, #9
 8007faa:	4621      	mov	r1, r4
 8007fac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	024a      	lsls	r2, r1, #9
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fba:	2200      	movs	r2, #0
 8007fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fc4:	f7f8 fec0 	bl	8000d48 <__aeabi_uldivmod>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4613      	mov	r3, r2
 8007fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd0:	e058      	b.n	8008084 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fd2:	4b38      	ldr	r3, [pc, #224]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	099b      	lsrs	r3, r3, #6
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	4611      	mov	r1, r2
 8007fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007fe2:	623b      	str	r3, [r7, #32]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007fec:	4642      	mov	r2, r8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	f04f 0000 	mov.w	r0, #0
 8007ff4:	f04f 0100 	mov.w	r1, #0
 8007ff8:	0159      	lsls	r1, r3, #5
 8007ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ffe:	0150      	lsls	r0, r2, #5
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4641      	mov	r1, r8
 8008006:	ebb2 0a01 	subs.w	sl, r2, r1
 800800a:	4649      	mov	r1, r9
 800800c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800801c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008024:	ebb2 040a 	subs.w	r4, r2, sl
 8008028:	eb63 050b 	sbc.w	r5, r3, fp
 800802c:	f04f 0200 	mov.w	r2, #0
 8008030:	f04f 0300 	mov.w	r3, #0
 8008034:	00eb      	lsls	r3, r5, #3
 8008036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800803a:	00e2      	lsls	r2, r4, #3
 800803c:	4614      	mov	r4, r2
 800803e:	461d      	mov	r5, r3
 8008040:	4643      	mov	r3, r8
 8008042:	18e3      	adds	r3, r4, r3
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	464b      	mov	r3, r9
 8008048:	eb45 0303 	adc.w	r3, r5, r3
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800805a:	4629      	mov	r1, r5
 800805c:	028b      	lsls	r3, r1, #10
 800805e:	4621      	mov	r1, r4
 8008060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008064:	4621      	mov	r1, r4
 8008066:	028a      	lsls	r2, r1, #10
 8008068:	4610      	mov	r0, r2
 800806a:	4619      	mov	r1, r3
 800806c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800806e:	2200      	movs	r2, #0
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	61fa      	str	r2, [r7, #28]
 8008074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008078:	f7f8 fe66 	bl	8000d48 <__aeabi_uldivmod>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4613      	mov	r3, r2
 8008082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008084:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	3301      	adds	r3, #1
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008098:	fbb2 f3f3 	udiv	r3, r2, r3
 800809c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800809e:	e002      	b.n	80080a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080a0:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80080a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3750      	adds	r7, #80	; 0x50
 80080ac:	46bd      	mov	sp, r7
 80080ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080b2:	bf00      	nop
 80080b4:	40023800 	.word	0x40023800
 80080b8:	00f42400 	.word	0x00f42400
 80080bc:	007a1200 	.word	0x007a1200

080080c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080c4:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80080c6:	681b      	ldr	r3, [r3, #0]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	2000000c 	.word	0x2000000c

080080d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080dc:	f7ff fff0 	bl	80080c0 <HAL_RCC_GetHCLKFreq>
 80080e0:	4602      	mov	r2, r0
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	0a9b      	lsrs	r3, r3, #10
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	4903      	ldr	r1, [pc, #12]	; (80080fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ee:	5ccb      	ldrb	r3, [r1, r3]
 80080f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40023800 	.word	0x40023800
 80080fc:	0801332c 	.word	0x0801332c

08008100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008104:	f7ff ffdc 	bl	80080c0 <HAL_RCC_GetHCLKFreq>
 8008108:	4602      	mov	r2, r0
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	0b5b      	lsrs	r3, r3, #13
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	4903      	ldr	r1, [pc, #12]	; (8008124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008116:	5ccb      	ldrb	r3, [r1, r3]
 8008118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800811c:	4618      	mov	r0, r3
 800811e:	bd80      	pop	{r7, pc}
 8008120:	40023800 	.word	0x40023800
 8008124:	0801332c 	.word	0x0801332c

08008128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10b      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800814c:	2b00      	cmp	r3, #0
 800814e:	d105      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008158:	2b00      	cmp	r3, #0
 800815a:	d075      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800815c:	4b91      	ldr	r3, [pc, #580]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008162:	f7fc fcbd 	bl	8004ae0 <HAL_GetTick>
 8008166:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008168:	e008      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800816a:	f7fc fcb9 	bl	8004ae0 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d901      	bls.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e189      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800817c:	4b8a      	ldr	r3, [pc, #552]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1f0      	bne.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d009      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	019a      	lsls	r2, r3, #6
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	071b      	lsls	r3, r3, #28
 80081a0:	4981      	ldr	r1, [pc, #516]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d01f      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081b4:	4b7c      	ldr	r3, [pc, #496]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ba:	0f1b      	lsrs	r3, r3, #28
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	019a      	lsls	r2, r3, #6
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	061b      	lsls	r3, r3, #24
 80081ce:	431a      	orrs	r2, r3
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	071b      	lsls	r3, r3, #28
 80081d4:	4974      	ldr	r1, [pc, #464]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80081dc:	4b72      	ldr	r3, [pc, #456]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e2:	f023 021f 	bic.w	r2, r3, #31
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	496e      	ldr	r1, [pc, #440]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00d      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	019a      	lsls	r2, r3, #6
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	061b      	lsls	r3, r3, #24
 800820c:	431a      	orrs	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	071b      	lsls	r3, r3, #28
 8008214:	4964      	ldr	r1, [pc, #400]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008216:	4313      	orrs	r3, r2
 8008218:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800821c:	4b61      	ldr	r3, [pc, #388]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800821e:	2201      	movs	r2, #1
 8008220:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008222:	f7fc fc5d 	bl	8004ae0 <HAL_GetTick>
 8008226:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008228:	e008      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800822a:	f7fc fc59 	bl	8004ae0 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b02      	cmp	r3, #2
 8008236:	d901      	bls.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e129      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800823c:	4b5a      	ldr	r3, [pc, #360]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0f0      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800825c:	2b00      	cmp	r3, #0
 800825e:	d079      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008260:	4b52      	ldr	r3, [pc, #328]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008266:	f7fc fc3b 	bl	8004ae0 <HAL_GetTick>
 800826a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800826c:	e008      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800826e:	f7fc fc37 	bl	8004ae0 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e107      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008280:	4b49      	ldr	r3, [pc, #292]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800828c:	d0ef      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	d020      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800829a:	4b43      	ldr	r3, [pc, #268]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800829c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a0:	0f1b      	lsrs	r3, r3, #28
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	019a      	lsls	r2, r3, #6
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	061b      	lsls	r3, r3, #24
 80082b4:	431a      	orrs	r2, r3
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	071b      	lsls	r3, r3, #28
 80082ba:	493b      	ldr	r1, [pc, #236]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80082c2:	4b39      	ldr	r3, [pc, #228]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	021b      	lsls	r3, r3, #8
 80082d4:	4934      	ldr	r1, [pc, #208]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01e      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082e8:	4b2f      	ldr	r3, [pc, #188]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ee:	0e1b      	lsrs	r3, r3, #24
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	019a      	lsls	r2, r3, #6
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	061b      	lsls	r3, r3, #24
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	071b      	lsls	r3, r3, #28
 8008308:	4927      	ldr	r1, [pc, #156]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800830a:	4313      	orrs	r3, r2
 800830c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008310:	4b25      	ldr	r3, [pc, #148]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008316:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	4922      	ldr	r1, [pc, #136]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008320:	4313      	orrs	r3, r2
 8008322:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008326:	4b21      	ldr	r3, [pc, #132]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008328:	2201      	movs	r2, #1
 800832a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800832c:	f7fc fbd8 	bl	8004ae0 <HAL_GetTick>
 8008330:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008332:	e008      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008334:	f7fc fbd4 	bl	8004ae0 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d901      	bls.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e0a4      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008346:	4b18      	ldr	r3, [pc, #96]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800834e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008352:	d1ef      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 808b 	beq.w	8008478 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	4a0f      	ldr	r2, [pc, #60]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800836c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008370:	6413      	str	r3, [r2, #64]	; 0x40
 8008372:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800837e:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a0b      	ldr	r2, [pc, #44]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008388:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800838a:	f7fc fba9 	bl	8004ae0 <HAL_GetTick>
 800838e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008390:	e010      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008392:	f7fc fba5 	bl	8004ae0 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d909      	bls.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e075      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80083a4:	42470068 	.word	0x42470068
 80083a8:	40023800 	.word	0x40023800
 80083ac:	42470070 	.word	0x42470070
 80083b0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083b4:	4b38      	ldr	r3, [pc, #224]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0e8      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083c0:	4b36      	ldr	r3, [pc, #216]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d02f      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d028      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083de:	4b2f      	ldr	r3, [pc, #188]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083e8:	4b2d      	ldr	r3, [pc, #180]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083ee:	4b2c      	ldr	r3, [pc, #176]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80083f4:	4a29      	ldr	r2, [pc, #164]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083fa:	4b28      	ldr	r3, [pc, #160]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b01      	cmp	r3, #1
 8008404:	d114      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008406:	f7fc fb6b 	bl	8004ae0 <HAL_GetTick>
 800840a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800840c:	e00a      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800840e:	f7fc fb67 	bl	8004ae0 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	f241 3288 	movw	r2, #5000	; 0x1388
 800841c:	4293      	cmp	r3, r2
 800841e:	d901      	bls.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e035      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008424:	4b1d      	ldr	r3, [pc, #116]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0ee      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800843c:	d10d      	bne.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800843e:	4b17      	ldr	r3, [pc, #92]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800844e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008452:	4912      	ldr	r1, [pc, #72]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008454:	4313      	orrs	r3, r2
 8008456:	608b      	str	r3, [r1, #8]
 8008458:	e005      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800845a:	4b10      	ldr	r3, [pc, #64]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	4a0f      	ldr	r2, [pc, #60]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008460:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008464:	6093      	str	r3, [r2, #8]
 8008466:	4b0d      	ldr	r3, [pc, #52]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008472:	490a      	ldr	r1, [pc, #40]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008474:	4313      	orrs	r3, r2
 8008476:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0310 	and.w	r3, r3, #16
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800848a:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800848c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	40007000 	.word	0x40007000
 800849c:	40023800 	.word	0x40023800
 80084a0:	42470e40 	.word	0x42470e40
 80084a4:	424711e0 	.word	0x424711e0

080084a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d13e      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80084c6:	4b23      	ldr	r3, [pc, #140]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d005      	beq.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d12f      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80084dc:	4b1e      	ldr	r3, [pc, #120]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80084de:	617b      	str	r3, [r7, #20]
          break;
 80084e0:	e02f      	b.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80084e2:	4b1c      	ldr	r3, [pc, #112]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084ee:	d108      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80084f0:	4b18      	ldr	r3, [pc, #96]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084f8:	4a18      	ldr	r2, [pc, #96]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80084fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fe:	613b      	str	r3, [r7, #16]
 8008500:	e007      	b.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008502:	4b14      	ldr	r3, [pc, #80]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800850a:	4a15      	ldr	r2, [pc, #84]	; (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008512:	4b10      	ldr	r3, [pc, #64]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008518:	099b      	lsrs	r3, r3, #6
 800851a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	fb02 f303 	mul.w	r3, r2, r3
 8008524:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852c:	0f1b      	lsrs	r3, r3, #28
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	fbb2 f3f3 	udiv	r3, r2, r3
 8008538:	617b      	str	r3, [r7, #20]
          break;
 800853a:	e002      	b.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
          break;
 8008540:	bf00      	nop
        }
      }
      break;
 8008542:	bf00      	nop
    }
  }
  return frequency;
 8008544:	697b      	ldr	r3, [r7, #20]
}
 8008546:	4618      	mov	r0, r3
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40023800 	.word	0x40023800
 8008558:	00bb8000 	.word	0x00bb8000
 800855c:	007a1200 	.word	0x007a1200
 8008560:	00f42400 	.word	0x00f42400

08008564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e041      	b.n	80085fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fc f8d8 	bl	8004740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3304      	adds	r3, #4
 80085a0:	4619      	mov	r1, r3
 80085a2:	4610      	mov	r0, r2
 80085a4:	f000 f95e 	bl	8008864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b01      	cmp	r3, #1
 8008616:	d001      	beq.n	800861c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e046      	b.n	80086aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a23      	ldr	r2, [pc, #140]	; (80086b8 <HAL_TIM_Base_Start+0xb4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d022      	beq.n	8008674 <HAL_TIM_Base_Start+0x70>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008636:	d01d      	beq.n	8008674 <HAL_TIM_Base_Start+0x70>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1f      	ldr	r2, [pc, #124]	; (80086bc <HAL_TIM_Base_Start+0xb8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d018      	beq.n	8008674 <HAL_TIM_Base_Start+0x70>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1e      	ldr	r2, [pc, #120]	; (80086c0 <HAL_TIM_Base_Start+0xbc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d013      	beq.n	8008674 <HAL_TIM_Base_Start+0x70>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a1c      	ldr	r2, [pc, #112]	; (80086c4 <HAL_TIM_Base_Start+0xc0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00e      	beq.n	8008674 <HAL_TIM_Base_Start+0x70>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a1b      	ldr	r2, [pc, #108]	; (80086c8 <HAL_TIM_Base_Start+0xc4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d009      	beq.n	8008674 <HAL_TIM_Base_Start+0x70>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a19      	ldr	r2, [pc, #100]	; (80086cc <HAL_TIM_Base_Start+0xc8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d004      	beq.n	8008674 <HAL_TIM_Base_Start+0x70>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a18      	ldr	r2, [pc, #96]	; (80086d0 <HAL_TIM_Base_Start+0xcc>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d111      	bne.n	8008698 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f003 0307 	and.w	r3, r3, #7
 800867e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b06      	cmp	r3, #6
 8008684:	d010      	beq.n	80086a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0201 	orr.w	r2, r2, #1
 8008694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008696:	e007      	b.n	80086a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0201 	orr.w	r2, r2, #1
 80086a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	40010000 	.word	0x40010000
 80086bc:	40000400 	.word	0x40000400
 80086c0:	40000800 	.word	0x40000800
 80086c4:	40000c00 	.word	0x40000c00
 80086c8:	40010400 	.word	0x40010400
 80086cc:	40014000 	.word	0x40014000
 80086d0:	40001800 	.word	0x40001800

080086d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_TIM_ConfigClockSource+0x1c>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e0b4      	b.n	800885a <HAL_TIM_ConfigClockSource+0x186>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800870e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008728:	d03e      	beq.n	80087a8 <HAL_TIM_ConfigClockSource+0xd4>
 800872a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800872e:	f200 8087 	bhi.w	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008736:	f000 8086 	beq.w	8008846 <HAL_TIM_ConfigClockSource+0x172>
 800873a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873e:	d87f      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008740:	2b70      	cmp	r3, #112	; 0x70
 8008742:	d01a      	beq.n	800877a <HAL_TIM_ConfigClockSource+0xa6>
 8008744:	2b70      	cmp	r3, #112	; 0x70
 8008746:	d87b      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008748:	2b60      	cmp	r3, #96	; 0x60
 800874a:	d050      	beq.n	80087ee <HAL_TIM_ConfigClockSource+0x11a>
 800874c:	2b60      	cmp	r3, #96	; 0x60
 800874e:	d877      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008750:	2b50      	cmp	r3, #80	; 0x50
 8008752:	d03c      	beq.n	80087ce <HAL_TIM_ConfigClockSource+0xfa>
 8008754:	2b50      	cmp	r3, #80	; 0x50
 8008756:	d873      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008758:	2b40      	cmp	r3, #64	; 0x40
 800875a:	d058      	beq.n	800880e <HAL_TIM_ConfigClockSource+0x13a>
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d86f      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008760:	2b30      	cmp	r3, #48	; 0x30
 8008762:	d064      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x15a>
 8008764:	2b30      	cmp	r3, #48	; 0x30
 8008766:	d86b      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008768:	2b20      	cmp	r3, #32
 800876a:	d060      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x15a>
 800876c:	2b20      	cmp	r3, #32
 800876e:	d867      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d05c      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x15a>
 8008774:	2b10      	cmp	r3, #16
 8008776:	d05a      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x15a>
 8008778:	e062      	b.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6899      	ldr	r1, [r3, #8]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f000 f985 	bl	8008a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800879c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	609a      	str	r2, [r3, #8]
      break;
 80087a6:	e04f      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	6899      	ldr	r1, [r3, #8]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f000 f96e 	bl	8008a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087ca:	609a      	str	r2, [r3, #8]
      break;
 80087cc:	e03c      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	6859      	ldr	r1, [r3, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	461a      	mov	r2, r3
 80087dc:	f000 f8e2 	bl	80089a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2150      	movs	r1, #80	; 0x50
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f93b 	bl	8008a62 <TIM_ITRx_SetConfig>
      break;
 80087ec:	e02c      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6859      	ldr	r1, [r3, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f000 f901 	bl	8008a02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2160      	movs	r1, #96	; 0x60
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f92b 	bl	8008a62 <TIM_ITRx_SetConfig>
      break;
 800880c:	e01c      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	6859      	ldr	r1, [r3, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	461a      	mov	r2, r3
 800881c:	f000 f8c2 	bl	80089a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2140      	movs	r1, #64	; 0x40
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f91b 	bl	8008a62 <TIM_ITRx_SetConfig>
      break;
 800882c:	e00c      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f000 f912 	bl	8008a62 <TIM_ITRx_SetConfig>
      break;
 800883e:	e003      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
      break;
 8008844:	e000      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a40      	ldr	r2, [pc, #256]	; (8008978 <TIM_Base_SetConfig+0x114>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d013      	beq.n	80088a4 <TIM_Base_SetConfig+0x40>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008882:	d00f      	beq.n	80088a4 <TIM_Base_SetConfig+0x40>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a3d      	ldr	r2, [pc, #244]	; (800897c <TIM_Base_SetConfig+0x118>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d00b      	beq.n	80088a4 <TIM_Base_SetConfig+0x40>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a3c      	ldr	r2, [pc, #240]	; (8008980 <TIM_Base_SetConfig+0x11c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d007      	beq.n	80088a4 <TIM_Base_SetConfig+0x40>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a3b      	ldr	r2, [pc, #236]	; (8008984 <TIM_Base_SetConfig+0x120>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d003      	beq.n	80088a4 <TIM_Base_SetConfig+0x40>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a3a      	ldr	r2, [pc, #232]	; (8008988 <TIM_Base_SetConfig+0x124>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d108      	bne.n	80088b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a2f      	ldr	r2, [pc, #188]	; (8008978 <TIM_Base_SetConfig+0x114>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d02b      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c4:	d027      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a2c      	ldr	r2, [pc, #176]	; (800897c <TIM_Base_SetConfig+0x118>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d023      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a2b      	ldr	r2, [pc, #172]	; (8008980 <TIM_Base_SetConfig+0x11c>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d01f      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a2a      	ldr	r2, [pc, #168]	; (8008984 <TIM_Base_SetConfig+0x120>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d01b      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a29      	ldr	r2, [pc, #164]	; (8008988 <TIM_Base_SetConfig+0x124>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d017      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a28      	ldr	r2, [pc, #160]	; (800898c <TIM_Base_SetConfig+0x128>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d013      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a27      	ldr	r2, [pc, #156]	; (8008990 <TIM_Base_SetConfig+0x12c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00f      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a26      	ldr	r2, [pc, #152]	; (8008994 <TIM_Base_SetConfig+0x130>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00b      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a25      	ldr	r2, [pc, #148]	; (8008998 <TIM_Base_SetConfig+0x134>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d007      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a24      	ldr	r2, [pc, #144]	; (800899c <TIM_Base_SetConfig+0x138>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d003      	beq.n	8008916 <TIM_Base_SetConfig+0xb2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a23      	ldr	r2, [pc, #140]	; (80089a0 <TIM_Base_SetConfig+0x13c>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d108      	bne.n	8008928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800891c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	4313      	orrs	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	4313      	orrs	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a0a      	ldr	r2, [pc, #40]	; (8008978 <TIM_Base_SetConfig+0x114>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d003      	beq.n	800895c <TIM_Base_SetConfig+0xf8>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a0c      	ldr	r2, [pc, #48]	; (8008988 <TIM_Base_SetConfig+0x124>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d103      	bne.n	8008964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	691a      	ldr	r2, [r3, #16]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	615a      	str	r2, [r3, #20]
}
 800896a:	bf00      	nop
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	40010000 	.word	0x40010000
 800897c:	40000400 	.word	0x40000400
 8008980:	40000800 	.word	0x40000800
 8008984:	40000c00 	.word	0x40000c00
 8008988:	40010400 	.word	0x40010400
 800898c:	40014000 	.word	0x40014000
 8008990:	40014400 	.word	0x40014400
 8008994:	40014800 	.word	0x40014800
 8008998:	40001800 	.word	0x40001800
 800899c:	40001c00 	.word	0x40001c00
 80089a0:	40002000 	.word	0x40002000

080089a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	f023 0201 	bic.w	r2, r3, #1
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f023 030a 	bic.w	r3, r3, #10
 80089e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	621a      	str	r2, [r3, #32]
}
 80089f6:	bf00      	nop
 80089f8:	371c      	adds	r7, #28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b087      	sub	sp, #28
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	f023 0210 	bic.w	r2, r3, #16
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	031b      	lsls	r3, r3, #12
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	621a      	str	r2, [r3, #32]
}
 8008a56:	bf00      	nop
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	f043 0307 	orr.w	r3, r3, #7
 8008a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	609a      	str	r2, [r3, #8]
}
 8008a8c:	bf00      	nop
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	021a      	lsls	r2, r3, #8
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	609a      	str	r2, [r3, #8]
}
 8008acc:	bf00      	nop
 8008ace:	371c      	adds	r7, #28
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e05a      	b.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a21      	ldr	r2, [pc, #132]	; (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d022      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3c:	d01d      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a1d      	ldr	r2, [pc, #116]	; (8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d018      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1b      	ldr	r2, [pc, #108]	; (8008bbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d013      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1a      	ldr	r2, [pc, #104]	; (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d00e      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a18      	ldr	r2, [pc, #96]	; (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d009      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a17      	ldr	r2, [pc, #92]	; (8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d004      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a15      	ldr	r2, [pc, #84]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d10c      	bne.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40000400 	.word	0x40000400
 8008bbc:	40000800 	.word	0x40000800
 8008bc0:	40000c00 	.word	0x40000c00
 8008bc4:	40010400 	.word	0x40010400
 8008bc8:	40014000 	.word	0x40014000
 8008bcc:	40001800 	.word	0x40001800

08008bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e03f      	b.n	8008c62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d106      	bne.n	8008bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7fb fdc4 	bl	8004784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2224      	movs	r2, #36	; 0x24
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f929 	bl	8008e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	691a      	ldr	r2, [r3, #16]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695a      	ldr	r2, [r3, #20]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68da      	ldr	r2, [r3, #12]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b08a      	sub	sp, #40	; 0x28
 8008c6e:	af02      	add	r7, sp, #8
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	603b      	str	r3, [r7, #0]
 8008c76:	4613      	mov	r3, r2
 8008c78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	d17c      	bne.n	8008d84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <HAL_UART_Transmit+0x2c>
 8008c90:	88fb      	ldrh	r3, [r7, #6]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e075      	b.n	8008d86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d101      	bne.n	8008ca8 <HAL_UART_Transmit+0x3e>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e06e      	b.n	8008d86 <HAL_UART_Transmit+0x11c>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2221      	movs	r2, #33	; 0x21
 8008cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cbe:	f7fb ff0f 	bl	8004ae0 <HAL_GetTick>
 8008cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	88fa      	ldrh	r2, [r7, #6]
 8008cce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd8:	d108      	bne.n	8008cec <HAL_UART_Transmit+0x82>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d104      	bne.n	8008cec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	61bb      	str	r3, [r7, #24]
 8008cea:	e003      	b.n	8008cf4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008cfc:	e02a      	b.n	8008d54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2200      	movs	r2, #0
 8008d06:	2180      	movs	r1, #128	; 0x80
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f840 	bl	8008d8e <UART_WaitOnFlagUntilTimeout>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e036      	b.n	8008d86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10b      	bne.n	8008d36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	3302      	adds	r3, #2
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	e007      	b.n	8008d46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	781a      	ldrb	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	3301      	adds	r3, #1
 8008d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1cf      	bne.n	8008cfe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2200      	movs	r2, #0
 8008d66:	2140      	movs	r1, #64	; 0x40
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 f810 	bl	8008d8e <UART_WaitOnFlagUntilTimeout>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e006      	b.n	8008d86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	e000      	b.n	8008d86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d84:	2302      	movs	r3, #2
  }
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3720      	adds	r7, #32
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b090      	sub	sp, #64	; 0x40
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	60f8      	str	r0, [r7, #12]
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	603b      	str	r3, [r7, #0]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d9e:	e050      	b.n	8008e42 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d04c      	beq.n	8008e42 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d007      	beq.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x30>
 8008dae:	f7fb fe97 	bl	8004ae0 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d241      	bcs.n	8008e42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	330c      	adds	r3, #12
 8008dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	330c      	adds	r3, #12
 8008ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dde:	637a      	str	r2, [r7, #52]	; 0x34
 8008de0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e5      	bne.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3314      	adds	r3, #20
 8008df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	613b      	str	r3, [r7, #16]
   return(result);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3314      	adds	r3, #20
 8008e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e12:	623a      	str	r2, [r7, #32]
 8008e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	69f9      	ldr	r1, [r7, #28]
 8008e18:	6a3a      	ldr	r2, [r7, #32]
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e5      	bne.n	8008df2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2220      	movs	r2, #32
 8008e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e00f      	b.n	8008e62 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	bf0c      	ite	eq
 8008e52:	2301      	moveq	r3, #1
 8008e54:	2300      	movne	r3, #0
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	461a      	mov	r2, r3
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d09f      	beq.n	8008da0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3740      	adds	r7, #64	; 0x40
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e70:	b0c0      	sub	sp, #256	; 0x100
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e88:	68d9      	ldr	r1, [r3, #12]
 8008e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	ea40 0301 	orr.w	r3, r0, r1
 8008e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9a:	689a      	ldr	r2, [r3, #8]
 8008e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ec4:	f021 010c 	bic.w	r1, r1, #12
 8008ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee6:	6999      	ldr	r1, [r3, #24]
 8008ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	ea40 0301 	orr.w	r3, r0, r1
 8008ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	4b8f      	ldr	r3, [pc, #572]	; (8009138 <UART_SetConfig+0x2cc>)
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d005      	beq.n	8008f0c <UART_SetConfig+0xa0>
 8008f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	4b8d      	ldr	r3, [pc, #564]	; (800913c <UART_SetConfig+0x2d0>)
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d104      	bne.n	8008f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f0c:	f7ff f8f8 	bl	8008100 <HAL_RCC_GetPCLK2Freq>
 8008f10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f14:	e003      	b.n	8008f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f16:	f7ff f8df 	bl	80080d8 <HAL_RCC_GetPCLK1Freq>
 8008f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f28:	f040 810c 	bne.w	8009144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f3e:	4622      	mov	r2, r4
 8008f40:	462b      	mov	r3, r5
 8008f42:	1891      	adds	r1, r2, r2
 8008f44:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f46:	415b      	adcs	r3, r3
 8008f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f4e:	4621      	mov	r1, r4
 8008f50:	eb12 0801 	adds.w	r8, r2, r1
 8008f54:	4629      	mov	r1, r5
 8008f56:	eb43 0901 	adc.w	r9, r3, r1
 8008f5a:	f04f 0200 	mov.w	r2, #0
 8008f5e:	f04f 0300 	mov.w	r3, #0
 8008f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f6e:	4690      	mov	r8, r2
 8008f70:	4699      	mov	r9, r3
 8008f72:	4623      	mov	r3, r4
 8008f74:	eb18 0303 	adds.w	r3, r8, r3
 8008f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f7c:	462b      	mov	r3, r5
 8008f7e:	eb49 0303 	adc.w	r3, r9, r3
 8008f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	18db      	adds	r3, r3, r3
 8008f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	eb42 0303 	adc.w	r3, r2, r3
 8008fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8008fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008fb0:	f7f7 feca 	bl	8000d48 <__aeabi_uldivmod>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4b61      	ldr	r3, [pc, #388]	; (8009140 <UART_SetConfig+0x2d4>)
 8008fba:	fba3 2302 	umull	r2, r3, r3, r2
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	011c      	lsls	r4, r3, #4
 8008fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	1891      	adds	r1, r2, r2
 8008fda:	64b9      	str	r1, [r7, #72]	; 0x48
 8008fdc:	415b      	adcs	r3, r3
 8008fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008fe4:	4641      	mov	r1, r8
 8008fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8008fea:	4649      	mov	r1, r9
 8008fec:	eb43 0b01 	adc.w	fp, r3, r1
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	f04f 0300 	mov.w	r3, #0
 8008ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009004:	4692      	mov	sl, r2
 8009006:	469b      	mov	fp, r3
 8009008:	4643      	mov	r3, r8
 800900a:	eb1a 0303 	adds.w	r3, sl, r3
 800900e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009012:	464b      	mov	r3, r9
 8009014:	eb4b 0303 	adc.w	r3, fp, r3
 8009018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800901c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009028:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800902c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009030:	460b      	mov	r3, r1
 8009032:	18db      	adds	r3, r3, r3
 8009034:	643b      	str	r3, [r7, #64]	; 0x40
 8009036:	4613      	mov	r3, r2
 8009038:	eb42 0303 	adc.w	r3, r2, r3
 800903c:	647b      	str	r3, [r7, #68]	; 0x44
 800903e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009046:	f7f7 fe7f 	bl	8000d48 <__aeabi_uldivmod>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4611      	mov	r1, r2
 8009050:	4b3b      	ldr	r3, [pc, #236]	; (8009140 <UART_SetConfig+0x2d4>)
 8009052:	fba3 2301 	umull	r2, r3, r3, r1
 8009056:	095b      	lsrs	r3, r3, #5
 8009058:	2264      	movs	r2, #100	; 0x64
 800905a:	fb02 f303 	mul.w	r3, r2, r3
 800905e:	1acb      	subs	r3, r1, r3
 8009060:	00db      	lsls	r3, r3, #3
 8009062:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009066:	4b36      	ldr	r3, [pc, #216]	; (8009140 <UART_SetConfig+0x2d4>)
 8009068:	fba3 2302 	umull	r2, r3, r3, r2
 800906c:	095b      	lsrs	r3, r3, #5
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009074:	441c      	add	r4, r3
 8009076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800907a:	2200      	movs	r2, #0
 800907c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009080:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009088:	4642      	mov	r2, r8
 800908a:	464b      	mov	r3, r9
 800908c:	1891      	adds	r1, r2, r2
 800908e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009090:	415b      	adcs	r3, r3
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009098:	4641      	mov	r1, r8
 800909a:	1851      	adds	r1, r2, r1
 800909c:	6339      	str	r1, [r7, #48]	; 0x30
 800909e:	4649      	mov	r1, r9
 80090a0:	414b      	adcs	r3, r1
 80090a2:	637b      	str	r3, [r7, #52]	; 0x34
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80090b0:	4659      	mov	r1, fp
 80090b2:	00cb      	lsls	r3, r1, #3
 80090b4:	4651      	mov	r1, sl
 80090b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090ba:	4651      	mov	r1, sl
 80090bc:	00ca      	lsls	r2, r1, #3
 80090be:	4610      	mov	r0, r2
 80090c0:	4619      	mov	r1, r3
 80090c2:	4603      	mov	r3, r0
 80090c4:	4642      	mov	r2, r8
 80090c6:	189b      	adds	r3, r3, r2
 80090c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090cc:	464b      	mov	r3, r9
 80090ce:	460a      	mov	r2, r1
 80090d0:	eb42 0303 	adc.w	r3, r2, r3
 80090d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80090e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80090ec:	460b      	mov	r3, r1
 80090ee:	18db      	adds	r3, r3, r3
 80090f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80090f2:	4613      	mov	r3, r2
 80090f4:	eb42 0303 	adc.w	r3, r2, r3
 80090f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009102:	f7f7 fe21 	bl	8000d48 <__aeabi_uldivmod>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <UART_SetConfig+0x2d4>)
 800910c:	fba3 1302 	umull	r1, r3, r3, r2
 8009110:	095b      	lsrs	r3, r3, #5
 8009112:	2164      	movs	r1, #100	; 0x64
 8009114:	fb01 f303 	mul.w	r3, r1, r3
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	3332      	adds	r3, #50	; 0x32
 800911e:	4a08      	ldr	r2, [pc, #32]	; (8009140 <UART_SetConfig+0x2d4>)
 8009120:	fba2 2303 	umull	r2, r3, r2, r3
 8009124:	095b      	lsrs	r3, r3, #5
 8009126:	f003 0207 	and.w	r2, r3, #7
 800912a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4422      	add	r2, r4
 8009132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009134:	e106      	b.n	8009344 <UART_SetConfig+0x4d8>
 8009136:	bf00      	nop
 8009138:	40011000 	.word	0x40011000
 800913c:	40011400 	.word	0x40011400
 8009140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009148:	2200      	movs	r2, #0
 800914a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800914e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009156:	4642      	mov	r2, r8
 8009158:	464b      	mov	r3, r9
 800915a:	1891      	adds	r1, r2, r2
 800915c:	6239      	str	r1, [r7, #32]
 800915e:	415b      	adcs	r3, r3
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
 8009162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009166:	4641      	mov	r1, r8
 8009168:	1854      	adds	r4, r2, r1
 800916a:	4649      	mov	r1, r9
 800916c:	eb43 0501 	adc.w	r5, r3, r1
 8009170:	f04f 0200 	mov.w	r2, #0
 8009174:	f04f 0300 	mov.w	r3, #0
 8009178:	00eb      	lsls	r3, r5, #3
 800917a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800917e:	00e2      	lsls	r2, r4, #3
 8009180:	4614      	mov	r4, r2
 8009182:	461d      	mov	r5, r3
 8009184:	4643      	mov	r3, r8
 8009186:	18e3      	adds	r3, r4, r3
 8009188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800918c:	464b      	mov	r3, r9
 800918e:	eb45 0303 	adc.w	r3, r5, r3
 8009192:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	f04f 0300 	mov.w	r3, #0
 80091ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80091b2:	4629      	mov	r1, r5
 80091b4:	008b      	lsls	r3, r1, #2
 80091b6:	4621      	mov	r1, r4
 80091b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091bc:	4621      	mov	r1, r4
 80091be:	008a      	lsls	r2, r1, #2
 80091c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80091c4:	f7f7 fdc0 	bl	8000d48 <__aeabi_uldivmod>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4b60      	ldr	r3, [pc, #384]	; (8009350 <UART_SetConfig+0x4e4>)
 80091ce:	fba3 2302 	umull	r2, r3, r3, r2
 80091d2:	095b      	lsrs	r3, r3, #5
 80091d4:	011c      	lsls	r4, r3, #4
 80091d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80091e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80091e8:	4642      	mov	r2, r8
 80091ea:	464b      	mov	r3, r9
 80091ec:	1891      	adds	r1, r2, r2
 80091ee:	61b9      	str	r1, [r7, #24]
 80091f0:	415b      	adcs	r3, r3
 80091f2:	61fb      	str	r3, [r7, #28]
 80091f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091f8:	4641      	mov	r1, r8
 80091fa:	1851      	adds	r1, r2, r1
 80091fc:	6139      	str	r1, [r7, #16]
 80091fe:	4649      	mov	r1, r9
 8009200:	414b      	adcs	r3, r1
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	f04f 0300 	mov.w	r3, #0
 800920c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009210:	4659      	mov	r1, fp
 8009212:	00cb      	lsls	r3, r1, #3
 8009214:	4651      	mov	r1, sl
 8009216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800921a:	4651      	mov	r1, sl
 800921c:	00ca      	lsls	r2, r1, #3
 800921e:	4610      	mov	r0, r2
 8009220:	4619      	mov	r1, r3
 8009222:	4603      	mov	r3, r0
 8009224:	4642      	mov	r2, r8
 8009226:	189b      	adds	r3, r3, r2
 8009228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800922c:	464b      	mov	r3, r9
 800922e:	460a      	mov	r2, r1
 8009230:	eb42 0303 	adc.w	r3, r2, r3
 8009234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	67bb      	str	r3, [r7, #120]	; 0x78
 8009242:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009244:	f04f 0200 	mov.w	r2, #0
 8009248:	f04f 0300 	mov.w	r3, #0
 800924c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009250:	4649      	mov	r1, r9
 8009252:	008b      	lsls	r3, r1, #2
 8009254:	4641      	mov	r1, r8
 8009256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800925a:	4641      	mov	r1, r8
 800925c:	008a      	lsls	r2, r1, #2
 800925e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009262:	f7f7 fd71 	bl	8000d48 <__aeabi_uldivmod>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4611      	mov	r1, r2
 800926c:	4b38      	ldr	r3, [pc, #224]	; (8009350 <UART_SetConfig+0x4e4>)
 800926e:	fba3 2301 	umull	r2, r3, r3, r1
 8009272:	095b      	lsrs	r3, r3, #5
 8009274:	2264      	movs	r2, #100	; 0x64
 8009276:	fb02 f303 	mul.w	r3, r2, r3
 800927a:	1acb      	subs	r3, r1, r3
 800927c:	011b      	lsls	r3, r3, #4
 800927e:	3332      	adds	r3, #50	; 0x32
 8009280:	4a33      	ldr	r2, [pc, #204]	; (8009350 <UART_SetConfig+0x4e4>)
 8009282:	fba2 2303 	umull	r2, r3, r2, r3
 8009286:	095b      	lsrs	r3, r3, #5
 8009288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800928c:	441c      	add	r4, r3
 800928e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009292:	2200      	movs	r2, #0
 8009294:	673b      	str	r3, [r7, #112]	; 0x70
 8009296:	677a      	str	r2, [r7, #116]	; 0x74
 8009298:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800929c:	4642      	mov	r2, r8
 800929e:	464b      	mov	r3, r9
 80092a0:	1891      	adds	r1, r2, r2
 80092a2:	60b9      	str	r1, [r7, #8]
 80092a4:	415b      	adcs	r3, r3
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092ac:	4641      	mov	r1, r8
 80092ae:	1851      	adds	r1, r2, r1
 80092b0:	6039      	str	r1, [r7, #0]
 80092b2:	4649      	mov	r1, r9
 80092b4:	414b      	adcs	r3, r1
 80092b6:	607b      	str	r3, [r7, #4]
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	f04f 0300 	mov.w	r3, #0
 80092c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092c4:	4659      	mov	r1, fp
 80092c6:	00cb      	lsls	r3, r1, #3
 80092c8:	4651      	mov	r1, sl
 80092ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ce:	4651      	mov	r1, sl
 80092d0:	00ca      	lsls	r2, r1, #3
 80092d2:	4610      	mov	r0, r2
 80092d4:	4619      	mov	r1, r3
 80092d6:	4603      	mov	r3, r0
 80092d8:	4642      	mov	r2, r8
 80092da:	189b      	adds	r3, r3, r2
 80092dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80092de:	464b      	mov	r3, r9
 80092e0:	460a      	mov	r2, r1
 80092e2:	eb42 0303 	adc.w	r3, r2, r3
 80092e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	663b      	str	r3, [r7, #96]	; 0x60
 80092f2:	667a      	str	r2, [r7, #100]	; 0x64
 80092f4:	f04f 0200 	mov.w	r2, #0
 80092f8:	f04f 0300 	mov.w	r3, #0
 80092fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009300:	4649      	mov	r1, r9
 8009302:	008b      	lsls	r3, r1, #2
 8009304:	4641      	mov	r1, r8
 8009306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800930a:	4641      	mov	r1, r8
 800930c:	008a      	lsls	r2, r1, #2
 800930e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009312:	f7f7 fd19 	bl	8000d48 <__aeabi_uldivmod>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <UART_SetConfig+0x4e4>)
 800931c:	fba3 1302 	umull	r1, r3, r3, r2
 8009320:	095b      	lsrs	r3, r3, #5
 8009322:	2164      	movs	r1, #100	; 0x64
 8009324:	fb01 f303 	mul.w	r3, r1, r3
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	011b      	lsls	r3, r3, #4
 800932c:	3332      	adds	r3, #50	; 0x32
 800932e:	4a08      	ldr	r2, [pc, #32]	; (8009350 <UART_SetConfig+0x4e4>)
 8009330:	fba2 2303 	umull	r2, r3, r2, r3
 8009334:	095b      	lsrs	r3, r3, #5
 8009336:	f003 020f 	and.w	r2, r3, #15
 800933a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4422      	add	r2, r4
 8009342:	609a      	str	r2, [r3, #8]
}
 8009344:	bf00      	nop
 8009346:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800934a:	46bd      	mov	sp, r7
 800934c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009350:	51eb851f 	.word	0x51eb851f

08009354 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009354:	b084      	sub	sp, #16
 8009356:	b580      	push	{r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	f107 001c 	add.w	r0, r7, #28
 8009362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	2b01      	cmp	r3, #1
 800936a:	d122      	bne.n	80093b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009396:	2b01      	cmp	r3, #1
 8009398:	d105      	bne.n	80093a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 faa2 	bl	80098f0 <USB_CoreReset>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]
 80093b0:	e01a      	b.n	80093e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fa96 	bl	80098f0 <USB_CoreReset>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80093c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d106      	bne.n	80093dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	639a      	str	r2, [r3, #56]	; 0x38
 80093da:	e005      	b.n	80093e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d10b      	bne.n	8009406 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f043 0206 	orr.w	r2, r3, #6
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f043 0220 	orr.w	r2, r3, #32
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009406:	7bfb      	ldrb	r3, [r7, #15]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009412:	b004      	add	sp, #16
 8009414:	4770      	bx	lr

08009416 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009416:	b480      	push	{r7}
 8009418:	b083      	sub	sp, #12
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f023 0201 	bic.w	r2, r3, #1
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d115      	bne.n	8009486 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009466:	2001      	movs	r0, #1
 8009468:	f7fb fb46 	bl	8004af8 <HAL_Delay>
      ms++;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	3301      	adds	r3, #1
 8009470:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa2e 	bl	80098d4 <USB_GetMode>
 8009478:	4603      	mov	r3, r0
 800947a:	2b01      	cmp	r3, #1
 800947c:	d01e      	beq.n	80094bc <USB_SetCurrentMode+0x84>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b31      	cmp	r3, #49	; 0x31
 8009482:	d9f0      	bls.n	8009466 <USB_SetCurrentMode+0x2e>
 8009484:	e01a      	b.n	80094bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d115      	bne.n	80094b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009498:	2001      	movs	r0, #1
 800949a:	f7fb fb2d 	bl	8004af8 <HAL_Delay>
      ms++;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3301      	adds	r3, #1
 80094a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fa15 	bl	80098d4 <USB_GetMode>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d005      	beq.n	80094bc <USB_SetCurrentMode+0x84>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b31      	cmp	r3, #49	; 0x31
 80094b4:	d9f0      	bls.n	8009498 <USB_SetCurrentMode+0x60>
 80094b6:	e001      	b.n	80094bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e005      	b.n	80094c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b32      	cmp	r3, #50	; 0x32
 80094c0:	d101      	bne.n	80094c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e000      	b.n	80094c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094d0:	b084      	sub	sp, #16
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b086      	sub	sp, #24
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80094ea:	2300      	movs	r3, #0
 80094ec:	613b      	str	r3, [r7, #16]
 80094ee:	e009      	b.n	8009504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	3340      	adds	r3, #64	; 0x40
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	2200      	movs	r2, #0
 80094fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	3301      	adds	r3, #1
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	2b0e      	cmp	r3, #14
 8009508:	d9f2      	bls.n	80094f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800950a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800950c:	2b00      	cmp	r3, #0
 800950e:	d11c      	bne.n	800954a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800951e:	f043 0302 	orr.w	r3, r3, #2
 8009522:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009534:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009540:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	639a      	str	r2, [r3, #56]	; 0x38
 8009548:	e00b      	b.n	8009562 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009568:	461a      	mov	r2, r3
 800956a:	2300      	movs	r3, #0
 800956c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009574:	4619      	mov	r1, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800957c:	461a      	mov	r2, r3
 800957e:	680b      	ldr	r3, [r1, #0]
 8009580:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	2b01      	cmp	r3, #1
 8009586:	d10c      	bne.n	80095a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d104      	bne.n	8009598 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800958e:	2100      	movs	r1, #0
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f965 	bl	8009860 <USB_SetDevSpeed>
 8009596:	e008      	b.n	80095aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009598:	2101      	movs	r1, #1
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f960 	bl	8009860 <USB_SetDevSpeed>
 80095a0:	e003      	b.n	80095aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095a2:	2103      	movs	r1, #3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f95b 	bl	8009860 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095aa:	2110      	movs	r1, #16
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f8f3 	bl	8009798 <USB_FlushTxFifo>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f91f 	bl	8009800 <USB_FlushRxFifo>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d2:	461a      	mov	r2, r3
 80095d4:	2300      	movs	r3, #0
 80095d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095de:	461a      	mov	r2, r3
 80095e0:	2300      	movs	r3, #0
 80095e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	461a      	mov	r2, r3
 80095ec:	2300      	movs	r3, #0
 80095ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095f0:	2300      	movs	r3, #0
 80095f2:	613b      	str	r3, [r7, #16]
 80095f4:	e043      	b.n	800967e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800960c:	d118      	bne.n	8009640 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009620:	461a      	mov	r2, r3
 8009622:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	e013      	b.n	8009652 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009636:	461a      	mov	r2, r3
 8009638:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	e008      	b.n	8009652 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800964c:	461a      	mov	r2, r3
 800964e:	2300      	movs	r3, #0
 8009650:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4413      	add	r3, r2
 800965a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965e:	461a      	mov	r2, r3
 8009660:	2300      	movs	r3, #0
 8009662:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009670:	461a      	mov	r2, r3
 8009672:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009676:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	3301      	adds	r3, #1
 800967c:	613b      	str	r3, [r7, #16]
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	429a      	cmp	r2, r3
 8009684:	d3b7      	bcc.n	80095f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009686:	2300      	movs	r3, #0
 8009688:	613b      	str	r3, [r7, #16]
 800968a:	e043      	b.n	8009714 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800969e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096a2:	d118      	bne.n	80096d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b6:	461a      	mov	r2, r3
 80096b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096bc:	6013      	str	r3, [r2, #0]
 80096be:	e013      	b.n	80096e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096cc:	461a      	mov	r2, r3
 80096ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	e008      	b.n	80096e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e2:	461a      	mov	r2, r3
 80096e4:	2300      	movs	r3, #0
 80096e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f4:	461a      	mov	r2, r3
 80096f6:	2300      	movs	r3, #0
 80096f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009706:	461a      	mov	r2, r3
 8009708:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800970c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	3301      	adds	r3, #1
 8009712:	613b      	str	r3, [r7, #16]
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	429a      	cmp	r2, r3
 800971a:	d3b7      	bcc.n	800968c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800972a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800972e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800973c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	2b00      	cmp	r3, #0
 8009742:	d105      	bne.n	8009750 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	f043 0210 	orr.w	r2, r3, #16
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	699a      	ldr	r2, [r3, #24]
 8009754:	4b0f      	ldr	r3, [pc, #60]	; (8009794 <USB_DevInit+0x2c4>)
 8009756:	4313      	orrs	r3, r2
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800975c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	f043 0208 	orr.w	r2, r3, #8
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800976e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009770:	2b01      	cmp	r3, #1
 8009772:	d107      	bne.n	8009784 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800977c:	f043 0304 	orr.w	r3, r3, #4
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009790:	b004      	add	sp, #16
 8009792:	4770      	bx	lr
 8009794:	803c3800 	.word	0x803c3800

08009798 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3301      	adds	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4a13      	ldr	r2, [pc, #76]	; (80097fc <USB_FlushTxFifo+0x64>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d901      	bls.n	80097b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e01b      	b.n	80097f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	daf2      	bge.n	80097a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	019b      	lsls	r3, r3, #6
 80097c8:	f043 0220 	orr.w	r2, r3, #32
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3301      	adds	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4a08      	ldr	r2, [pc, #32]	; (80097fc <USB_FlushTxFifo+0x64>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d901      	bls.n	80097e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e006      	b.n	80097f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	d0f0      	beq.n	80097d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	00030d40 	.word	0x00030d40

08009800 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3301      	adds	r3, #1
 8009810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4a11      	ldr	r2, [pc, #68]	; (800985c <USB_FlushRxFifo+0x5c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d901      	bls.n	800981e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e018      	b.n	8009850 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	daf2      	bge.n	800980c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009826:	2300      	movs	r3, #0
 8009828:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2210      	movs	r2, #16
 800982e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3301      	adds	r3, #1
 8009834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	4a08      	ldr	r2, [pc, #32]	; (800985c <USB_FlushRxFifo+0x5c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d901      	bls.n	8009842 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e006      	b.n	8009850 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	f003 0310 	and.w	r3, r3, #16
 800984a:	2b10      	cmp	r3, #16
 800984c:	d0f0      	beq.n	8009830 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	00030d40 	.word	0x00030d40

08009860 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	68f9      	ldr	r1, [r7, #12]
 800987c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009880:	4313      	orrs	r3, r2
 8009882:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009892:	b480      	push	{r7}
 8009894:	b085      	sub	sp, #20
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098ac:	f023 0303 	bic.w	r3, r3, #3
 80098b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098c0:	f043 0302 	orr.w	r3, r3, #2
 80098c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	f003 0301 	and.w	r3, r3, #1
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a13      	ldr	r2, [pc, #76]	; (8009954 <USB_CoreReset+0x64>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d901      	bls.n	800990e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e01b      	b.n	8009946 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	daf2      	bge.n	80098fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f043 0201 	orr.w	r2, r3, #1
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3301      	adds	r3, #1
 800992a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4a09      	ldr	r2, [pc, #36]	; (8009954 <USB_CoreReset+0x64>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d901      	bls.n	8009938 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e006      	b.n	8009946 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b01      	cmp	r3, #1
 8009942:	d0f0      	beq.n	8009926 <USB_CoreReset+0x36>

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	00030d40 	.word	0x00030d40

08009958 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	2101      	movs	r1, #1
 8009966:	4833      	ldr	r0, [pc, #204]	; (8009a34 <network_configure_activations+0xdc>)
 8009968:	f000 fadc 	bl	8009f24 <ai_platform_get_activations_map>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d055      	beq.n	8009a1e <network_configure_activations+0xc6>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8009972:	4b30      	ldr	r3, [pc, #192]	; (8009a34 <network_configure_activations+0xdc>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a30      	ldr	r2, [pc, #192]	; (8009a38 <network_configure_activations+0xe0>)
 8009978:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800997a:	4b2e      	ldr	r3, [pc, #184]	; (8009a34 <network_configure_activations+0xdc>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a2e      	ldr	r2, [pc, #184]	; (8009a38 <network_configure_activations+0xe0>)
 8009980:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1920);
 8009982:	4b2c      	ldr	r3, [pc, #176]	; (8009a34 <network_configure_activations+0xdc>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800998a:	4a2c      	ldr	r2, [pc, #176]	; (8009a3c <network_configure_activations+0xe4>)
 800998c:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1920);
 800998e:	4b29      	ldr	r3, [pc, #164]	; (8009a34 <network_configure_activations+0xdc>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 8009996:	4a29      	ldr	r2, [pc, #164]	; (8009a3c <network_configure_activations+0xe4>)
 8009998:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 1920);
 800999a:	4b26      	ldr	r3, [pc, #152]	; (8009a34 <network_configure_activations+0xdc>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80099a2:	4a27      	ldr	r2, [pc, #156]	; (8009a40 <network_configure_activations+0xe8>)
 80099a4:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1920);
 80099a6:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <network_configure_activations+0xdc>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80099ae:	4a24      	ldr	r2, [pc, #144]	; (8009a40 <network_configure_activations+0xe8>)
 80099b0:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 1408);
 80099b2:	4b20      	ldr	r3, [pc, #128]	; (8009a34 <network_configure_activations+0xdc>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80099ba:	4a22      	ldr	r2, [pc, #136]	; (8009a44 <network_configure_activations+0xec>)
 80099bc:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1408);
 80099be:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <network_configure_activations+0xdc>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80099c6:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <network_configure_activations+0xec>)
 80099c8:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80099ca:	4b1a      	ldr	r3, [pc, #104]	; (8009a34 <network_configure_activations+0xdc>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <network_configure_activations+0xf0>)
 80099d0:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80099d2:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <network_configure_activations+0xdc>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a1c      	ldr	r2, [pc, #112]	; (8009a48 <network_configure_activations+0xf0>)
 80099d8:	60d3      	str	r3, [r2, #12]
    
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 1152);
 80099da:	4b16      	ldr	r3, [pc, #88]	; (8009a34 <network_configure_activations+0xdc>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80099e2:	4a1a      	ldr	r2, [pc, #104]	; (8009a4c <network_configure_activations+0xf4>)
 80099e4:	6093      	str	r3, [r2, #8]
    nl_2_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1152);
 80099e6:	4b13      	ldr	r3, [pc, #76]	; (8009a34 <network_configure_activations+0xdc>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80099ee:	4a17      	ldr	r2, [pc, #92]	; (8009a4c <network_configure_activations+0xf4>)
 80099f0:	60d3      	str	r3, [r2, #12]
    
    pool_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80099f2:	4b10      	ldr	r3, [pc, #64]	; (8009a34 <network_configure_activations+0xdc>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a16      	ldr	r2, [pc, #88]	; (8009a50 <network_configure_activations+0xf8>)
 80099f8:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80099fa:	4b0e      	ldr	r3, [pc, #56]	; (8009a34 <network_configure_activations+0xdc>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a14      	ldr	r2, [pc, #80]	; (8009a50 <network_configure_activations+0xf8>)
 8009a00:	60d3      	str	r3, [r2, #12]
    
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 288);
 8009a02:	4b0c      	ldr	r3, [pc, #48]	; (8009a34 <network_configure_activations+0xdc>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009a0a:	4a12      	ldr	r2, [pc, #72]	; (8009a54 <network_configure_activations+0xfc>)
 8009a0c:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 288);
 8009a0e:	4b09      	ldr	r3, [pc, #36]	; (8009a34 <network_configure_activations+0xdc>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009a16:	4a0f      	ldr	r2, [pc, #60]	; (8009a54 <network_configure_activations+0xfc>)
 8009a18:	60d3      	str	r3, [r2, #12]
    
    return true;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e005      	b.n	8009a2a <network_configure_activations+0xd2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8009a1e:	2213      	movs	r2, #19
 8009a20:	2130      	movs	r1, #48	; 0x30
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fb40 	bl	800a0a8 <ai_platform_network_set_error>
  return false;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	200160a0 	.word	0x200160a0
 8009a38:	20000068 	.word	0x20000068
 8009a3c:	20000078 	.word	0x20000078
 8009a40:	20000098 	.word	0x20000098
 8009a44:	200000b8 	.word	0x200000b8
 8009a48:	200000c8 	.word	0x200000c8
 8009a4c:	200000d8 	.word	0x200000d8
 8009a50:	200000e8 	.word	0x200000e8
 8009a54:	200000f8 	.word	0x200000f8

08009a58 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	2101      	movs	r1, #1
 8009a66:	4851      	ldr	r0, [pc, #324]	; (8009bac <network_configure_weights+0x154>)
 8009a68:	f000 fa08 	bl	8009e7c <ai_platform_get_weights_map>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 8092 	beq.w	8009b98 <network_configure_weights+0x140>
    /* Updating weights (byte) offsets */
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8009a74:	4b4e      	ldr	r3, [pc, #312]	; (8009bb0 <network_configure_weights+0x158>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a7c:	4a4c      	ldr	r2, [pc, #304]	; (8009bb0 <network_configure_weights+0x158>)
 8009a7e:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8009a80:	4b4a      	ldr	r3, [pc, #296]	; (8009bac <network_configure_weights+0x154>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a4a      	ldr	r2, [pc, #296]	; (8009bb0 <network_configure_weights+0x158>)
 8009a86:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8009a88:	4b48      	ldr	r3, [pc, #288]	; (8009bac <network_configure_weights+0x154>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a48      	ldr	r2, [pc, #288]	; (8009bb0 <network_configure_weights+0x158>)
 8009a8e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8009a90:	4b48      	ldr	r3, [pc, #288]	; (8009bb4 <network_configure_weights+0x15c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a98:	4a46      	ldr	r2, [pc, #280]	; (8009bb4 <network_configure_weights+0x15c>)
 8009a9a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 256);
 8009a9c:	4b43      	ldr	r3, [pc, #268]	; (8009bac <network_configure_weights+0x154>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009aa4:	4a43      	ldr	r2, [pc, #268]	; (8009bb4 <network_configure_weights+0x15c>)
 8009aa6:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 256);
 8009aa8:	4b40      	ldr	r3, [pc, #256]	; (8009bac <network_configure_weights+0x154>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009ab0:	4a40      	ldr	r2, [pc, #256]	; (8009bb4 <network_configure_weights+0x15c>)
 8009ab2:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8009ab4:	4b40      	ldr	r3, [pc, #256]	; (8009bb8 <network_configure_weights+0x160>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009abc:	4a3e      	ldr	r2, [pc, #248]	; (8009bb8 <network_configure_weights+0x160>)
 8009abe:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 2560);
 8009ac0:	4b3a      	ldr	r3, [pc, #232]	; (8009bac <network_configure_weights+0x154>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8009ac8:	4a3b      	ldr	r2, [pc, #236]	; (8009bb8 <network_configure_weights+0x160>)
 8009aca:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2560);
 8009acc:	4b37      	ldr	r3, [pc, #220]	; (8009bac <network_configure_weights+0x154>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8009ad4:	4a38      	ldr	r2, [pc, #224]	; (8009bb8 <network_configure_weights+0x160>)
 8009ad6:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8009ad8:	4b38      	ldr	r3, [pc, #224]	; (8009bbc <network_configure_weights+0x164>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ae0:	4a36      	ldr	r2, [pc, #216]	; (8009bbc <network_configure_weights+0x164>)
 8009ae2:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 2816);
 8009ae4:	4b31      	ldr	r3, [pc, #196]	; (8009bac <network_configure_weights+0x154>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aec:	4a33      	ldr	r2, [pc, #204]	; (8009bbc <network_configure_weights+0x164>)
 8009aee:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2816);
 8009af0:	4b2e      	ldr	r3, [pc, #184]	; (8009bac <network_configure_weights+0x154>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af8:	4a30      	ldr	r2, [pc, #192]	; (8009bbc <network_configure_weights+0x164>)
 8009afa:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8009afc:	4b30      	ldr	r3, [pc, #192]	; (8009bc0 <network_configure_weights+0x168>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b04:	4a2e      	ldr	r2, [pc, #184]	; (8009bc0 <network_configure_weights+0x168>)
 8009b06:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 4864);
 8009b08:	4b28      	ldr	r3, [pc, #160]	; (8009bac <network_configure_weights+0x154>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8009b10:	4a2b      	ldr	r2, [pc, #172]	; (8009bc0 <network_configure_weights+0x168>)
 8009b12:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4864);
 8009b14:	4b25      	ldr	r3, [pc, #148]	; (8009bac <network_configure_weights+0x154>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8009b1c:	4a28      	ldr	r2, [pc, #160]	; (8009bc0 <network_configure_weights+0x168>)
 8009b1e:	60d3      	str	r3, [r2, #12]
    
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8009b20:	4b28      	ldr	r3, [pc, #160]	; (8009bc4 <network_configure_weights+0x16c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b28:	4a26      	ldr	r2, [pc, #152]	; (8009bc4 <network_configure_weights+0x16c>)
 8009b2a:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 4896);
 8009b2c:	4b1f      	ldr	r3, [pc, #124]	; (8009bac <network_configure_weights+0x154>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8009b34:	4a23      	ldr	r2, [pc, #140]	; (8009bc4 <network_configure_weights+0x16c>)
 8009b36:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 4896);
 8009b38:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <network_configure_weights+0x154>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8009b40:	4a20      	ldr	r2, [pc, #128]	; (8009bc4 <network_configure_weights+0x16c>)
 8009b42:	60d3      	str	r3, [r2, #12]
    
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8009b44:	4b20      	ldr	r3, [pc, #128]	; (8009bc8 <network_configure_weights+0x170>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b4c:	4a1e      	ldr	r2, [pc, #120]	; (8009bc8 <network_configure_weights+0x170>)
 8009b4e:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 13536);
 8009b50:	4b16      	ldr	r3, [pc, #88]	; (8009bac <network_configure_weights+0x154>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 8009b58:	3320      	adds	r3, #32
 8009b5a:	4a1b      	ldr	r2, [pc, #108]	; (8009bc8 <network_configure_weights+0x170>)
 8009b5c:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 13536);
 8009b5e:	4b13      	ldr	r3, [pc, #76]	; (8009bac <network_configure_weights+0x154>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 8009b66:	3320      	adds	r3, #32
 8009b68:	4a17      	ldr	r2, [pc, #92]	; (8009bc8 <network_configure_weights+0x170>)
 8009b6a:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8009b6c:	4b17      	ldr	r3, [pc, #92]	; (8009bcc <network_configure_weights+0x174>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b74:	4a15      	ldr	r2, [pc, #84]	; (8009bcc <network_configure_weights+0x174>)
 8009b76:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 13656);
 8009b78:	4b0c      	ldr	r3, [pc, #48]	; (8009bac <network_configure_weights+0x154>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8009b80:	3318      	adds	r3, #24
 8009b82:	4a12      	ldr	r2, [pc, #72]	; (8009bcc <network_configure_weights+0x174>)
 8009b84:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 13656);
 8009b86:	4b09      	ldr	r3, [pc, #36]	; (8009bac <network_configure_weights+0x154>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8009b8e:	3318      	adds	r3, #24
 8009b90:	4a0e      	ldr	r2, [pc, #56]	; (8009bcc <network_configure_weights+0x174>)
 8009b92:	60d3      	str	r3, [r2, #12]
    
    return true;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e005      	b.n	8009ba4 <network_configure_weights+0x14c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8009b98:	2212      	movs	r2, #18
 8009b9a:	2130      	movs	r1, #48	; 0x30
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fa83 	bl	800a0a8 <ai_platform_network_set_error>
  return false;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	200160a4 	.word	0x200160a4
 8009bb0:	20000018 	.word	0x20000018
 8009bb4:	20000028 	.word	0x20000028
 8009bb8:	20000038 	.word	0x20000038
 8009bbc:	20000048 	.word	0x20000048
 8009bc0:	20000058 	.word	0x20000058
 8009bc4:	20000088 	.word	0x20000088
 8009bc8:	200000a8 	.word	0x200000a8
 8009bcc:	20000108 	.word	0x20000108

08009bd0 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f9f7 	bl	8009fcc <ai_platform_network_get_error>
 8009bde:	4603      	mov	r3, r0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af02      	add	r7, sp, #8
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	2305      	movs	r3, #5
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	4a04      	ldr	r2, [pc, #16]	; (8009c10 <ai_network_create+0x28>)
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fbfd 	bl	800a400 <ai_platform_network_create>
 8009c06:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	200008b8 	.word	0x200008b8

08009c14 <ai_network_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d104      	bne.n	8009c2e <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009c24:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <ai_network_inputs_get+0x2c>)
 8009c26:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a06      	ldr	r2, [pc, #24]	; (8009c44 <ai_network_inputs_get+0x30>)
 8009c2c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fa3f 	bl	800a0b4 <ai_platform_inputs_get>
 8009c36:	4603      	mov	r3, r0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	200008b8 	.word	0x200008b8
 8009c44:	a1c00100 	.word	0xa1c00100

08009c48 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009c58:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <ai_network_outputs_get+0x2c>)
 8009c5a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a06      	ldr	r2, [pc, #24]	; (8009c78 <ai_network_outputs_get+0x30>)
 8009c60:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fafb 	bl	800a260 <ai_platform_outputs_get>
 8009c6a:	4603      	mov	r3, r0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	200008b8 	.word	0x200008b8
 8009c78:	a1c00100 	.word	0xa1c00100

08009c7c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fc8f 	bl	800a5ac <ai_platform_network_init>
 8009c8e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <ai_network_init+0x1e>
 8009c96:	2300      	movs	r3, #0
 8009c98:	e028      	b.n	8009cec <ai_network_init+0x70>

  ai_bool ok = true;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7ff fed9 	bl	8009a58 <network_configure_weights>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	461a      	mov	r2, r3
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	4013      	ands	r3, r2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	bf14      	ite	ne
 8009cb2:	2301      	movne	r3, #1
 8009cb4:	2300      	moveq	r3, #0
 8009cb6:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff fe4c 	bl	8009958 <network_configure_activations>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	bf14      	ite	ne
 8009ccc:	2301      	movne	r3, #1
 8009cce:	2300      	moveq	r3, #0
 8009cd0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fd58 	bl	800a788 <ai_platform_network_post_init>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	461a      	mov	r2, r3
 8009cdc:	7afb      	ldrb	r3, [r7, #11]
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bf14      	ite	ne
 8009ce4:	2301      	movne	r3, #1
 8009ce6:	2300      	moveq	r3, #0
 8009ce8:	72fb      	strb	r3, [r7, #11]

  return ok;
 8009cea:	7afb      	ldrb	r3, [r7, #11]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 fdc7 	bl	800a898 <ai_platform_network_process>
 8009d0a:	4603      	mov	r3, r0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8009d14:	b4b0      	push	{r4, r5, r7}
 8009d16:	b08f      	sub	sp, #60	; 0x3c
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8009d1e:	4b15      	ldr	r3, [pc, #84]	; (8009d74 <ai_network_data_activations_buffer_get+0x60>)
 8009d20:	61fb      	str	r3, [r7, #28]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	623b      	str	r3, [r7, #32]
 8009d26:	2300      	movs	r3, #0
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d2e:	f44f 43af 	mov.w	r3, #22400	; 0x5780
 8009d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	2204      	movs	r2, #4
 8009d3e:	f362 231f 	bfi	r3, r2, #8, #24
 8009d42:	633b      	str	r3, [r7, #48]	; 0x30
 8009d44:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <ai_network_data_activations_buffer_get+0x64>)
 8009d46:	f107 040c 	add.w	r4, r7, #12
 8009d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009d50:	f107 030c 	add.w	r3, r7, #12
 8009d54:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	461d      	mov	r5, r3
 8009d5a:	f107 041c 	add.w	r4, r7, #28
 8009d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009d66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	373c      	adds	r7, #60	; 0x3c
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bcb0      	pop	{r4, r5, r7}
 8009d72:	4770      	bx	lr
 8009d74:	00040440 	.word	0x00040440
 8009d78:	080132ec 	.word	0x080132ec

08009d7c <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 8009d7c:	b4b0      	push	{r4, r5, r7}
 8009d7e:	b08f      	sub	sp, #60	; 0x3c
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8009d86:	4b15      	ldr	r3, [pc, #84]	; (8009ddc <ai_network_data_weights_buffer_get+0x60>)
 8009d88:	61fb      	str	r3, [r7, #28]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	623b      	str	r3, [r7, #32]
 8009d8e:	2300      	movs	r3, #0
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
 8009d92:	2300      	movs	r3, #0
 8009d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d96:	f645 5358 	movw	r3, #23896	; 0x5d58
 8009d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	2204      	movs	r2, #4
 8009da6:	f362 231f 	bfi	r3, r2, #8, #24
 8009daa:	633b      	str	r3, [r7, #48]	; 0x30
 8009dac:	4b0c      	ldr	r3, [pc, #48]	; (8009de0 <ai_network_data_weights_buffer_get+0x64>)
 8009dae:	f107 040c 	add.w	r4, r7, #12
 8009db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009db8:	f107 030c 	add.w	r3, r7, #12
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	461d      	mov	r5, r3
 8009dc2:	f107 041c 	add.w	r4, r7, #28
 8009dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009dca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009dce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	373c      	adds	r7, #60	; 0x3c
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bcb0      	pop	{r4, r5, r7}
 8009dda:	4770      	bx	lr
 8009ddc:	40040440 	.word	0x40040440
 8009de0:	080132fc 	.word	0x080132fc

08009de4 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 8009de4:	b480      	push	{r7}
 8009de6:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <ai_network_data_weights_get+0x10>)

}
 8009dea:	4618      	mov	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	2000095c 	.word	0x2000095c

08009df8 <ai_buffer_get_size>:
 8009df8:	b378      	cbz	r0, 8009e5a <ai_buffer_get_size+0x62>
 8009dfa:	b410      	push	{r4}
 8009dfc:	6803      	ldr	r3, [r0, #0]
 8009dfe:	4a17      	ldr	r2, [pc, #92]	; (8009e5c <ai_buffer_get_size+0x64>)
 8009e00:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8009e04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d01e      	beq.n	8009e4a <ai_buffer_get_size+0x52>
 8009e0c:	6984      	ldr	r4, [r0, #24]
 8009e0e:	6862      	ldr	r2, [r4, #4]
 8009e10:	7d03      	ldrb	r3, [r0, #20]
 8009e12:	6941      	ldr	r1, [r0, #20]
 8009e14:	f1a3 0301 	sub.w	r3, r3, #1
 8009e18:	fab3 f383 	clz	r3, r3
 8009e1c:	095b      	lsrs	r3, r3, #5
 8009e1e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8009e22:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8009e26:	da0b      	bge.n	8009e40 <ai_buffer_get_size+0x48>
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d102      	bne.n	8009e32 <ai_buffer_get_size+0x3a>
 8009e2c:	2802      	cmp	r0, #2
 8009e2e:	d007      	beq.n	8009e40 <ai_buffer_get_size+0x48>
 8009e30:	2302      	movs	r3, #2
 8009e32:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8009e36:	3301      	adds	r3, #1
 8009e38:	4298      	cmp	r0, r3
 8009e3a:	fb01 f202 	mul.w	r2, r1, r2
 8009e3e:	d1f3      	bne.n	8009e28 <ai_buffer_get_size+0x30>
 8009e40:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8009e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	2900      	cmp	r1, #0
 8009e4c:	d0de      	beq.n	8009e0c <ai_buffer_get_size+0x14>
 8009e4e:	6984      	ldr	r4, [r0, #24]
 8009e50:	6863      	ldr	r3, [r4, #4]
 8009e52:	331f      	adds	r3, #31
 8009e54:	f023 021f 	bic.w	r2, r3, #31
 8009e58:	e7da      	b.n	8009e10 <ai_buffer_get_size+0x18>
 8009e5a:	4770      	bx	lr
 8009e5c:	000400c0 	.word	0x000400c0

08009e60 <ai_buffer_array_sane>:
 8009e60:	b138      	cbz	r0, 8009e72 <ai_buffer_array_sane+0x12>
 8009e62:	6843      	ldr	r3, [r0, #4]
 8009e64:	b123      	cbz	r3, 8009e70 <ai_buffer_array_sane+0x10>
 8009e66:	8840      	ldrh	r0, [r0, #2]
 8009e68:	3800      	subs	r0, #0
 8009e6a:	bf18      	it	ne
 8009e6c:	2001      	movne	r0, #1
 8009e6e:	4770      	bx	lr
 8009e70:	4618      	mov	r0, r3
 8009e72:	4770      	bx	lr

08009e74 <_ai_platform_acquire_crc>:
 8009e74:	2001      	movs	r0, #1
 8009e76:	4770      	bx	lr

08009e78 <_ai_platform_release_crc>:
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop

08009e7c <ai_platform_get_weights_map>:
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	d037      	beq.n	8009ef0 <ai_platform_get_weights_map+0x74>
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	4604      	mov	r4, r0
 8009e84:	b1a0      	cbz	r0, 8009eb0 <ai_platform_get_weights_map+0x34>
 8009e86:	460f      	mov	r7, r1
 8009e88:	b191      	cbz	r1, 8009eb0 <ai_platform_get_weights_map+0x34>
 8009e8a:	4b25      	ldr	r3, [pc, #148]	; (8009f20 <ai_platform_get_weights_map+0xa4>)
 8009e8c:	6810      	ldr	r0, [r2, #0]
 8009e8e:	4298      	cmp	r0, r3
 8009e90:	4615      	mov	r5, r2
 8009e92:	d00f      	beq.n	8009eb4 <ai_platform_get_weights_map+0x38>
 8009e94:	6855      	ldr	r5, [r2, #4]
 8009e96:	b15d      	cbz	r5, 8009eb0 <ai_platform_get_weights_map+0x34>
 8009e98:	682e      	ldr	r6, [r5, #0]
 8009e9a:	429e      	cmp	r6, r3
 8009e9c:	d02a      	beq.n	8009ef4 <ai_platform_get_weights_map+0x78>
 8009e9e:	f1a1 0001 	sub.w	r0, r1, #1
 8009ea2:	6025      	str	r5, [r4, #0]
 8009ea4:	fab0 f080 	clz	r0, r0
 8009ea8:	0940      	lsrs	r0, r0, #5
 8009eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eac:	42a7      	cmp	r7, r4
 8009eae:	d034      	beq.n	8009f1a <ai_platform_get_weights_map+0x9e>
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb4:	1d10      	adds	r0, r2, #4
 8009eb6:	f7ff ffd3 	bl	8009e60 <ai_buffer_array_sane>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d0f8      	beq.n	8009eb0 <ai_platform_get_weights_map+0x34>
 8009ebe:	88eb      	ldrh	r3, [r5, #6]
 8009ec0:	429f      	cmp	r7, r3
 8009ec2:	d1f5      	bne.n	8009eb0 <ai_platform_get_weights_map+0x34>
 8009ec4:	f04f 0e00 	mov.w	lr, #0
 8009ec8:	1f23      	subs	r3, r4, #4
 8009eca:	4670      	mov	r0, lr
 8009ecc:	68aa      	ldr	r2, [r5, #8]
 8009ece:	eb02 0c0e 	add.w	ip, r2, lr
 8009ed2:	f10e 0e1c 	add.w	lr, lr, #28
 8009ed6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8009eda:	b124      	cbz	r4, 8009ee6 <ai_platform_get_weights_map+0x6a>
 8009edc:	3001      	adds	r0, #1
 8009ede:	4287      	cmp	r7, r0
 8009ee0:	f843 4f04 	str.w	r4, [r3, #4]!
 8009ee4:	d1f2      	bne.n	8009ecc <ai_platform_get_weights_map+0x50>
 8009ee6:	1a38      	subs	r0, r7, r0
 8009ee8:	fab0 f080 	clz	r0, r0
 8009eec:	0940      	lsrs	r0, r0, #5
 8009eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	4770      	bx	lr
 8009ef4:	1f23      	subs	r3, r4, #4
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	2400      	movs	r4, #0
 8009efa:	e000      	b.n	8009efe <ai_platform_get_weights_map+0x82>
 8009efc:	4614      	mov	r4, r2
 8009efe:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8009f02:	42b2      	cmp	r2, r6
 8009f04:	d0d2      	beq.n	8009eac <ai_platform_get_weights_map+0x30>
 8009f06:	f843 2f04 	str.w	r2, [r3, #4]!
 8009f0a:	1c62      	adds	r2, r4, #1
 8009f0c:	4297      	cmp	r7, r2
 8009f0e:	d1f5      	bne.n	8009efc <ai_platform_get_weights_map+0x80>
 8009f10:	3402      	adds	r4, #2
 8009f12:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009f16:	42b3      	cmp	r3, r6
 8009f18:	d1ca      	bne.n	8009eb0 <ai_platform_get_weights_map+0x34>
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	a1facade 	.word	0xa1facade

08009f24 <ai_platform_get_activations_map>:
 8009f24:	2a00      	cmp	r2, #0
 8009f26:	d038      	beq.n	8009f9a <ai_platform_get_activations_map+0x76>
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	b1a0      	cbz	r0, 8009f58 <ai_platform_get_activations_map+0x34>
 8009f2e:	460f      	mov	r7, r1
 8009f30:	b191      	cbz	r1, 8009f58 <ai_platform_get_activations_map+0x34>
 8009f32:	4b25      	ldr	r3, [pc, #148]	; (8009fc8 <ai_platform_get_activations_map+0xa4>)
 8009f34:	6810      	ldr	r0, [r2, #0]
 8009f36:	4298      	cmp	r0, r3
 8009f38:	4615      	mov	r5, r2
 8009f3a:	d00f      	beq.n	8009f5c <ai_platform_get_activations_map+0x38>
 8009f3c:	6a15      	ldr	r5, [r2, #32]
 8009f3e:	b15d      	cbz	r5, 8009f58 <ai_platform_get_activations_map+0x34>
 8009f40:	682e      	ldr	r6, [r5, #0]
 8009f42:	429e      	cmp	r6, r3
 8009f44:	d02b      	beq.n	8009f9e <ai_platform_get_activations_map+0x7a>
 8009f46:	f1a1 0001 	sub.w	r0, r1, #1
 8009f4a:	6025      	str	r5, [r4, #0]
 8009f4c:	fab0 f080 	clz	r0, r0
 8009f50:	0940      	lsrs	r0, r0, #5
 8009f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f54:	42a7      	cmp	r7, r4
 8009f56:	d035      	beq.n	8009fc4 <ai_platform_get_activations_map+0xa0>
 8009f58:	2000      	movs	r0, #0
 8009f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f5c:	f102 000c 	add.w	r0, r2, #12
 8009f60:	f7ff ff7e 	bl	8009e60 <ai_buffer_array_sane>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d0f7      	beq.n	8009f58 <ai_platform_get_activations_map+0x34>
 8009f68:	89eb      	ldrh	r3, [r5, #14]
 8009f6a:	429f      	cmp	r7, r3
 8009f6c:	d1f4      	bne.n	8009f58 <ai_platform_get_activations_map+0x34>
 8009f6e:	f04f 0e00 	mov.w	lr, #0
 8009f72:	1f23      	subs	r3, r4, #4
 8009f74:	4670      	mov	r0, lr
 8009f76:	692a      	ldr	r2, [r5, #16]
 8009f78:	eb02 0c0e 	add.w	ip, r2, lr
 8009f7c:	f10e 0e1c 	add.w	lr, lr, #28
 8009f80:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8009f84:	b124      	cbz	r4, 8009f90 <ai_platform_get_activations_map+0x6c>
 8009f86:	3001      	adds	r0, #1
 8009f88:	4287      	cmp	r7, r0
 8009f8a:	f843 4f04 	str.w	r4, [r3, #4]!
 8009f8e:	d1f2      	bne.n	8009f76 <ai_platform_get_activations_map+0x52>
 8009f90:	1a38      	subs	r0, r7, r0
 8009f92:	fab0 f080 	clz	r0, r0
 8009f96:	0940      	lsrs	r0, r0, #5
 8009f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	4770      	bx	lr
 8009f9e:	1f23      	subs	r3, r4, #4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	2400      	movs	r4, #0
 8009fa4:	e000      	b.n	8009fa8 <ai_platform_get_activations_map+0x84>
 8009fa6:	4614      	mov	r4, r2
 8009fa8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8009fac:	42b2      	cmp	r2, r6
 8009fae:	d0d1      	beq.n	8009f54 <ai_platform_get_activations_map+0x30>
 8009fb0:	f843 2f04 	str.w	r2, [r3, #4]!
 8009fb4:	1c62      	adds	r2, r4, #1
 8009fb6:	4297      	cmp	r7, r2
 8009fb8:	d1f5      	bne.n	8009fa6 <ai_platform_get_activations_map+0x82>
 8009fba:	3402      	adds	r4, #2
 8009fbc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009fc0:	42b3      	cmp	r3, r6
 8009fc2:	d1c9      	bne.n	8009f58 <ai_platform_get_activations_map+0x34>
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc8:	a1facade 	.word	0xa1facade

08009fcc <ai_platform_network_get_error>:
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	b1f0      	cbz	r0, 800a00e <ai_platform_network_get_error+0x42>
 8009fd0:	4b2f      	ldr	r3, [pc, #188]	; (800a090 <ai_platform_network_get_error+0xc4>)
 8009fd2:	6802      	ldr	r2, [r0, #0]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	d119      	bne.n	800a00e <ai_platform_network_get_error+0x42>
 8009fda:	f7ff ff4b 	bl	8009e74 <_ai_platform_acquire_crc>
 8009fde:	4b2d      	ldr	r3, [pc, #180]	; (800a094 <ai_platform_network_get_error+0xc8>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fea:	d03c      	beq.n	800a066 <ai_platform_network_get_error+0x9a>
 8009fec:	4a2a      	ldr	r2, [pc, #168]	; (800a098 <ai_platform_network_get_error+0xcc>)
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009ff4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1fb      	bne.n	8009ff4 <ai_platform_network_get_error+0x28>
 8009ffc:	4b27      	ldr	r3, [pc, #156]	; (800a09c <ai_platform_network_get_error+0xd0>)
 8009ffe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a002:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a006:	4b26      	ldr	r3, [pc, #152]	; (800a0a0 <ai_platform_network_get_error+0xd4>)
 800a008:	429a      	cmp	r2, r3
 800a00a:	d038      	beq.n	800a07e <ai_platform_network_get_error+0xb2>
 800a00c:	e7fe      	b.n	800a00c <ai_platform_network_get_error+0x40>
 800a00e:	f7ff ff31 	bl	8009e74 <_ai_platform_acquire_crc>
 800a012:	4b20      	ldr	r3, [pc, #128]	; (800a094 <ai_platform_network_get_error+0xc8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a01e:	d010      	beq.n	800a042 <ai_platform_network_get_error+0x76>
 800a020:	4a1d      	ldr	r2, [pc, #116]	; (800a098 <ai_platform_network_get_error+0xcc>)
 800a022:	2301      	movs	r3, #1
 800a024:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a028:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1fb      	bne.n	800a028 <ai_platform_network_get_error+0x5c>
 800a030:	4b1a      	ldr	r3, [pc, #104]	; (800a09c <ai_platform_network_get_error+0xd0>)
 800a032:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a036:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a03a:	4b19      	ldr	r3, [pc, #100]	; (800a0a0 <ai_platform_network_get_error+0xd4>)
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d00d      	beq.n	800a05c <ai_platform_network_get_error+0x90>
 800a040:	e7fe      	b.n	800a040 <ai_platform_network_get_error+0x74>
 800a042:	4a18      	ldr	r2, [pc, #96]	; (800a0a4 <ai_platform_network_get_error+0xd8>)
 800a044:	2301      	movs	r3, #1
 800a046:	6093      	str	r3, [r2, #8]
 800a048:	6893      	ldr	r3, [r2, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1fc      	bne.n	800a048 <ai_platform_network_get_error+0x7c>
 800a04e:	4b13      	ldr	r3, [pc, #76]	; (800a09c <ai_platform_network_get_error+0xd0>)
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	6812      	ldr	r2, [r2, #0]
 800a054:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <ai_platform_network_get_error+0xd4>)
 800a056:	429a      	cmp	r2, r3
 800a058:	d000      	beq.n	800a05c <ai_platform_network_get_error+0x90>
 800a05a:	e7fe      	b.n	800a05a <ai_platform_network_get_error+0x8e>
 800a05c:	f7ff ff0c 	bl	8009e78 <_ai_platform_release_crc>
 800a060:	f241 0010 	movw	r0, #4112	; 0x1010
 800a064:	bd10      	pop	{r4, pc}
 800a066:	4a0f      	ldr	r2, [pc, #60]	; (800a0a4 <ai_platform_network_get_error+0xd8>)
 800a068:	2301      	movs	r3, #1
 800a06a:	6093      	str	r3, [r2, #8]
 800a06c:	6893      	ldr	r3, [r2, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1fc      	bne.n	800a06c <ai_platform_network_get_error+0xa0>
 800a072:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <ai_platform_network_get_error+0xd0>)
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <ai_platform_network_get_error+0xd4>)
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d107      	bne.n	800a08e <ai_platform_network_get_error+0xc2>
 800a07e:	f7ff fefb 	bl	8009e78 <_ai_platform_release_crc>
 800a082:	f104 0010 	add.w	r0, r4, #16
 800a086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a08a:	f000 be8b 	b.w	800ada4 <core_get_error>
 800a08e:	e7fe      	b.n	800a08e <ai_platform_network_get_error+0xc2>
 800a090:	a1c00100 	.word	0xa1c00100
 800a094:	e0042000 	.word	0xe0042000
 800a098:	58024000 	.word	0x58024000
 800a09c:	f407a5c2 	.word	0xf407a5c2
 800a0a0:	b5e8b5cd 	.word	0xb5e8b5cd
 800a0a4:	40023000 	.word	0x40023000

0800a0a8 <ai_platform_network_set_error>:
 800a0a8:	b110      	cbz	r0, 800a0b0 <ai_platform_network_set_error+0x8>
 800a0aa:	3010      	adds	r0, #16
 800a0ac:	f000 be80 	b.w	800adb0 <core_set_error>
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop

0800a0b4 <ai_platform_inputs_get>:
 800a0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b8:	b085      	sub	sp, #20
 800a0ba:	9102      	str	r1, [sp, #8]
 800a0bc:	b1f0      	cbz	r0, 800a0fc <ai_platform_inputs_get+0x48>
 800a0be:	4b62      	ldr	r3, [pc, #392]	; (800a248 <ai_platform_inputs_get+0x194>)
 800a0c0:	6802      	ldr	r2, [r0, #0]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	d119      	bne.n	800a0fc <ai_platform_inputs_get+0x48>
 800a0c8:	f7ff fed4 	bl	8009e74 <_ai_platform_acquire_crc>
 800a0cc:	4b5f      	ldr	r3, [pc, #380]	; (800a24c <ai_platform_inputs_get+0x198>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0d8:	d03d      	beq.n	800a156 <ai_platform_inputs_get+0xa2>
 800a0da:	4a5d      	ldr	r2, [pc, #372]	; (800a250 <ai_platform_inputs_get+0x19c>)
 800a0dc:	2301      	movs	r3, #1
 800a0de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a0e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1fb      	bne.n	800a0e2 <ai_platform_inputs_get+0x2e>
 800a0ea:	4b5a      	ldr	r3, [pc, #360]	; (800a254 <ai_platform_inputs_get+0x1a0>)
 800a0ec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a0f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a0f4:	4b58      	ldr	r3, [pc, #352]	; (800a258 <ai_platform_inputs_get+0x1a4>)
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d039      	beq.n	800a16e <ai_platform_inputs_get+0xba>
 800a0fa:	e7fe      	b.n	800a0fa <ai_platform_inputs_get+0x46>
 800a0fc:	f7ff feba 	bl	8009e74 <_ai_platform_acquire_crc>
 800a100:	4b52      	ldr	r3, [pc, #328]	; (800a24c <ai_platform_inputs_get+0x198>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a10c:	d010      	beq.n	800a130 <ai_platform_inputs_get+0x7c>
 800a10e:	4a50      	ldr	r2, [pc, #320]	; (800a250 <ai_platform_inputs_get+0x19c>)
 800a110:	2301      	movs	r3, #1
 800a112:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a116:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1fb      	bne.n	800a116 <ai_platform_inputs_get+0x62>
 800a11e:	4b4d      	ldr	r3, [pc, #308]	; (800a254 <ai_platform_inputs_get+0x1a0>)
 800a120:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a124:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a128:	4b4b      	ldr	r3, [pc, #300]	; (800a258 <ai_platform_inputs_get+0x1a4>)
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d00d      	beq.n	800a14a <ai_platform_inputs_get+0x96>
 800a12e:	e7fe      	b.n	800a12e <ai_platform_inputs_get+0x7a>
 800a130:	4a4a      	ldr	r2, [pc, #296]	; (800a25c <ai_platform_inputs_get+0x1a8>)
 800a132:	2301      	movs	r3, #1
 800a134:	6093      	str	r3, [r2, #8]
 800a136:	6893      	ldr	r3, [r2, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1fc      	bne.n	800a136 <ai_platform_inputs_get+0x82>
 800a13c:	4b45      	ldr	r3, [pc, #276]	; (800a254 <ai_platform_inputs_get+0x1a0>)
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	6812      	ldr	r2, [r2, #0]
 800a142:	4b45      	ldr	r3, [pc, #276]	; (800a258 <ai_platform_inputs_get+0x1a4>)
 800a144:	429a      	cmp	r2, r3
 800a146:	d000      	beq.n	800a14a <ai_platform_inputs_get+0x96>
 800a148:	e7fe      	b.n	800a148 <ai_platform_inputs_get+0x94>
 800a14a:	f7ff fe95 	bl	8009e78 <_ai_platform_release_crc>
 800a14e:	2000      	movs	r0, #0
 800a150:	b005      	add	sp, #20
 800a152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a156:	4a41      	ldr	r2, [pc, #260]	; (800a25c <ai_platform_inputs_get+0x1a8>)
 800a158:	2301      	movs	r3, #1
 800a15a:	6093      	str	r3, [r2, #8]
 800a15c:	6893      	ldr	r3, [r2, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1fc      	bne.n	800a15c <ai_platform_inputs_get+0xa8>
 800a162:	4b3c      	ldr	r3, [pc, #240]	; (800a254 <ai_platform_inputs_get+0x1a0>)
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	6812      	ldr	r2, [r2, #0]
 800a168:	4b3b      	ldr	r3, [pc, #236]	; (800a258 <ai_platform_inputs_get+0x1a4>)
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d155      	bne.n	800a21a <ai_platform_inputs_get+0x166>
 800a16e:	f7ff fe83 	bl	8009e78 <_ai_platform_release_crc>
 800a172:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a174:	2b00      	cmp	r3, #0
 800a176:	d051      	beq.n	800a21c <ai_platform_inputs_get+0x168>
 800a178:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800a17c:	f1ba 0f00 	cmp.w	sl, #0
 800a180:	d04c      	beq.n	800a21c <ai_platform_inputs_get+0x168>
 800a182:	f04f 0b00 	mov.w	fp, #0
 800a186:	465d      	mov	r5, fp
 800a188:	9703      	str	r7, [sp, #12]
 800a18a:	e016      	b.n	800a1ba <ai_platform_inputs_get+0x106>
 800a18c:	9901      	ldr	r1, [sp, #4]
 800a18e:	2301      	movs	r3, #1
 800a190:	507b      	str	r3, [r7, r1]
 800a192:	69b1      	ldr	r1, [r6, #24]
 800a194:	6849      	ldr	r1, [r1, #4]
 800a196:	6121      	str	r1, [r4, #16]
 800a198:	f04f 0301 	mov.w	r3, #1
 800a19c:	7523      	strb	r3, [r4, #20]
 800a19e:	e9c4 c200 	strd	ip, r2, [r4]
 800a1a2:	6962      	ldr	r2, [r4, #20]
 800a1a4:	60a0      	str	r0, [r4, #8]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f369 221f 	bfi	r2, r9, #8, #24
 800a1ac:	f8c4 8018 	str.w	r8, [r4, #24]
 800a1b0:	60e3      	str	r3, [r4, #12]
 800a1b2:	3501      	adds	r5, #1
 800a1b4:	f10b 0b1c 	add.w	fp, fp, #28
 800a1b8:	6162      	str	r2, [r4, #20]
 800a1ba:	f8ba 3000 	ldrh.w	r3, [sl]
 800a1be:	42ab      	cmp	r3, r5
 800a1c0:	b2aa      	uxth	r2, r5
 800a1c2:	d93a      	bls.n	800a23a <ai_platform_inputs_get+0x186>
 800a1c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a1c8:	00e9      	lsls	r1, r5, #3
 800a1ca:	9101      	str	r1, [sp, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d034      	beq.n	800a23a <ai_platform_inputs_get+0x186>
 800a1d0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800a1d4:	2e00      	cmp	r6, #0
 800a1d6:	d030      	beq.n	800a23a <ai_platform_inputs_get+0x186>
 800a1d8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a1dc:	69b2      	ldr	r2, [r6, #24]
 800a1de:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800a1e2:	6810      	ldr	r0, [r2, #0]
 800a1e4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a1e8:	68b3      	ldr	r3, [r6, #8]
 800a1ea:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a1ee:	f002 fb59 	bl	800c8a4 <ai_array_to_buffer_fmt>
 800a1f2:	69b1      	ldr	r1, [r6, #24]
 800a1f4:	4684      	mov	ip, r0
 800a1f6:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800a1fa:	688a      	ldr	r2, [r1, #8]
 800a1fc:	445c      	add	r4, fp
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d0c8      	beq.n	800a194 <ai_platform_inputs_get+0xe0>
 800a202:	2100      	movs	r1, #0
 800a204:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800a208:	6831      	ldr	r1, [r6, #0]
 800a20a:	6041      	str	r1, [r0, #4]
 800a20c:	b111      	cbz	r1, 800a214 <ai_platform_inputs_get+0x160>
 800a20e:	8849      	ldrh	r1, [r1, #2]
 800a210:	2900      	cmp	r1, #0
 800a212:	d1bb      	bne.n	800a18c <ai_platform_inputs_get+0xd8>
 800a214:	69b1      	ldr	r1, [r6, #24]
 800a216:	2000      	movs	r0, #0
 800a218:	e7bc      	b.n	800a194 <ai_platform_inputs_get+0xe0>
 800a21a:	e7fe      	b.n	800a21a <ai_platform_inputs_get+0x166>
 800a21c:	2218      	movs	r2, #24
 800a21e:	2111      	movs	r1, #17
 800a220:	f107 0010 	add.w	r0, r7, #16
 800a224:	f000 fdc4 	bl	800adb0 <core_set_error>
 800a228:	2200      	movs	r2, #0
 800a22a:	4610      	mov	r0, r2
 800a22c:	9b02      	ldr	r3, [sp, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d08e      	beq.n	800a150 <ai_platform_inputs_get+0x9c>
 800a232:	801a      	strh	r2, [r3, #0]
 800a234:	b005      	add	sp, #20
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	9f03      	ldr	r7, [sp, #12]
 800a23c:	2a00      	cmp	r2, #0
 800a23e:	d0ed      	beq.n	800a21c <ai_platform_inputs_get+0x168>
 800a240:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a244:	6858      	ldr	r0, [r3, #4]
 800a246:	e7f1      	b.n	800a22c <ai_platform_inputs_get+0x178>
 800a248:	a1c00100 	.word	0xa1c00100
 800a24c:	e0042000 	.word	0xe0042000
 800a250:	58024000 	.word	0x58024000
 800a254:	f407a5c2 	.word	0xf407a5c2
 800a258:	b5e8b5cd 	.word	0xb5e8b5cd
 800a25c:	40023000 	.word	0x40023000

0800a260 <ai_platform_outputs_get>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	b085      	sub	sp, #20
 800a266:	9102      	str	r1, [sp, #8]
 800a268:	b1f0      	cbz	r0, 800a2a8 <ai_platform_outputs_get+0x48>
 800a26a:	4b5f      	ldr	r3, [pc, #380]	; (800a3e8 <ai_platform_outputs_get+0x188>)
 800a26c:	6802      	ldr	r2, [r0, #0]
 800a26e:	429a      	cmp	r2, r3
 800a270:	4607      	mov	r7, r0
 800a272:	d119      	bne.n	800a2a8 <ai_platform_outputs_get+0x48>
 800a274:	f7ff fdfe 	bl	8009e74 <_ai_platform_acquire_crc>
 800a278:	4b5c      	ldr	r3, [pc, #368]	; (800a3ec <ai_platform_outputs_get+0x18c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a284:	d03d      	beq.n	800a302 <ai_platform_outputs_get+0xa2>
 800a286:	4a5a      	ldr	r2, [pc, #360]	; (800a3f0 <ai_platform_outputs_get+0x190>)
 800a288:	2301      	movs	r3, #1
 800a28a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a28e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1fb      	bne.n	800a28e <ai_platform_outputs_get+0x2e>
 800a296:	4b57      	ldr	r3, [pc, #348]	; (800a3f4 <ai_platform_outputs_get+0x194>)
 800a298:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a29c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a2a0:	4b55      	ldr	r3, [pc, #340]	; (800a3f8 <ai_platform_outputs_get+0x198>)
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d039      	beq.n	800a31a <ai_platform_outputs_get+0xba>
 800a2a6:	e7fe      	b.n	800a2a6 <ai_platform_outputs_get+0x46>
 800a2a8:	f7ff fde4 	bl	8009e74 <_ai_platform_acquire_crc>
 800a2ac:	4b4f      	ldr	r3, [pc, #316]	; (800a3ec <ai_platform_outputs_get+0x18c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2b8:	d010      	beq.n	800a2dc <ai_platform_outputs_get+0x7c>
 800a2ba:	4a4d      	ldr	r2, [pc, #308]	; (800a3f0 <ai_platform_outputs_get+0x190>)
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a2c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1fb      	bne.n	800a2c2 <ai_platform_outputs_get+0x62>
 800a2ca:	4b4a      	ldr	r3, [pc, #296]	; (800a3f4 <ai_platform_outputs_get+0x194>)
 800a2cc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a2d0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a2d4:	4b48      	ldr	r3, [pc, #288]	; (800a3f8 <ai_platform_outputs_get+0x198>)
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d00d      	beq.n	800a2f6 <ai_platform_outputs_get+0x96>
 800a2da:	e7fe      	b.n	800a2da <ai_platform_outputs_get+0x7a>
 800a2dc:	4a47      	ldr	r2, [pc, #284]	; (800a3fc <ai_platform_outputs_get+0x19c>)
 800a2de:	2301      	movs	r3, #1
 800a2e0:	6093      	str	r3, [r2, #8]
 800a2e2:	6893      	ldr	r3, [r2, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1fc      	bne.n	800a2e2 <ai_platform_outputs_get+0x82>
 800a2e8:	4b42      	ldr	r3, [pc, #264]	; (800a3f4 <ai_platform_outputs_get+0x194>)
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	6812      	ldr	r2, [r2, #0]
 800a2ee:	4b42      	ldr	r3, [pc, #264]	; (800a3f8 <ai_platform_outputs_get+0x198>)
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d000      	beq.n	800a2f6 <ai_platform_outputs_get+0x96>
 800a2f4:	e7fe      	b.n	800a2f4 <ai_platform_outputs_get+0x94>
 800a2f6:	f7ff fdbf 	bl	8009e78 <_ai_platform_release_crc>
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	b005      	add	sp, #20
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a302:	4a3e      	ldr	r2, [pc, #248]	; (800a3fc <ai_platform_outputs_get+0x19c>)
 800a304:	2301      	movs	r3, #1
 800a306:	6093      	str	r3, [r2, #8]
 800a308:	6893      	ldr	r3, [r2, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1fc      	bne.n	800a308 <ai_platform_outputs_get+0xa8>
 800a30e:	4b39      	ldr	r3, [pc, #228]	; (800a3f4 <ai_platform_outputs_get+0x194>)
 800a310:	6013      	str	r3, [r2, #0]
 800a312:	6812      	ldr	r2, [r2, #0]
 800a314:	4b38      	ldr	r3, [pc, #224]	; (800a3f8 <ai_platform_outputs_get+0x198>)
 800a316:	429a      	cmp	r2, r3
 800a318:	d150      	bne.n	800a3bc <ai_platform_outputs_get+0x15c>
 800a31a:	f7ff fdad 	bl	8009e78 <_ai_platform_release_crc>
 800a31e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a320:	2b01      	cmp	r3, #1
 800a322:	d958      	bls.n	800a3d6 <ai_platform_outputs_get+0x176>
 800a324:	f04f 0b00 	mov.w	fp, #0
 800a328:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800a32c:	9703      	str	r7, [sp, #12]
 800a32e:	465d      	mov	r5, fp
 800a330:	e016      	b.n	800a360 <ai_platform_outputs_get+0x100>
 800a332:	9901      	ldr	r1, [sp, #4]
 800a334:	2301      	movs	r3, #1
 800a336:	507b      	str	r3, [r7, r1]
 800a338:	69b1      	ldr	r1, [r6, #24]
 800a33a:	6849      	ldr	r1, [r1, #4]
 800a33c:	6121      	str	r1, [r4, #16]
 800a33e:	f04f 0301 	mov.w	r3, #1
 800a342:	7523      	strb	r3, [r4, #20]
 800a344:	e9c4 c200 	strd	ip, r2, [r4]
 800a348:	6962      	ldr	r2, [r4, #20]
 800a34a:	60a0      	str	r0, [r4, #8]
 800a34c:	2300      	movs	r3, #0
 800a34e:	f369 221f 	bfi	r2, r9, #8, #24
 800a352:	f8c4 8018 	str.w	r8, [r4, #24]
 800a356:	60e3      	str	r3, [r4, #12]
 800a358:	3501      	adds	r5, #1
 800a35a:	f10b 0b1c 	add.w	fp, fp, #28
 800a35e:	6162      	str	r2, [r4, #20]
 800a360:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800a364:	42ab      	cmp	r3, r5
 800a366:	b2aa      	uxth	r2, r5
 800a368:	d929      	bls.n	800a3be <ai_platform_outputs_get+0x15e>
 800a36a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800a36e:	00e9      	lsls	r1, r5, #3
 800a370:	9101      	str	r1, [sp, #4]
 800a372:	b323      	cbz	r3, 800a3be <ai_platform_outputs_get+0x15e>
 800a374:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800a378:	b30e      	cbz	r6, 800a3be <ai_platform_outputs_get+0x15e>
 800a37a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a37e:	69b2      	ldr	r2, [r6, #24]
 800a380:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800a384:	6810      	ldr	r0, [r2, #0]
 800a386:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a38a:	68b3      	ldr	r3, [r6, #8]
 800a38c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a390:	f002 fa88 	bl	800c8a4 <ai_array_to_buffer_fmt>
 800a394:	69b1      	ldr	r1, [r6, #24]
 800a396:	4684      	mov	ip, r0
 800a398:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800a39c:	688a      	ldr	r2, [r1, #8]
 800a39e:	445c      	add	r4, fp
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d0ca      	beq.n	800a33a <ai_platform_outputs_get+0xda>
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800a3aa:	6831      	ldr	r1, [r6, #0]
 800a3ac:	6041      	str	r1, [r0, #4]
 800a3ae:	b111      	cbz	r1, 800a3b6 <ai_platform_outputs_get+0x156>
 800a3b0:	8849      	ldrh	r1, [r1, #2]
 800a3b2:	2900      	cmp	r1, #0
 800a3b4:	d1bd      	bne.n	800a332 <ai_platform_outputs_get+0xd2>
 800a3b6:	69b1      	ldr	r1, [r6, #24]
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	e7be      	b.n	800a33a <ai_platform_outputs_get+0xda>
 800a3bc:	e7fe      	b.n	800a3bc <ai_platform_outputs_get+0x15c>
 800a3be:	9f03      	ldr	r7, [sp, #12]
 800a3c0:	b14a      	cbz	r2, 800a3d6 <ai_platform_outputs_get+0x176>
 800a3c2:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a3c6:	6858      	ldr	r0, [r3, #4]
 800a3c8:	9b02      	ldr	r3, [sp, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d096      	beq.n	800a2fc <ai_platform_outputs_get+0x9c>
 800a3ce:	801a      	strh	r2, [r3, #0]
 800a3d0:	b005      	add	sp, #20
 800a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d6:	2218      	movs	r2, #24
 800a3d8:	2111      	movs	r1, #17
 800a3da:	f107 0010 	add.w	r0, r7, #16
 800a3de:	f000 fce7 	bl	800adb0 <core_set_error>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	e7ef      	b.n	800a3c8 <ai_platform_outputs_get+0x168>
 800a3e8:	a1c00100 	.word	0xa1c00100
 800a3ec:	e0042000 	.word	0xe0042000
 800a3f0:	58024000 	.word	0x58024000
 800a3f4:	f407a5c2 	.word	0xf407a5c2
 800a3f8:	b5e8b5cd 	.word	0xb5e8b5cd
 800a3fc:	40023000 	.word	0x40023000

0800a400 <ai_platform_network_create>:
 800a400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a404:	b083      	sub	sp, #12
 800a406:	4606      	mov	r6, r0
 800a408:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800a40c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800a410:	4615      	mov	r5, r2
 800a412:	461f      	mov	r7, r3
 800a414:	f7ff fd2e 	bl	8009e74 <_ai_platform_acquire_crc>
 800a418:	b188      	cbz	r0, 800a43e <ai_platform_network_create+0x3e>
 800a41a:	4a5d      	ldr	r2, [pc, #372]	; (800a590 <ai_platform_network_create+0x190>)
 800a41c:	6812      	ldr	r2, [r2, #0]
 800a41e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a422:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a426:	4603      	mov	r3, r0
 800a428:	d00e      	beq.n	800a448 <ai_platform_network_create+0x48>
 800a42a:	4a5a      	ldr	r2, [pc, #360]	; (800a594 <ai_platform_network_create+0x194>)
 800a42c:	2118      	movs	r1, #24
 800a42e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800a432:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800a436:	2918      	cmp	r1, #24
 800a438:	d018      	beq.n	800a46c <ai_platform_network_create+0x6c>
 800a43a:	f7ff fd1d 	bl	8009e78 <_ai_platform_release_crc>
 800a43e:	f244 1033 	movw	r0, #16691	; 0x4133
 800a442:	b003      	add	sp, #12
 800a444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a448:	4a53      	ldr	r2, [pc, #332]	; (800a598 <ai_platform_network_create+0x198>)
 800a44a:	2101      	movs	r1, #1
 800a44c:	6091      	str	r1, [r2, #8]
 800a44e:	2114      	movs	r1, #20
 800a450:	e001      	b.n	800a456 <ai_platform_network_create+0x56>
 800a452:	3901      	subs	r1, #1
 800a454:	d002      	beq.n	800a45c <ai_platform_network_create+0x5c>
 800a456:	6894      	ldr	r4, [r2, #8]
 800a458:	2c00      	cmp	r4, #0
 800a45a:	d1fa      	bne.n	800a452 <ai_platform_network_create+0x52>
 800a45c:	4a4e      	ldr	r2, [pc, #312]	; (800a598 <ai_platform_network_create+0x198>)
 800a45e:	6891      	ldr	r1, [r2, #8]
 800a460:	b911      	cbnz	r1, 800a468 <ai_platform_network_create+0x68>
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	3201      	adds	r2, #1
 800a466:	d008      	beq.n	800a47a <ai_platform_network_create+0x7a>
 800a468:	4618      	mov	r0, r3
 800a46a:	e7e6      	b.n	800a43a <ai_platform_network_create+0x3a>
 800a46c:	2101      	movs	r1, #1
 800a46e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800a472:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800a476:	2900      	cmp	r1, #0
 800a478:	d1fb      	bne.n	800a472 <ai_platform_network_create+0x72>
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7ff fcfc 	bl	8009e78 <_ai_platform_release_crc>
 800a480:	f7ff fcf8 	bl	8009e74 <_ai_platform_acquire_crc>
 800a484:	4b42      	ldr	r3, [pc, #264]	; (800a590 <ai_platform_network_create+0x190>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a48c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a490:	d010      	beq.n	800a4b4 <ai_platform_network_create+0xb4>
 800a492:	4b40      	ldr	r3, [pc, #256]	; (800a594 <ai_platform_network_create+0x194>)
 800a494:	2201      	movs	r2, #1
 800a496:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800a49a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800a49e:	2900      	cmp	r1, #0
 800a4a0:	d1fb      	bne.n	800a49a <ai_platform_network_create+0x9a>
 800a4a2:	4a3e      	ldr	r2, [pc, #248]	; (800a59c <ai_platform_network_create+0x19c>)
 800a4a4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800a4a8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800a4ac:	4b3c      	ldr	r3, [pc, #240]	; (800a5a0 <ai_platform_network_create+0x1a0>)
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d00c      	beq.n	800a4cc <ai_platform_network_create+0xcc>
 800a4b2:	e7fe      	b.n	800a4b2 <ai_platform_network_create+0xb2>
 800a4b4:	4a38      	ldr	r2, [pc, #224]	; (800a598 <ai_platform_network_create+0x198>)
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	6093      	str	r3, [r2, #8]
 800a4ba:	6893      	ldr	r3, [r2, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1fc      	bne.n	800a4ba <ai_platform_network_create+0xba>
 800a4c0:	4b36      	ldr	r3, [pc, #216]	; (800a59c <ai_platform_network_create+0x19c>)
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	6812      	ldr	r2, [r2, #0]
 800a4c6:	4b36      	ldr	r3, [pc, #216]	; (800a5a0 <ai_platform_network_create+0x1a0>)
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d122      	bne.n	800a512 <ai_platform_network_create+0x112>
 800a4cc:	f7ff fcd4 	bl	8009e78 <_ai_platform_release_crc>
 800a4d0:	b38e      	cbz	r6, 800a536 <ai_platform_network_create+0x136>
 800a4d2:	4b34      	ldr	r3, [pc, #208]	; (800a5a4 <ai_platform_network_create+0x1a4>)
 800a4d4:	602b      	str	r3, [r5, #0]
 800a4d6:	6035      	str	r5, [r6, #0]
 800a4d8:	f000 fc62 	bl	800ada0 <core_init>
 800a4dc:	b1d0      	cbz	r0, 800a514 <ai_platform_network_create+0x114>
 800a4de:	f7ff fcc9 	bl	8009e74 <_ai_platform_acquire_crc>
 800a4e2:	4b2b      	ldr	r3, [pc, #172]	; (800a590 <ai_platform_network_create+0x190>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ee:	d025      	beq.n	800a53c <ai_platform_network_create+0x13c>
 800a4f0:	4a28      	ldr	r2, [pc, #160]	; (800a594 <ai_platform_network_create+0x194>)
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a4f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1fb      	bne.n	800a4f8 <ai_platform_network_create+0xf8>
 800a500:	4b26      	ldr	r3, [pc, #152]	; (800a59c <ai_platform_network_create+0x19c>)
 800a502:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a506:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a50a:	4b25      	ldr	r3, [pc, #148]	; (800a5a0 <ai_platform_network_create+0x1a0>)
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d022      	beq.n	800a556 <ai_platform_network_create+0x156>
 800a510:	e7fe      	b.n	800a510 <ai_platform_network_create+0x110>
 800a512:	e7fe      	b.n	800a512 <ai_platform_network_create+0x112>
 800a514:	2430      	movs	r4, #48	; 0x30
 800a516:	2300      	movs	r3, #0
 800a518:	6033      	str	r3, [r6, #0]
 800a51a:	2610      	movs	r6, #16
 800a51c:	464a      	mov	r2, r9
 800a51e:	4641      	mov	r1, r8
 800a520:	4638      	mov	r0, r7
 800a522:	f002 fa65 	bl	800c9f0 <ai_version_get>
 800a526:	4603      	mov	r3, r0
 800a528:	2000      	movs	r0, #0
 800a52a:	f364 0007 	bfi	r0, r4, #0, #8
 800a52e:	64ab      	str	r3, [r5, #72]	; 0x48
 800a530:	f366 201f 	bfi	r0, r6, #8, #24
 800a534:	e785      	b.n	800a442 <ai_platform_network_create+0x42>
 800a536:	f241 0010 	movw	r0, #4112	; 0x1010
 800a53a:	e782      	b.n	800a442 <ai_platform_network_create+0x42>
 800a53c:	4a16      	ldr	r2, [pc, #88]	; (800a598 <ai_platform_network_create+0x198>)
 800a53e:	2301      	movs	r3, #1
 800a540:	6093      	str	r3, [r2, #8]
 800a542:	6893      	ldr	r3, [r2, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1fc      	bne.n	800a542 <ai_platform_network_create+0x142>
 800a548:	4b14      	ldr	r3, [pc, #80]	; (800a59c <ai_platform_network_create+0x19c>)
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	6812      	ldr	r2, [r2, #0]
 800a54e:	4b14      	ldr	r3, [pc, #80]	; (800a5a0 <ai_platform_network_create+0x1a0>)
 800a550:	429a      	cmp	r2, r3
 800a552:	d000      	beq.n	800a556 <ai_platform_network_create+0x156>
 800a554:	e7fe      	b.n	800a554 <ai_platform_network_create+0x154>
 800a556:	f7ff fc8f 	bl	8009e78 <_ai_platform_release_crc>
 800a55a:	2200      	movs	r2, #0
 800a55c:	4641      	mov	r1, r8
 800a55e:	4638      	mov	r0, r7
 800a560:	f002 fa46 	bl	800c9f0 <ai_version_get>
 800a564:	2200      	movs	r2, #0
 800a566:	4604      	mov	r4, r0
 800a568:	2105      	movs	r1, #5
 800a56a:	2001      	movs	r0, #1
 800a56c:	f002 fa40 	bl	800c9f0 <ai_version_get>
 800a570:	4284      	cmp	r4, r0
 800a572:	d001      	beq.n	800a578 <ai_platform_network_create+0x178>
 800a574:	2401      	movs	r4, #1
 800a576:	e7ce      	b.n	800a516 <ai_platform_network_create+0x116>
 800a578:	4b0b      	ldr	r3, [pc, #44]	; (800a5a8 <ai_platform_network_create+0x1a8>)
 800a57a:	9301      	str	r3, [sp, #4]
 800a57c:	a801      	add	r0, sp, #4
 800a57e:	f000 fc23 	bl	800adc8 <ai_check_custom_types>
 800a582:	b110      	cbz	r0, 800a58a <ai_platform_network_create+0x18a>
 800a584:	2600      	movs	r6, #0
 800a586:	4634      	mov	r4, r6
 800a588:	e7c8      	b.n	800a51c <ai_platform_network_create+0x11c>
 800a58a:	2402      	movs	r4, #2
 800a58c:	e7c3      	b.n	800a516 <ai_platform_network_create+0x116>
 800a58e:	bf00      	nop
 800a590:	e0042000 	.word	0xe0042000
 800a594:	58024000 	.word	0x58024000
 800a598:	40023000 	.word	0x40023000
 800a59c:	f407a5c2 	.word	0xf407a5c2
 800a5a0:	b5e8b5cd 	.word	0xb5e8b5cd
 800a5a4:	a1c00100 	.word	0xa1c00100
 800a5a8:	84048403 	.word	0x84048403

0800a5ac <ai_platform_network_init>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	b1f8      	cbz	r0, 800a5f2 <ai_platform_network_init+0x46>
 800a5b2:	4b6e      	ldr	r3, [pc, #440]	; (800a76c <ai_platform_network_init+0x1c0>)
 800a5b4:	6802      	ldr	r2, [r0, #0]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	d11a      	bne.n	800a5f2 <ai_platform_network_init+0x46>
 800a5bc:	460e      	mov	r6, r1
 800a5be:	f7ff fc59 	bl	8009e74 <_ai_platform_acquire_crc>
 800a5c2:	4b6b      	ldr	r3, [pc, #428]	; (800a770 <ai_platform_network_init+0x1c4>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ce:	d03d      	beq.n	800a64c <ai_platform_network_init+0xa0>
 800a5d0:	4a68      	ldr	r2, [pc, #416]	; (800a774 <ai_platform_network_init+0x1c8>)
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a5d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1fb      	bne.n	800a5d8 <ai_platform_network_init+0x2c>
 800a5e0:	4b65      	ldr	r3, [pc, #404]	; (800a778 <ai_platform_network_init+0x1cc>)
 800a5e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a5e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a5ea:	4b64      	ldr	r3, [pc, #400]	; (800a77c <ai_platform_network_init+0x1d0>)
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d039      	beq.n	800a664 <ai_platform_network_init+0xb8>
 800a5f0:	e7fe      	b.n	800a5f0 <ai_platform_network_init+0x44>
 800a5f2:	f7ff fc3f 	bl	8009e74 <_ai_platform_acquire_crc>
 800a5f6:	4b5e      	ldr	r3, [pc, #376]	; (800a770 <ai_platform_network_init+0x1c4>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a602:	d010      	beq.n	800a626 <ai_platform_network_init+0x7a>
 800a604:	4a5b      	ldr	r2, [pc, #364]	; (800a774 <ai_platform_network_init+0x1c8>)
 800a606:	2301      	movs	r3, #1
 800a608:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a60c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1fb      	bne.n	800a60c <ai_platform_network_init+0x60>
 800a614:	4b58      	ldr	r3, [pc, #352]	; (800a778 <ai_platform_network_init+0x1cc>)
 800a616:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a61a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a61e:	4b57      	ldr	r3, [pc, #348]	; (800a77c <ai_platform_network_init+0x1d0>)
 800a620:	429a      	cmp	r2, r3
 800a622:	d00d      	beq.n	800a640 <ai_platform_network_init+0x94>
 800a624:	e7fe      	b.n	800a624 <ai_platform_network_init+0x78>
 800a626:	4a56      	ldr	r2, [pc, #344]	; (800a780 <ai_platform_network_init+0x1d4>)
 800a628:	2301      	movs	r3, #1
 800a62a:	6093      	str	r3, [r2, #8]
 800a62c:	6893      	ldr	r3, [r2, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1fc      	bne.n	800a62c <ai_platform_network_init+0x80>
 800a632:	4b51      	ldr	r3, [pc, #324]	; (800a778 <ai_platform_network_init+0x1cc>)
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	6812      	ldr	r2, [r2, #0]
 800a638:	4b50      	ldr	r3, [pc, #320]	; (800a77c <ai_platform_network_init+0x1d0>)
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d000      	beq.n	800a640 <ai_platform_network_init+0x94>
 800a63e:	e7fe      	b.n	800a63e <ai_platform_network_init+0x92>
 800a640:	f7ff fc1a 	bl	8009e78 <_ai_platform_release_crc>
 800a644:	2600      	movs	r6, #0
 800a646:	4630      	mov	r0, r6
 800a648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64c:	4a4c      	ldr	r2, [pc, #304]	; (800a780 <ai_platform_network_init+0x1d4>)
 800a64e:	2301      	movs	r3, #1
 800a650:	6093      	str	r3, [r2, #8]
 800a652:	6893      	ldr	r3, [r2, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1fc      	bne.n	800a652 <ai_platform_network_init+0xa6>
 800a658:	4b47      	ldr	r3, [pc, #284]	; (800a778 <ai_platform_network_init+0x1cc>)
 800a65a:	6013      	str	r3, [r2, #0]
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	4b47      	ldr	r3, [pc, #284]	; (800a77c <ai_platform_network_init+0x1d0>)
 800a660:	429a      	cmp	r2, r3
 800a662:	d11c      	bne.n	800a69e <ai_platform_network_init+0xf2>
 800a664:	f7ff fc08 	bl	8009e78 <_ai_platform_release_crc>
 800a668:	2e00      	cmp	r6, #0
 800a66a:	d06f      	beq.n	800a74c <ai_platform_network_init+0x1a0>
 800a66c:	4b45      	ldr	r3, [pc, #276]	; (800a784 <ai_platform_network_init+0x1d8>)
 800a66e:	6832      	ldr	r2, [r6, #0]
 800a670:	429a      	cmp	r2, r3
 800a672:	d115      	bne.n	800a6a0 <ai_platform_network_init+0xf4>
 800a674:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800a678:	6933      	ldr	r3, [r6, #16]
 800a67a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800a67e:	89f7      	ldrh	r7, [r6, #14]
 800a680:	62a3      	str	r3, [r4, #40]	; 0x28
 800a682:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800a686:	2303      	movs	r3, #3
 800a688:	84e7      	strh	r7, [r4, #38]	; 0x26
 800a68a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800a68e:	60e3      	str	r3, [r4, #12]
 800a690:	4620      	mov	r0, r4
 800a692:	4626      	mov	r6, r4
 800a694:	f000 fbc2 	bl	800ae1c <ai_layers_init_all>
 800a698:	4630      	mov	r0, r6
 800a69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69e:	e7fe      	b.n	800a69e <ai_platform_network_init+0xf2>
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4635      	mov	r5, r6
 800a6a6:	6876      	ldr	r6, [r6, #4]
 800a6a8:	f7ff fba6 	bl	8009df8 <ai_buffer_get_size>
 800a6ac:	f105 081c 	add.w	r8, r5, #28
 800a6b0:	4681      	mov	r9, r0
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	6a2f      	ldr	r7, [r5, #32]
 800a6b8:	f7ff fb9e 	bl	8009df8 <ai_buffer_get_size>
 800a6bc:	f1b9 0f00 	cmp.w	r9, #0
 800a6c0:	d025      	beq.n	800a70e <ai_platform_network_init+0x162>
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	4696      	mov	lr, r2
 800a6c6:	bb30      	cbnz	r0, 800a716 <ai_platform_network_init+0x16a>
 800a6c8:	4680      	mov	r8, r0
 800a6ca:	4607      	mov	r7, r0
 800a6cc:	b376      	cbz	r6, 800a72c <ai_platform_network_init+0x180>
 800a6ce:	8be3      	ldrh	r3, [r4, #30]
 800a6d0:	4573      	cmp	r3, lr
 800a6d2:	d323      	bcc.n	800a71c <ai_platform_network_init+0x170>
 800a6d4:	b142      	cbz	r2, 800a6e8 <ai_platform_network_init+0x13c>
 800a6d6:	46ac      	mov	ip, r5
 800a6d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a6dc:	6a25      	ldr	r5, [r4, #32]
 800a6de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a6e0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a6e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a6e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a6ea:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	42bb      	cmp	r3, r7
 800a6f2:	83a6      	strh	r6, [r4, #28]
 800a6f4:	d323      	bcc.n	800a73e <ai_platform_network_init+0x192>
 800a6f6:	b37f      	cbz	r7, 800a758 <ai_platform_network_init+0x1ac>
 800a6f8:	46c4      	mov	ip, r8
 800a6fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a6fe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a702:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a706:	46b6      	mov	lr, r6
 800a708:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a70c:	e7bb      	b.n	800a686 <ai_platform_network_init+0xda>
 800a70e:	464a      	mov	r2, r9
 800a710:	46ce      	mov	lr, r9
 800a712:	464d      	mov	r5, r9
 800a714:	e7d7      	b.n	800a6c6 <ai_platform_network_init+0x11a>
 800a716:	b30f      	cbz	r7, 800a75c <ai_platform_network_init+0x1b0>
 800a718:	2701      	movs	r7, #1
 800a71a:	e7d7      	b.n	800a6cc <ai_platform_network_init+0x120>
 800a71c:	2212      	movs	r2, #18
 800a71e:	2116      	movs	r1, #22
 800a720:	f104 0010 	add.w	r0, r4, #16
 800a724:	f000 fb44 	bl	800adb0 <core_set_error>
 800a728:	2600      	movs	r6, #0
 800a72a:	e78c      	b.n	800a646 <ai_platform_network_init+0x9a>
 800a72c:	f1b9 0f00 	cmp.w	r9, #0
 800a730:	d0cd      	beq.n	800a6ce <ai_platform_network_init+0x122>
 800a732:	2110      	movs	r1, #16
 800a734:	2212      	movs	r2, #18
 800a736:	1860      	adds	r0, r4, r1
 800a738:	f000 fb3a 	bl	800adb0 <core_set_error>
 800a73c:	e783      	b.n	800a646 <ai_platform_network_init+0x9a>
 800a73e:	2213      	movs	r2, #19
 800a740:	2116      	movs	r1, #22
 800a742:	f104 0010 	add.w	r0, r4, #16
 800a746:	f000 fb33 	bl	800adb0 <core_set_error>
 800a74a:	e77c      	b.n	800a646 <ai_platform_network_init+0x9a>
 800a74c:	2110      	movs	r1, #16
 800a74e:	2211      	movs	r2, #17
 800a750:	1860      	adds	r0, r4, r1
 800a752:	f000 fb2d 	bl	800adb0 <core_set_error>
 800a756:	e776      	b.n	800a646 <ai_platform_network_init+0x9a>
 800a758:	46be      	mov	lr, r7
 800a75a:	e794      	b.n	800a686 <ai_platform_network_init+0xda>
 800a75c:	2110      	movs	r1, #16
 800a75e:	2213      	movs	r2, #19
 800a760:	1860      	adds	r0, r4, r1
 800a762:	f000 fb25 	bl	800adb0 <core_set_error>
 800a766:	463e      	mov	r6, r7
 800a768:	e76d      	b.n	800a646 <ai_platform_network_init+0x9a>
 800a76a:	bf00      	nop
 800a76c:	a1c00100 	.word	0xa1c00100
 800a770:	e0042000 	.word	0xe0042000
 800a774:	58024000 	.word	0x58024000
 800a778:	f407a5c2 	.word	0xf407a5c2
 800a77c:	b5e8b5cd 	.word	0xb5e8b5cd
 800a780:	40023000 	.word	0x40023000
 800a784:	a1facade 	.word	0xa1facade

0800a788 <ai_platform_network_post_init>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	b1f0      	cbz	r0, 800a7ca <ai_platform_network_post_init+0x42>
 800a78c:	4b3c      	ldr	r3, [pc, #240]	; (800a880 <ai_platform_network_post_init+0xf8>)
 800a78e:	6802      	ldr	r2, [r0, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	4604      	mov	r4, r0
 800a794:	d119      	bne.n	800a7ca <ai_platform_network_post_init+0x42>
 800a796:	f7ff fb6d 	bl	8009e74 <_ai_platform_acquire_crc>
 800a79a:	4b3a      	ldr	r3, [pc, #232]	; (800a884 <ai_platform_network_post_init+0xfc>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7a6:	d03b      	beq.n	800a820 <ai_platform_network_post_init+0x98>
 800a7a8:	4a37      	ldr	r2, [pc, #220]	; (800a888 <ai_platform_network_post_init+0x100>)
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a7b0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1fb      	bne.n	800a7b0 <ai_platform_network_post_init+0x28>
 800a7b8:	4b34      	ldr	r3, [pc, #208]	; (800a88c <ai_platform_network_post_init+0x104>)
 800a7ba:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a7be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a7c2:	4b33      	ldr	r3, [pc, #204]	; (800a890 <ai_platform_network_post_init+0x108>)
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d037      	beq.n	800a838 <ai_platform_network_post_init+0xb0>
 800a7c8:	e7fe      	b.n	800a7c8 <ai_platform_network_post_init+0x40>
 800a7ca:	f7ff fb53 	bl	8009e74 <_ai_platform_acquire_crc>
 800a7ce:	4b2d      	ldr	r3, [pc, #180]	; (800a884 <ai_platform_network_post_init+0xfc>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7da:	d010      	beq.n	800a7fe <ai_platform_network_post_init+0x76>
 800a7dc:	4a2a      	ldr	r2, [pc, #168]	; (800a888 <ai_platform_network_post_init+0x100>)
 800a7de:	2301      	movs	r3, #1
 800a7e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a7e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1fb      	bne.n	800a7e4 <ai_platform_network_post_init+0x5c>
 800a7ec:	4b27      	ldr	r3, [pc, #156]	; (800a88c <ai_platform_network_post_init+0x104>)
 800a7ee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a7f2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a7f6:	4b26      	ldr	r3, [pc, #152]	; (800a890 <ai_platform_network_post_init+0x108>)
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d00d      	beq.n	800a818 <ai_platform_network_post_init+0x90>
 800a7fc:	e7fe      	b.n	800a7fc <ai_platform_network_post_init+0x74>
 800a7fe:	4a25      	ldr	r2, [pc, #148]	; (800a894 <ai_platform_network_post_init+0x10c>)
 800a800:	2301      	movs	r3, #1
 800a802:	6093      	str	r3, [r2, #8]
 800a804:	6893      	ldr	r3, [r2, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1fc      	bne.n	800a804 <ai_platform_network_post_init+0x7c>
 800a80a:	4b20      	ldr	r3, [pc, #128]	; (800a88c <ai_platform_network_post_init+0x104>)
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	6812      	ldr	r2, [r2, #0]
 800a810:	4b1f      	ldr	r3, [pc, #124]	; (800a890 <ai_platform_network_post_init+0x108>)
 800a812:	429a      	cmp	r2, r3
 800a814:	d000      	beq.n	800a818 <ai_platform_network_post_init+0x90>
 800a816:	e7fe      	b.n	800a816 <ai_platform_network_post_init+0x8e>
 800a818:	f7ff fb2e 	bl	8009e78 <_ai_platform_release_crc>
 800a81c:	2000      	movs	r0, #0
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	4a1c      	ldr	r2, [pc, #112]	; (800a894 <ai_platform_network_post_init+0x10c>)
 800a822:	2301      	movs	r3, #1
 800a824:	6093      	str	r3, [r2, #8]
 800a826:	6893      	ldr	r3, [r2, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1fc      	bne.n	800a826 <ai_platform_network_post_init+0x9e>
 800a82c:	4b17      	ldr	r3, [pc, #92]	; (800a88c <ai_platform_network_post_init+0x104>)
 800a82e:	6013      	str	r3, [r2, #0]
 800a830:	6812      	ldr	r2, [r2, #0]
 800a832:	4b17      	ldr	r3, [pc, #92]	; (800a890 <ai_platform_network_post_init+0x108>)
 800a834:	429a      	cmp	r2, r3
 800a836:	d11a      	bne.n	800a86e <ai_platform_network_post_init+0xe6>
 800a838:	f7ff fb1e 	bl	8009e78 <_ai_platform_release_crc>
 800a83c:	68e3      	ldr	r3, [r4, #12]
 800a83e:	f013 0502 	ands.w	r5, r3, #2
 800a842:	d015      	beq.n	800a870 <ai_platform_network_post_init+0xe8>
 800a844:	4620      	mov	r0, r4
 800a846:	f000 faf7 	bl	800ae38 <ai_layers_post_init_all>
 800a84a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a84c:	b16b      	cbz	r3, 800a86a <ai_platform_network_post_init+0xe2>
 800a84e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a850:	e007      	b.n	800a862 <ai_platform_network_post_init+0xda>
 800a852:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800a856:	4798      	blx	r3
 800a858:	692b      	ldr	r3, [r5, #16]
 800a85a:	42ab      	cmp	r3, r5
 800a85c:	d005      	beq.n	800a86a <ai_platform_network_post_init+0xe2>
 800a85e:	b123      	cbz	r3, 800a86a <ai_platform_network_post_init+0xe2>
 800a860:	461d      	mov	r5, r3
 800a862:	4629      	mov	r1, r5
 800a864:	2000      	movs	r0, #0
 800a866:	2d00      	cmp	r5, #0
 800a868:	d1f3      	bne.n	800a852 <ai_platform_network_post_init+0xca>
 800a86a:	2001      	movs	r0, #1
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	e7fe      	b.n	800a86e <ai_platform_network_post_init+0xe6>
 800a870:	2210      	movs	r2, #16
 800a872:	2111      	movs	r1, #17
 800a874:	18a0      	adds	r0, r4, r2
 800a876:	f000 fa9b 	bl	800adb0 <core_set_error>
 800a87a:	4628      	mov	r0, r5
 800a87c:	bd38      	pop	{r3, r4, r5, pc}
 800a87e:	bf00      	nop
 800a880:	a1c00100 	.word	0xa1c00100
 800a884:	e0042000 	.word	0xe0042000
 800a888:	58024000 	.word	0x58024000
 800a88c:	f407a5c2 	.word	0xf407a5c2
 800a890:	b5e8b5cd 	.word	0xb5e8b5cd
 800a894:	40023000 	.word	0x40023000

0800a898 <ai_platform_network_process>:
 800a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	460e      	mov	r6, r1
 800a89e:	b085      	sub	sp, #20
 800a8a0:	4693      	mov	fp, r2
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	b120      	cbz	r0, 800a8b0 <ai_platform_network_process+0x18>
 800a8a6:	4bb8      	ldr	r3, [pc, #736]	; (800ab88 <ai_platform_network_process+0x2f0>)
 800a8a8:	6802      	ldr	r2, [r0, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	bf18      	it	ne
 800a8ae:	2500      	movne	r5, #0
 800a8b0:	f7ff fae0 	bl	8009e74 <_ai_platform_acquire_crc>
 800a8b4:	4bb5      	ldr	r3, [pc, #724]	; (800ab8c <ai_platform_network_process+0x2f4>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c0:	d010      	beq.n	800a8e4 <ai_platform_network_process+0x4c>
 800a8c2:	4ab3      	ldr	r2, [pc, #716]	; (800ab90 <ai_platform_network_process+0x2f8>)
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a8ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1fb      	bne.n	800a8ca <ai_platform_network_process+0x32>
 800a8d2:	4bb0      	ldr	r3, [pc, #704]	; (800ab94 <ai_platform_network_process+0x2fc>)
 800a8d4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a8d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a8dc:	4bae      	ldr	r3, [pc, #696]	; (800ab98 <ai_platform_network_process+0x300>)
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d00d      	beq.n	800a8fe <ai_platform_network_process+0x66>
 800a8e2:	e7fe      	b.n	800a8e2 <ai_platform_network_process+0x4a>
 800a8e4:	4aad      	ldr	r2, [pc, #692]	; (800ab9c <ai_platform_network_process+0x304>)
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	6093      	str	r3, [r2, #8]
 800a8ea:	6893      	ldr	r3, [r2, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1fc      	bne.n	800a8ea <ai_platform_network_process+0x52>
 800a8f0:	4ba8      	ldr	r3, [pc, #672]	; (800ab94 <ai_platform_network_process+0x2fc>)
 800a8f2:	6013      	str	r3, [r2, #0]
 800a8f4:	6812      	ldr	r2, [r2, #0]
 800a8f6:	4ba8      	ldr	r3, [pc, #672]	; (800ab98 <ai_platform_network_process+0x300>)
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	f040 812c 	bne.w	800ab56 <ai_platform_network_process+0x2be>
 800a8fe:	f7ff fabb 	bl	8009e78 <_ai_platform_release_crc>
 800a902:	2d00      	cmp	r5, #0
 800a904:	f000 8154 	beq.w	800abb0 <ai_platform_network_process+0x318>
 800a908:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 8124 	beq.w	800ab58 <ai_platform_network_process+0x2c0>
 800a910:	68eb      	ldr	r3, [r5, #12]
 800a912:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	2700      	movs	r7, #0
 800a91c:	2b03      	cmp	r3, #3
 800a91e:	616f      	str	r7, [r5, #20]
 800a920:	f040 813e 	bne.w	800aba0 <ai_platform_network_process+0x308>
 800a924:	2e00      	cmp	r6, #0
 800a926:	f000 811d 	beq.w	800ab64 <ai_platform_network_process+0x2cc>
 800a92a:	f1ba 0f00 	cmp.w	sl, #0
 800a92e:	f000 8119 	beq.w	800ab64 <ai_platform_network_process+0x2cc>
 800a932:	f8ba 3000 	ldrh.w	r3, [sl]
 800a936:	2b00      	cmp	r3, #0
 800a938:	f000 8114 	beq.w	800ab64 <ai_platform_network_process+0x2cc>
 800a93c:	69b3      	ldr	r3, [r6, #24]
 800a93e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800a948:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d072      	beq.n	800aa36 <ai_platform_network_process+0x19e>
 800a950:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a954:	2c00      	cmp	r4, #0
 800a956:	d06e      	beq.n	800aa36 <ai_platform_network_process+0x19e>
 800a958:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a95c:	f8d3 9000 	ldr.w	r9, [r3]
 800a960:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800a964:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800a968:	f000 81de 	beq.w	800ad28 <ai_platform_network_process+0x490>
 800a96c:	69a3      	ldr	r3, [r4, #24]
 800a96e:	2101      	movs	r1, #1
 800a970:	4630      	mov	r0, r6
 800a972:	685d      	ldr	r5, [r3, #4]
 800a974:	f7ff fa40 	bl	8009df8 <ai_buffer_get_size>
 800a978:	4285      	cmp	r5, r0
 800a97a:	f0c0 811b 	bcc.w	800abb4 <ai_platform_network_process+0x31c>
 800a97e:	68e0      	ldr	r0, [r4, #12]
 800a980:	69b1      	ldr	r1, [r6, #24]
 800a982:	68c2      	ldr	r2, [r0, #12]
 800a984:	68cb      	ldr	r3, [r1, #12]
 800a986:	429a      	cmp	r2, r3
 800a988:	f040 8114 	bne.w	800abb4 <ai_platform_network_process+0x31c>
 800a98c:	6882      	ldr	r2, [r0, #8]
 800a98e:	688b      	ldr	r3, [r1, #8]
 800a990:	429a      	cmp	r2, r3
 800a992:	f040 810f 	bne.w	800abb4 <ai_platform_network_process+0x31c>
 800a996:	6842      	ldr	r2, [r0, #4]
 800a998:	684b      	ldr	r3, [r1, #4]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	f040 810a 	bne.w	800abb4 <ai_platform_network_process+0x31c>
 800a9a0:	69a3      	ldr	r3, [r4, #24]
 800a9a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9a6:	f002 f811 	bl	800c9cc <ai_array_get_data_byte_size>
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f002 f825 	bl	800c9fc <get_tensor_byte_size>
 800a9b2:	4285      	cmp	r5, r0
 800a9b4:	f0c0 80fe 	bcc.w	800abb4 <ai_platform_network_process+0x31c>
 800a9b8:	69a3      	ldr	r3, [r4, #24]
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	f001 ff72 	bl	800c8a4 <ai_array_to_buffer_fmt>
 800a9c0:	6833      	ldr	r3, [r6, #0]
 800a9c2:	4058      	eors	r0, r3
 800a9c4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800a9c8:	f040 81b9 	bne.w	800ad3e <ai_platform_network_process+0x4a6>
 800a9cc:	6873      	ldr	r3, [r6, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 81ac 	beq.w	800ad2c <ai_platform_network_process+0x494>
 800a9d4:	69b3      	ldr	r3, [r6, #24]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 819c 	beq.w	800ad16 <ai_platform_network_process+0x47e>
 800a9de:	9a01      	ldr	r2, [sp, #4]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	bf38      	it	cc
 800a9e4:	461a      	movcc	r2, r3
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	9201      	str	r2, [sp, #4]
 800a9ea:	f002 f807 	bl	800c9fc <get_tensor_byte_size>
 800a9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9f2:	69b3      	ldr	r3, [r6, #24]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	fb00 f303 	mul.w	r3, r0, r3
 800a9fa:	f8c8 300c 	str.w	r3, [r8, #12]
 800a9fe:	6871      	ldr	r1, [r6, #4]
 800aa00:	f8c8 1004 	str.w	r1, [r8, #4]
 800aa04:	440b      	add	r3, r1
 800aa06:	f849 300b 	str.w	r3, [r9, fp]
 800aa0a:	69a0      	ldr	r0, [r4, #24]
 800aa0c:	6803      	ldr	r3, [r0, #0]
 800aa0e:	009a      	lsls	r2, r3, #2
 800aa10:	f107 0701 	add.w	r7, r7, #1
 800aa14:	f106 061c 	add.w	r6, r6, #28
 800aa18:	f100 80af 	bmi.w	800ab7a <ai_platform_network_process+0x2e2>
 800aa1c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800aa20:	1a9b      	subs	r3, r3, r2
 800aa22:	4419      	add	r1, r3
 800aa24:	6081      	str	r1, [r0, #8]
 800aa26:	69a3      	ldr	r3, [r4, #24]
 800aa28:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800aa2c:	60da      	str	r2, [r3, #12]
 800aa2e:	f8ba 3000 	ldrh.w	r3, [sl]
 800aa32:	42bb      	cmp	r3, r7
 800aa34:	d888      	bhi.n	800a948 <ai_platform_network_process+0xb0>
 800aa36:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800aa3a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800aa3c:	f1bb 0f00 	cmp.w	fp, #0
 800aa40:	f000 8186 	beq.w	800ad50 <ai_platform_network_process+0x4b8>
 800aa44:	2a01      	cmp	r2, #1
 800aa46:	f240 815e 	bls.w	800ad06 <ai_platform_network_process+0x46e>
 800aa4a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800aa4e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 8157 	beq.w	800ad06 <ai_platform_network_process+0x46e>
 800aa58:	465e      	mov	r6, fp
 800aa5a:	2700      	movs	r7, #0
 800aa5c:	462c      	mov	r4, r5
 800aa5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 80b4 	beq.w	800abd0 <ai_platform_network_process+0x338>
 800aa68:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800aa6c:	2d00      	cmp	r5, #0
 800aa6e:	f000 80af 	beq.w	800abd0 <ai_platform_network_process+0x338>
 800aa72:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800aa76:	f8d3 8000 	ldr.w	r8, [r3]
 800aa7a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800aa7e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800aa82:	f000 8171 	beq.w	800ad68 <ai_platform_network_process+0x4d0>
 800aa86:	69ab      	ldr	r3, [r5, #24]
 800aa88:	2101      	movs	r1, #1
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	9302      	str	r3, [sp, #8]
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f7ff f9b2 	bl	8009df8 <ai_buffer_get_size>
 800aa94:	9b02      	ldr	r3, [sp, #8]
 800aa96:	4283      	cmp	r3, r0
 800aa98:	f0c0 8134 	bcc.w	800ad04 <ai_platform_network_process+0x46c>
 800aa9c:	68e8      	ldr	r0, [r5, #12]
 800aa9e:	69b1      	ldr	r1, [r6, #24]
 800aaa0:	68c2      	ldr	r2, [r0, #12]
 800aaa2:	68cb      	ldr	r3, [r1, #12]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	f040 812d 	bne.w	800ad04 <ai_platform_network_process+0x46c>
 800aaaa:	6882      	ldr	r2, [r0, #8]
 800aaac:	688b      	ldr	r3, [r1, #8]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	f040 8128 	bne.w	800ad04 <ai_platform_network_process+0x46c>
 800aab4:	6842      	ldr	r2, [r0, #4]
 800aab6:	684b      	ldr	r3, [r1, #4]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	f040 8123 	bne.w	800ad04 <ai_platform_network_process+0x46c>
 800aabe:	69ab      	ldr	r3, [r5, #24]
 800aac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aac4:	f001 ff82 	bl	800c9cc <ai_array_get_data_byte_size>
 800aac8:	9002      	str	r0, [sp, #8]
 800aaca:	4628      	mov	r0, r5
 800aacc:	f001 ff96 	bl	800c9fc <get_tensor_byte_size>
 800aad0:	9b02      	ldr	r3, [sp, #8]
 800aad2:	4283      	cmp	r3, r0
 800aad4:	f0c0 8116 	bcc.w	800ad04 <ai_platform_network_process+0x46c>
 800aad8:	69ab      	ldr	r3, [r5, #24]
 800aada:	6818      	ldr	r0, [r3, #0]
 800aadc:	f001 fee2 	bl	800c8a4 <ai_array_to_buffer_fmt>
 800aae0:	6833      	ldr	r3, [r6, #0]
 800aae2:	4058      	eors	r0, r3
 800aae4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800aae8:	f040 8136 	bne.w	800ad58 <ai_platform_network_process+0x4c0>
 800aaec:	6873      	ldr	r3, [r6, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 814d 	beq.w	800ad8e <ai_platform_network_process+0x4f6>
 800aaf4:	69b3      	ldr	r3, [r6, #24]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 813f 	beq.w	800ad7c <ai_platform_network_process+0x4e4>
 800aafe:	9a01      	ldr	r2, [sp, #4]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	bf38      	it	cc
 800ab04:	461a      	movcc	r2, r3
 800ab06:	4628      	mov	r0, r5
 800ab08:	9201      	str	r2, [sp, #4]
 800ab0a:	f001 ff77 	bl	800c9fc <get_tensor_byte_size>
 800ab0e:	f8ca 0008 	str.w	r0, [sl, #8]
 800ab12:	69b3      	ldr	r3, [r6, #24]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	fb00 f303 	mul.w	r3, r0, r3
 800ab1a:	f8ca 300c 	str.w	r3, [sl, #12]
 800ab1e:	6871      	ldr	r1, [r6, #4]
 800ab20:	f8ca 1004 	str.w	r1, [sl, #4]
 800ab24:	440b      	add	r3, r1
 800ab26:	f848 300b 	str.w	r3, [r8, fp]
 800ab2a:	69a8      	ldr	r0, [r5, #24]
 800ab2c:	6803      	ldr	r3, [r0, #0]
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	f107 0701 	add.w	r7, r7, #1
 800ab34:	f106 061c 	add.w	r6, r6, #28
 800ab38:	d445      	bmi.n	800abc6 <ai_platform_network_process+0x32e>
 800ab3a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ab3e:	1a9b      	subs	r3, r3, r2
 800ab40:	4419      	add	r1, r3
 800ab42:	6081      	str	r1, [r0, #8]
 800ab44:	69ab      	ldr	r3, [r5, #24]
 800ab46:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ab4a:	60da      	str	r2, [r3, #12]
 800ab4c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ab50:	429f      	cmp	r7, r3
 800ab52:	d384      	bcc.n	800aa5e <ai_platform_network_process+0x1c6>
 800ab54:	e03c      	b.n	800abd0 <ai_platform_network_process+0x338>
 800ab56:	e7fe      	b.n	800ab56 <ai_platform_network_process+0x2be>
 800ab58:	68ea      	ldr	r2, [r5, #12]
 800ab5a:	616b      	str	r3, [r5, #20]
 800ab5c:	f002 0203 	and.w	r2, r2, #3
 800ab60:	2a03      	cmp	r2, #3
 800ab62:	d11d      	bne.n	800aba0 <ai_platform_network_process+0x308>
 800ab64:	2217      	movs	r2, #23
 800ab66:	2112      	movs	r1, #18
 800ab68:	f105 0010 	add.w	r0, r5, #16
 800ab6c:	f000 f920 	bl	800adb0 <core_set_error>
 800ab70:	2400      	movs	r4, #0
 800ab72:	4620      	mov	r0, r4
 800ab74:	b005      	add	sp, #20
 800ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7a:	f8ba 3000 	ldrh.w	r3, [sl]
 800ab7e:	429f      	cmp	r7, r3
 800ab80:	f4ff aee2 	bcc.w	800a948 <ai_platform_network_process+0xb0>
 800ab84:	e757      	b.n	800aa36 <ai_platform_network_process+0x19e>
 800ab86:	bf00      	nop
 800ab88:	a1c00100 	.word	0xa1c00100
 800ab8c:	e0042000 	.word	0xe0042000
 800ab90:	58024000 	.word	0x58024000
 800ab94:	f407a5c2 	.word	0xf407a5c2
 800ab98:	b5e8b5cd 	.word	0xb5e8b5cd
 800ab9c:	40023000 	.word	0x40023000
 800aba0:	2230      	movs	r2, #48	; 0x30
 800aba2:	2111      	movs	r1, #17
 800aba4:	f105 0010 	add.w	r0, r5, #16
 800aba8:	f000 f902 	bl	800adb0 <core_set_error>
 800abac:	2400      	movs	r4, #0
 800abae:	e7e0      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800abb0:	462c      	mov	r4, r5
 800abb2:	e7de      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800abb4:	9d02      	ldr	r5, [sp, #8]
 800abb6:	2218      	movs	r2, #24
 800abb8:	2112      	movs	r1, #18
 800abba:	f105 0010 	add.w	r0, r5, #16
 800abbe:	f000 f8f7 	bl	800adb0 <core_set_error>
 800abc2:	2400      	movs	r4, #0
 800abc4:	e7d5      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800abc6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800abca:	429f      	cmp	r7, r3
 800abcc:	f4ff af47 	bcc.w	800aa5e <ai_platform_network_process+0x1c6>
 800abd0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800abd4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800abd6:	82a3      	strh	r3, [r4, #20]
 800abd8:	4625      	mov	r5, r4
 800abda:	2a00      	cmp	r2, #0
 800abdc:	f040 808c 	bne.w	800acf8 <ai_platform_network_process+0x460>
 800abe0:	4616      	mov	r6, r2
 800abe2:	4617      	mov	r7, r2
 800abe4:	8aec      	ldrh	r4, [r5, #22]
 800abe6:	429c      	cmp	r4, r3
 800abe8:	bf38      	it	cc
 800abea:	46ab      	movcc	fp, r5
 800abec:	d2c1      	bcs.n	800ab72 <ai_platform_network_process+0x2da>
 800abee:	2e00      	cmp	r6, #0
 800abf0:	d030      	beq.n	800ac54 <ai_platform_network_process+0x3bc>
 800abf2:	f04f 0800 	mov.w	r8, #0
 800abf6:	e014      	b.n	800ac22 <ai_platform_network_process+0x38a>
 800abf8:	6882      	ldr	r2, [r0, #8]
 800abfa:	68c5      	ldr	r5, [r0, #12]
 800abfc:	6863      	ldr	r3, [r4, #4]
 800abfe:	1b52      	subs	r2, r2, r5
 800ac00:	4413      	add	r3, r2
 800ac02:	6083      	str	r3, [r0, #8]
 800ac04:	698b      	ldr	r3, [r1, #24]
 800ac06:	6862      	ldr	r2, [r4, #4]
 800ac08:	60da      	str	r2, [r3, #12]
 800ac0a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800ac0e:	f859 200a 	ldr.w	r2, [r9, sl]
 800ac12:	440b      	add	r3, r1
 800ac14:	4293      	cmp	r3, r2
 800ac16:	bf24      	itt	cs
 800ac18:	68e3      	ldrcs	r3, [r4, #12]
 800ac1a:	1ad3      	subcs	r3, r2, r3
 800ac1c:	6063      	str	r3, [r4, #4]
 800ac1e:	f108 0801 	add.w	r8, r8, #1
 800ac22:	8833      	ldrh	r3, [r6, #0]
 800ac24:	4543      	cmp	r3, r8
 800ac26:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800ac2a:	d913      	bls.n	800ac54 <ai_platform_network_process+0x3bc>
 800ac2c:	6873      	ldr	r3, [r6, #4]
 800ac2e:	b18b      	cbz	r3, 800ac54 <ai_platform_network_process+0x3bc>
 800ac30:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800ac34:	b171      	cbz	r1, 800ac54 <ai_platform_network_process+0x3bc>
 800ac36:	6988      	ldr	r0, [r1, #24]
 800ac38:	68b2      	ldr	r2, [r6, #8]
 800ac3a:	6803      	ldr	r3, [r0, #0]
 800ac3c:	f8d2 9000 	ldr.w	r9, [r2]
 800ac40:	009d      	lsls	r5, r3, #2
 800ac42:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800ac46:	d5d7      	bpl.n	800abf8 <ai_platform_network_process+0x360>
 800ac48:	6881      	ldr	r1, [r0, #8]
 800ac4a:	68a2      	ldr	r2, [r4, #8]
 800ac4c:	6860      	ldr	r0, [r4, #4]
 800ac4e:	f001 fda3 	bl	800c798 <st_int8_copy>
 800ac52:	e7da      	b.n	800ac0a <ai_platform_network_process+0x372>
 800ac54:	4658      	mov	r0, fp
 800ac56:	f000 f903 	bl	800ae60 <ai_layers_forward_all>
 800ac5a:	2f00      	cmp	r7, #0
 800ac5c:	d03d      	beq.n	800acda <ai_platform_network_process+0x442>
 800ac5e:	2400      	movs	r4, #0
 800ac60:	e016      	b.n	800ac90 <ai_platform_network_process+0x3f8>
 800ac62:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800ac66:	f859 100a 	ldr.w	r1, [r9, sl]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	428b      	cmp	r3, r1
 800ac6e:	bf24      	itt	cs
 800ac70:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800ac74:	1acb      	subcs	r3, r1, r3
 800ac76:	f8c8 3004 	str.w	r3, [r8, #4]
 800ac7a:	6981      	ldr	r1, [r0, #24]
 800ac7c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800ac80:	1b52      	subs	r2, r2, r5
 800ac82:	4413      	add	r3, r2
 800ac84:	608b      	str	r3, [r1, #8]
 800ac86:	6983      	ldr	r3, [r0, #24]
 800ac88:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ac8c:	60da      	str	r2, [r3, #12]
 800ac8e:	3401      	adds	r4, #1
 800ac90:	883b      	ldrh	r3, [r7, #0]
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	d921      	bls.n	800acda <ai_platform_network_process+0x442>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	b1fb      	cbz	r3, 800acda <ai_platform_network_process+0x442>
 800ac9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ac9e:	b1e0      	cbz	r0, 800acda <ai_platform_network_process+0x442>
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	6983      	ldr	r3, [r0, #24]
 800aca4:	f8d2 9000 	ldr.w	r9, [r2]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	0092      	lsls	r2, r2, #2
 800acac:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800acb0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800acb4:	d5d5      	bpl.n	800ac62 <ai_platform_network_process+0x3ca>
 800acb6:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800acba:	6898      	ldr	r0, [r3, #8]
 800acbc:	f001 fd6c 	bl	800c798 <st_int8_copy>
 800acc0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800acc4:	f859 200a 	ldr.w	r2, [r9, sl]
 800acc8:	440b      	add	r3, r1
 800acca:	4293      	cmp	r3, r2
 800accc:	bf24      	itt	cs
 800acce:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800acd2:	1ad3      	subcs	r3, r2, r3
 800acd4:	f8c8 3004 	str.w	r3, [r8, #4]
 800acd8:	e7d9      	b.n	800ac8e <ai_platform_network_process+0x3f6>
 800acda:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800acde:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800ace2:	3401      	adds	r4, #1
 800ace4:	b2a4      	uxth	r4, r4
 800ace6:	42a3      	cmp	r3, r4
 800ace8:	f8ab 4016 	strh.w	r4, [fp, #22]
 800acec:	f63f af7f 	bhi.w	800abee <ai_platform_network_process+0x356>
 800acf0:	4620      	mov	r0, r4
 800acf2:	b005      	add	sp, #20
 800acf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf8:	2a01      	cmp	r2, #1
 800acfa:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800acfc:	d03c      	beq.n	800ad78 <ai_platform_network_process+0x4e0>
 800acfe:	f106 070c 	add.w	r7, r6, #12
 800ad02:	e76f      	b.n	800abe4 <ai_platform_network_process+0x34c>
 800ad04:	4625      	mov	r5, r4
 800ad06:	2218      	movs	r2, #24
 800ad08:	2113      	movs	r1, #19
 800ad0a:	f105 0010 	add.w	r0, r5, #16
 800ad0e:	f000 f84f 	bl	800adb0 <core_set_error>
 800ad12:	2400      	movs	r4, #0
 800ad14:	e72d      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800ad16:	9d02      	ldr	r5, [sp, #8]
 800ad18:	4604      	mov	r4, r0
 800ad1a:	2221      	movs	r2, #33	; 0x21
 800ad1c:	2112      	movs	r1, #18
 800ad1e:	f105 0010 	add.w	r0, r5, #16
 800ad22:	f000 f845 	bl	800adb0 <core_set_error>
 800ad26:	e724      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800ad28:	9d02      	ldr	r5, [sp, #8]
 800ad2a:	e71b      	b.n	800ab64 <ai_platform_network_process+0x2cc>
 800ad2c:	9d02      	ldr	r5, [sp, #8]
 800ad2e:	4604      	mov	r4, r0
 800ad30:	2217      	movs	r2, #23
 800ad32:	2112      	movs	r1, #18
 800ad34:	f105 0010 	add.w	r0, r5, #16
 800ad38:	f000 f83a 	bl	800adb0 <core_set_error>
 800ad3c:	e719      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800ad3e:	9d02      	ldr	r5, [sp, #8]
 800ad40:	2219      	movs	r2, #25
 800ad42:	2112      	movs	r1, #18
 800ad44:	f105 0010 	add.w	r0, r5, #16
 800ad48:	f000 f832 	bl	800adb0 <core_set_error>
 800ad4c:	2400      	movs	r4, #0
 800ad4e:	e710      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800ad50:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ad54:	82ab      	strh	r3, [r5, #20]
 800ad56:	e740      	b.n	800abda <ai_platform_network_process+0x342>
 800ad58:	f104 0010 	add.w	r0, r4, #16
 800ad5c:	2219      	movs	r2, #25
 800ad5e:	2113      	movs	r1, #19
 800ad60:	f000 f826 	bl	800adb0 <core_set_error>
 800ad64:	2400      	movs	r4, #0
 800ad66:	e704      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800ad68:	f104 0010 	add.w	r0, r4, #16
 800ad6c:	2217      	movs	r2, #23
 800ad6e:	2113      	movs	r1, #19
 800ad70:	f000 f81e 	bl	800adb0 <core_set_error>
 800ad74:	4654      	mov	r4, sl
 800ad76:	e6fc      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800ad78:	2700      	movs	r7, #0
 800ad7a:	e733      	b.n	800abe4 <ai_platform_network_process+0x34c>
 800ad7c:	4625      	mov	r5, r4
 800ad7e:	2221      	movs	r2, #33	; 0x21
 800ad80:	4604      	mov	r4, r0
 800ad82:	2113      	movs	r1, #19
 800ad84:	f105 0010 	add.w	r0, r5, #16
 800ad88:	f000 f812 	bl	800adb0 <core_set_error>
 800ad8c:	e6f1      	b.n	800ab72 <ai_platform_network_process+0x2da>
 800ad8e:	4625      	mov	r5, r4
 800ad90:	2217      	movs	r2, #23
 800ad92:	4604      	mov	r4, r0
 800ad94:	2113      	movs	r1, #19
 800ad96:	f105 0010 	add.w	r0, r5, #16
 800ad9a:	f000 f809 	bl	800adb0 <core_set_error>
 800ad9e:	e6e8      	b.n	800ab72 <ai_platform_network_process+0x2da>

0800ada0 <core_init>:
 800ada0:	2001      	movs	r0, #1
 800ada2:	4770      	bx	lr

0800ada4 <core_get_error>:
 800ada4:	4603      	mov	r3, r0
 800ada6:	2200      	movs	r2, #0
 800ada8:	6800      	ldr	r0, [r0, #0]
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop

0800adb0 <core_set_error>:
 800adb0:	4603      	mov	r3, r0
 800adb2:	7800      	ldrb	r0, [r0, #0]
 800adb4:	b108      	cbz	r0, 800adba <core_set_error+0xa>
 800adb6:	2000      	movs	r0, #0
 800adb8:	4770      	bx	lr
 800adba:	7019      	strb	r1, [r3, #0]
 800adbc:	6819      	ldr	r1, [r3, #0]
 800adbe:	f362 211f 	bfi	r1, r2, #8, #24
 800adc2:	2001      	movs	r0, #1
 800adc4:	6019      	str	r1, [r3, #0]
 800adc6:	4770      	bx	lr

0800adc8 <ai_check_custom_types>:
 800adc8:	b082      	sub	sp, #8
 800adca:	4b13      	ldr	r3, [pc, #76]	; (800ae18 <ai_check_custom_types+0x50>)
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	b118      	cbz	r0, 800add8 <ai_check_custom_types+0x10>
 800add0:	7803      	ldrb	r3, [r0, #0]
 800add2:	2b03      	cmp	r3, #3
 800add4:	d002      	beq.n	800addc <ai_check_custom_types+0x14>
 800add6:	2000      	movs	r0, #0
 800add8:	b002      	add	sp, #8
 800adda:	4770      	bx	lr
 800addc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d004      	beq.n	800adee <ai_check_custom_types+0x26>
 800ade4:	2001      	movs	r0, #1
 800ade6:	f080 0001 	eor.w	r0, r0, #1
 800adea:	b002      	add	sp, #8
 800adec:	4770      	bx	lr
 800adee:	7842      	ldrb	r2, [r0, #1]
 800adf0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	f100 0001 	add.w	r0, r0, #1
 800adfa:	d1f3      	bne.n	800ade4 <ai_check_custom_types+0x1c>
 800adfc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ae00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d1ed      	bne.n	800ade4 <ai_check_custom_types+0x1c>
 800ae08:	7842      	ldrb	r2, [r0, #1]
 800ae0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d1e8      	bne.n	800ade4 <ai_check_custom_types+0x1c>
 800ae12:	2000      	movs	r0, #0
 800ae14:	e7e7      	b.n	800ade6 <ai_check_custom_types+0x1e>
 800ae16:	bf00      	nop
 800ae18:	84048403 	.word	0x84048403

0800ae1c <ai_layers_init_all>:
 800ae1c:	4601      	mov	r1, r0
 800ae1e:	2000      	movs	r0, #0
 800ae20:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ae22:	b143      	cbz	r3, 800ae36 <ai_layers_init_all+0x1a>
 800ae24:	691a      	ldr	r2, [r3, #16]
 800ae26:	60d9      	str	r1, [r3, #12]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	f100 0001 	add.w	r0, r0, #1
 800ae2e:	d002      	beq.n	800ae36 <ai_layers_init_all+0x1a>
 800ae30:	b10a      	cbz	r2, 800ae36 <ai_layers_init_all+0x1a>
 800ae32:	4613      	mov	r3, r2
 800ae34:	e7f5      	b.n	800ae22 <ai_layers_init_all+0x6>
 800ae36:	4770      	bx	lr

0800ae38 <ai_layers_post_init_all>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ae3c:	2500      	movs	r5, #0
 800ae3e:	b16c      	cbz	r4, 800ae5c <ai_layers_post_init_all+0x24>
 800ae40:	6863      	ldr	r3, [r4, #4]
 800ae42:	07db      	lsls	r3, r3, #31
 800ae44:	d504      	bpl.n	800ae50 <ai_layers_post_init_all+0x18>
 800ae46:	6a23      	ldr	r3, [r4, #32]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	b10b      	cbz	r3, 800ae50 <ai_layers_post_init_all+0x18>
 800ae4c:	4798      	blx	r3
 800ae4e:	3501      	adds	r5, #1
 800ae50:	6923      	ldr	r3, [r4, #16]
 800ae52:	42a3      	cmp	r3, r4
 800ae54:	d002      	beq.n	800ae5c <ai_layers_post_init_all+0x24>
 800ae56:	b10b      	cbz	r3, 800ae5c <ai_layers_post_init_all+0x24>
 800ae58:	461c      	mov	r4, r3
 800ae5a:	e7f0      	b.n	800ae3e <ai_layers_post_init_all+0x6>
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	bd38      	pop	{r3, r4, r5, pc}

0800ae60 <ai_layers_forward_all>:
 800ae60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae64:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800ae68:	4604      	mov	r4, r0
 800ae6a:	f1b8 0f00 	cmp.w	r8, #0
 800ae6e:	d02b      	beq.n	800aec8 <ai_layers_forward_all+0x68>
 800ae70:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800ae72:	6381      	str	r1, [r0, #56]	; 0x38
 800ae74:	b321      	cbz	r1, 800aec0 <ai_layers_forward_all+0x60>
 800ae76:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ae78:	2001      	movs	r0, #1
 800ae7a:	47c0      	blx	r8
 800ae7c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ae7e:	b1fe      	cbz	r6, 800aec0 <ai_layers_forward_all+0x60>
 800ae80:	2700      	movs	r7, #0
 800ae82:	4631      	mov	r1, r6
 800ae84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ae86:	2002      	movs	r0, #2
 800ae88:	47c0      	blx	r8
 800ae8a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	696b      	ldr	r3, [r5, #20]
 800ae90:	4798      	blx	r3
 800ae92:	692e      	ldr	r6, [r5, #16]
 800ae94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ae96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae98:	42b5      	cmp	r5, r6
 800ae9a:	f04f 0003 	mov.w	r0, #3
 800ae9e:	d007      	beq.n	800aeb0 <ai_layers_forward_all+0x50>
 800aea0:	47c0      	blx	r8
 800aea2:	3701      	adds	r7, #1
 800aea4:	63a6      	str	r6, [r4, #56]	; 0x38
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	d1eb      	bne.n	800ae82 <ai_layers_forward_all+0x22>
 800aeaa:	4638      	mov	r0, r7
 800aeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb0:	2003      	movs	r0, #3
 800aeb2:	47c0      	blx	r8
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	3701      	adds	r7, #1
 800aeb8:	63a3      	str	r3, [r4, #56]	; 0x38
 800aeba:	4638      	mov	r0, r7
 800aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec0:	2700      	movs	r7, #0
 800aec2:	4638      	mov	r0, r7
 800aec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800aeca:	6385      	str	r5, [r0, #56]	; 0x38
 800aecc:	2d00      	cmp	r5, #0
 800aece:	d0f7      	beq.n	800aec0 <ai_layers_forward_all+0x60>
 800aed0:	4647      	mov	r7, r8
 800aed2:	696b      	ldr	r3, [r5, #20]
 800aed4:	4628      	mov	r0, r5
 800aed6:	4798      	blx	r3
 800aed8:	462b      	mov	r3, r5
 800aeda:	692d      	ldr	r5, [r5, #16]
 800aedc:	429d      	cmp	r5, r3
 800aede:	d004      	beq.n	800aeea <ai_layers_forward_all+0x8a>
 800aee0:	63a5      	str	r5, [r4, #56]	; 0x38
 800aee2:	3701      	adds	r7, #1
 800aee4:	2d00      	cmp	r5, #0
 800aee6:	d1f4      	bne.n	800aed2 <ai_layers_forward_all+0x72>
 800aee8:	e7df      	b.n	800aeaa <ai_layers_forward_all+0x4a>
 800aeea:	2300      	movs	r3, #0
 800aeec:	63a3      	str	r3, [r4, #56]	; 0x38
 800aeee:	3701      	adds	r7, #1
 800aef0:	e7db      	b.n	800aeaa <ai_layers_forward_all+0x4a>
 800aef2:	bf00      	nop

0800aef4 <ai_dict_decompress_f32>:
 800aef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aef8:	9d08      	ldr	r5, [sp, #32]
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800af00:	d00e      	beq.n	800af20 <ai_dict_decompress_f32+0x2c>
 800af02:	2b08      	cmp	r3, #8
 800af04:	d10a      	bne.n	800af1c <ai_dict_decompress_f32+0x28>
 800af06:	42a8      	cmp	r0, r5
 800af08:	d208      	bcs.n	800af1c <ai_dict_decompress_f32+0x28>
 800af0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f840 3b04 	str.w	r3, [r0], #4
 800af18:	4285      	cmp	r5, r0
 800af1a:	d8f6      	bhi.n	800af0a <ai_dict_decompress_f32+0x16>
 800af1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af20:	9b07      	ldr	r3, [sp, #28]
 800af22:	085e      	lsrs	r6, r3, #1
 800af24:	f003 0701 	and.w	r7, r3, #1
 800af28:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800af2c:	f106 38ff 	add.w	r8, r6, #4294967295
 800af30:	42a8      	cmp	r0, r5
 800af32:	d2f3      	bcs.n	800af1c <ai_dict_decompress_f32+0x28>
 800af34:	b33e      	cbz	r6, 800af86 <ai_dict_decompress_f32+0x92>
 800af36:	f100 0e08 	add.w	lr, r0, #8
 800af3a:	f101 3cff 	add.w	ip, r1, #4294967295
 800af3e:	eb01 0408 	add.w	r4, r1, r8
 800af42:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800af46:	091b      	lsrs	r3, r3, #4
 800af48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af4c:	f10e 0e08 	add.w	lr, lr, #8
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f84e 3c10 	str.w	r3, [lr, #-16]
 800af56:	f89c 3000 	ldrb.w	r3, [ip]
 800af5a:	f003 030f 	and.w	r3, r3, #15
 800af5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af62:	4564      	cmp	r4, ip
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800af6a:	d1ea      	bne.n	800af42 <ai_dict_decompress_f32+0x4e>
 800af6c:	4431      	add	r1, r6
 800af6e:	4448      	add	r0, r9
 800af70:	2f00      	cmp	r7, #0
 800af72:	d0dd      	beq.n	800af30 <ai_dict_decompress_f32+0x3c>
 800af74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af78:	091b      	lsrs	r3, r3, #4
 800af7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f840 3b04 	str.w	r3, [r0], #4
 800af84:	e7d4      	b.n	800af30 <ai_dict_decompress_f32+0x3c>
 800af86:	2f00      	cmp	r7, #0
 800af88:	d1f4      	bne.n	800af74 <ai_dict_decompress_f32+0x80>
 800af8a:	42a8      	cmp	r0, r5
 800af8c:	d3fd      	bcc.n	800af8a <ai_dict_decompress_f32+0x96>
 800af8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af92:	bf00      	nop

0800af94 <forward_conv2d_if32of32wf32>:
 800af94:	6982      	ldr	r2, [r0, #24]
 800af96:	8813      	ldrh	r3, [r2, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 8092 	beq.w	800b0c2 <forward_conv2d_if32of32wf32+0x12e>
 800af9e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800afa2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800afa6:	b102      	cbz	r2, 800afaa <forward_conv2d_if32of32wf32+0x16>
 800afa8:	6812      	ldr	r2, [r2, #0]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	f000 80b2 	beq.w	800b114 <forward_conv2d_if32of32wf32+0x180>
 800afb0:	f8dc 1010 	ldr.w	r1, [ip, #16]
 800afb4:	b101      	cbz	r1, 800afb8 <forward_conv2d_if32of32wf32+0x24>
 800afb6:	6809      	ldr	r1, [r1, #0]
 800afb8:	2b02      	cmp	r3, #2
 800afba:	f000 8084 	beq.w	800b0c6 <forward_conv2d_if32of32wf32+0x132>
 800afbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc2:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800afc6:	b0a1      	sub	sp, #132	; 0x84
 800afc8:	2e00      	cmp	r6, #0
 800afca:	f000 809c 	beq.w	800b106 <forward_conv2d_if32of32wf32+0x172>
 800afce:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 800afd2:	6834      	ldr	r4, [r6, #0]
 800afd4:	2d01      	cmp	r5, #1
 800afd6:	f240 8098 	bls.w	800b10a <forward_conv2d_if32of32wf32+0x176>
 800afda:	6876      	ldr	r6, [r6, #4]
 800afdc:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800afe0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800afe4:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800afe8:	9713      	str	r7, [sp, #76]	; 0x4c
 800afea:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800afee:	9714      	str	r7, [sp, #80]	; 0x50
 800aff0:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800aff4:	9715      	str	r7, [sp, #84]	; 0x54
 800aff6:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800affa:	9716      	str	r7, [sp, #88]	; 0x58
 800affc:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800b000:	6992      	ldr	r2, [r2, #24]
 800b002:	9717      	str	r7, [sp, #92]	; 0x5c
 800b004:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800b008:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800b00c:	9718      	str	r7, [sp, #96]	; 0x60
 800b00e:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 800b010:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800b014:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800b018:	69a2      	ldr	r2, [r4, #24]
 800b01a:	9719      	str	r7, [sp, #100]	; 0x64
 800b01c:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800b020:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 800b022:	69c0      	ldr	r0, [r0, #28]
 800b024:	901f      	str	r0, [sp, #124]	; 0x7c
 800b026:	f8be 0000 	ldrh.w	r0, [lr]
 800b02a:	901b      	str	r0, [sp, #108]	; 0x6c
 800b02c:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800b030:	901c      	str	r0, [sp, #112]	; 0x70
 800b032:	b2a8      	uxth	r0, r5
 800b034:	971a      	str	r7, [sp, #104]	; 0x68
 800b036:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 800b03a:	901d      	str	r0, [sp, #116]	; 0x74
 800b03c:	b2a0      	uxth	r0, r4
 800b03e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800b042:	901e      	str	r0, [sp, #120]	; 0x78
 800b044:	b10e      	cbz	r6, 800b04a <forward_conv2d_if32of32wf32+0xb6>
 800b046:	69b0      	ldr	r0, [r6, #24]
 800b048:	6886      	ldr	r6, [r0, #8]
 800b04a:	6989      	ldr	r1, [r1, #24]
 800b04c:	b2a4      	uxth	r4, r4
 800b04e:	f108 30ff 	add.w	r0, r8, #4294967295
 800b052:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800b056:	6811      	ldr	r1, [r2, #0]
 800b058:	b2ad      	uxth	r5, r5
 800b05a:	3c01      	subs	r4, #1
 800b05c:	3d01      	subs	r5, #1
 800b05e:	fb00 8404 	mla	r4, r0, r4, r8
 800b062:	1e78      	subs	r0, r7, #1
 800b064:	fb00 7505 	mla	r5, r0, r5, r7
 800b068:	f3c1 4043 	ubfx	r0, r1, #17, #4
 800b06c:	2804      	cmp	r0, #4
 800b06e:	d02d      	beq.n	800b0cc <forward_conv2d_if32of32wf32+0x138>
 800b070:	2808      	cmp	r0, #8
 800b072:	d02b      	beq.n	800b0cc <forward_conv2d_if32of32wf32+0x138>
 800b074:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b076:	940c      	str	r4, [sp, #48]	; 0x30
 800b078:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 800b07c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b07e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b080:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b082:	930a      	str	r3, [sp, #40]	; 0x28
 800b084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b086:	9309      	str	r3, [sp, #36]	; 0x24
 800b088:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b08a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b08c:	9706      	str	r7, [sp, #24]
 800b08e:	e9cd 8307 	strd	r8, r3, [sp, #28]
 800b092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b09c:	9303      	str	r3, [sp, #12]
 800b09e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b0a0:	9302      	str	r3, [sp, #8]
 800b0a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b0ac:	9310      	str	r3, [sp, #64]	; 0x40
 800b0ae:	464a      	mov	r2, r9
 800b0b0:	4633      	mov	r3, r6
 800b0b2:	4651      	mov	r1, sl
 800b0b4:	4658      	mov	r0, fp
 800b0b6:	940f      	str	r4, [sp, #60]	; 0x3c
 800b0b8:	f000 fef0 	bl	800be9c <forward_lite_conv2d_if32of32wf32>
 800b0bc:	b021      	add	sp, #132	; 0x84
 800b0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	deff      	udf	#255	; 0xff
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	deff      	udf	#255	; 0xff
 800b0cc:	68d2      	ldr	r2, [r2, #12]
 800b0ce:	2a00      	cmp	r2, #0
 800b0d0:	d0d0      	beq.n	800b074 <forward_conv2d_if32of32wf32+0xe0>
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d021      	beq.n	800b11a <forward_conv2d_if32of32wf32+0x186>
 800b0d6:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800b0da:	b1c3      	cbz	r3, 800b10e <forward_conv2d_if32of32wf32+0x17a>
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	b1b3      	cbz	r3, 800b10e <forward_conv2d_if32of32wf32+0x17a>
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
 800b0e6:	9301      	str	r3, [sp, #4]
 800b0e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 800b0f0:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800b0f4:	410b      	asrs	r3, r1
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	bf18      	it	ne
 800b0fe:	4681      	movne	r9, r0
 800b100:	f7ff fef8 	bl	800aef4 <ai_dict_decompress_f32>
 800b104:	e7b6      	b.n	800b074 <forward_conv2d_if32of32wf32+0xe0>
 800b106:	4634      	mov	r4, r6
 800b108:	e768      	b.n	800afdc <forward_conv2d_if32of32wf32+0x48>
 800b10a:	2600      	movs	r6, #0
 800b10c:	e766      	b.n	800afdc <forward_conv2d_if32of32wf32+0x48>
 800b10e:	2300      	movs	r3, #0
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	deff      	udf	#255	; 0xff
 800b114:	2300      	movs	r3, #0
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	deff      	udf	#255	; 0xff
 800b11a:	2300      	movs	r3, #0
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	deff      	udf	#255	; 0xff

0800b120 <forward_dw_if32of32wf32>:
 800b120:	6982      	ldr	r2, [r0, #24]
 800b122:	8813      	ldrh	r3, [r2, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 8092 	beq.w	800b24e <forward_dw_if32of32wf32+0x12e>
 800b12a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800b12e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800b132:	b102      	cbz	r2, 800b136 <forward_dw_if32of32wf32+0x16>
 800b134:	6812      	ldr	r2, [r2, #0]
 800b136:	2b01      	cmp	r3, #1
 800b138:	f000 80b2 	beq.w	800b2a0 <forward_dw_if32of32wf32+0x180>
 800b13c:	f8dc 1010 	ldr.w	r1, [ip, #16]
 800b140:	b101      	cbz	r1, 800b144 <forward_dw_if32of32wf32+0x24>
 800b142:	6809      	ldr	r1, [r1, #0]
 800b144:	2b02      	cmp	r3, #2
 800b146:	f000 8084 	beq.w	800b252 <forward_dw_if32of32wf32+0x132>
 800b14a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14e:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800b152:	b0a1      	sub	sp, #132	; 0x84
 800b154:	2e00      	cmp	r6, #0
 800b156:	f000 809c 	beq.w	800b292 <forward_dw_if32of32wf32+0x172>
 800b15a:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 800b15e:	6834      	ldr	r4, [r6, #0]
 800b160:	2d01      	cmp	r5, #1
 800b162:	f240 8098 	bls.w	800b296 <forward_dw_if32of32wf32+0x176>
 800b166:	6876      	ldr	r6, [r6, #4]
 800b168:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800b16c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800b170:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b174:	9713      	str	r7, [sp, #76]	; 0x4c
 800b176:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800b17a:	9714      	str	r7, [sp, #80]	; 0x50
 800b17c:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800b180:	9715      	str	r7, [sp, #84]	; 0x54
 800b182:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800b186:	9716      	str	r7, [sp, #88]	; 0x58
 800b188:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800b18c:	6992      	ldr	r2, [r2, #24]
 800b18e:	9717      	str	r7, [sp, #92]	; 0x5c
 800b190:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800b194:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800b198:	9718      	str	r7, [sp, #96]	; 0x60
 800b19a:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 800b19c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800b1a0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800b1a4:	69a2      	ldr	r2, [r4, #24]
 800b1a6:	9719      	str	r7, [sp, #100]	; 0x64
 800b1a8:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800b1ac:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 800b1ae:	69c0      	ldr	r0, [r0, #28]
 800b1b0:	901f      	str	r0, [sp, #124]	; 0x7c
 800b1b2:	f8be 0000 	ldrh.w	r0, [lr]
 800b1b6:	901b      	str	r0, [sp, #108]	; 0x6c
 800b1b8:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800b1bc:	901c      	str	r0, [sp, #112]	; 0x70
 800b1be:	b2a8      	uxth	r0, r5
 800b1c0:	971a      	str	r7, [sp, #104]	; 0x68
 800b1c2:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 800b1c6:	901d      	str	r0, [sp, #116]	; 0x74
 800b1c8:	b2a0      	uxth	r0, r4
 800b1ca:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800b1ce:	901e      	str	r0, [sp, #120]	; 0x78
 800b1d0:	b10e      	cbz	r6, 800b1d6 <forward_dw_if32of32wf32+0xb6>
 800b1d2:	69b0      	ldr	r0, [r6, #24]
 800b1d4:	6886      	ldr	r6, [r0, #8]
 800b1d6:	6989      	ldr	r1, [r1, #24]
 800b1d8:	b2a4      	uxth	r4, r4
 800b1da:	f108 30ff 	add.w	r0, r8, #4294967295
 800b1de:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800b1e2:	6811      	ldr	r1, [r2, #0]
 800b1e4:	b2ad      	uxth	r5, r5
 800b1e6:	3c01      	subs	r4, #1
 800b1e8:	3d01      	subs	r5, #1
 800b1ea:	fb00 8404 	mla	r4, r0, r4, r8
 800b1ee:	1e78      	subs	r0, r7, #1
 800b1f0:	fb00 7505 	mla	r5, r0, r5, r7
 800b1f4:	f3c1 4043 	ubfx	r0, r1, #17, #4
 800b1f8:	2804      	cmp	r0, #4
 800b1fa:	d02d      	beq.n	800b258 <forward_dw_if32of32wf32+0x138>
 800b1fc:	2808      	cmp	r0, #8
 800b1fe:	d02b      	beq.n	800b258 <forward_dw_if32of32wf32+0x138>
 800b200:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b202:	940c      	str	r4, [sp, #48]	; 0x30
 800b204:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 800b208:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b20c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b20e:	930a      	str	r3, [sp, #40]	; 0x28
 800b210:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b212:	9309      	str	r3, [sp, #36]	; 0x24
 800b214:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b216:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b218:	9706      	str	r7, [sp, #24]
 800b21a:	e9cd 8307 	strd	r8, r3, [sp, #28]
 800b21e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b220:	9305      	str	r3, [sp, #20]
 800b222:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b228:	9303      	str	r3, [sp, #12]
 800b22a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b22c:	9302      	str	r3, [sp, #8]
 800b22e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b238:	9310      	str	r3, [sp, #64]	; 0x40
 800b23a:	464a      	mov	r2, r9
 800b23c:	4633      	mov	r3, r6
 800b23e:	4651      	mov	r1, sl
 800b240:	4658      	mov	r0, fp
 800b242:	940f      	str	r4, [sp, #60]	; 0x3c
 800b244:	f000 ff8c 	bl	800c160 <forward_lite_dw_if32of32wf32>
 800b248:	b021      	add	sp, #132	; 0x84
 800b24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	deff      	udf	#255	; 0xff
 800b252:	2300      	movs	r3, #0
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	deff      	udf	#255	; 0xff
 800b258:	68d2      	ldr	r2, [r2, #12]
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	d0d0      	beq.n	800b200 <forward_dw_if32of32wf32+0xe0>
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d021      	beq.n	800b2a6 <forward_dw_if32of32wf32+0x186>
 800b262:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800b266:	b1c3      	cbz	r3, 800b29a <forward_dw_if32of32wf32+0x17a>
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	b1b3      	cbz	r3, 800b29a <forward_dw_if32of32wf32+0x17a>
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 800b27c:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800b280:	410b      	asrs	r3, r1
 800b282:	b29b      	uxth	r3, r3
 800b284:	4649      	mov	r1, r9
 800b286:	2800      	cmp	r0, #0
 800b288:	bf18      	it	ne
 800b28a:	4681      	movne	r9, r0
 800b28c:	f7ff fe32 	bl	800aef4 <ai_dict_decompress_f32>
 800b290:	e7b6      	b.n	800b200 <forward_dw_if32of32wf32+0xe0>
 800b292:	4634      	mov	r4, r6
 800b294:	e768      	b.n	800b168 <forward_dw_if32of32wf32+0x48>
 800b296:	2600      	movs	r6, #0
 800b298:	e766      	b.n	800b168 <forward_dw_if32of32wf32+0x48>
 800b29a:	2300      	movs	r3, #0
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	deff      	udf	#255	; 0xff
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	deff      	udf	#255	; 0xff
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	deff      	udf	#255	; 0xff

0800b2ac <forward_dense>:
 800b2ac:	6983      	ldr	r3, [r0, #24]
 800b2ae:	881a      	ldrh	r2, [r3, #0]
 800b2b0:	2a00      	cmp	r2, #0
 800b2b2:	f000 8181 	beq.w	800b5b8 <forward_dense+0x30c>
 800b2b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ba:	ed2d 8b02 	vpush	{d8}
 800b2be:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b2c2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800b2c6:	b095      	sub	sp, #84	; 0x54
 800b2c8:	b105      	cbz	r5, 800b2cc <forward_dense+0x20>
 800b2ca:	682d      	ldr	r5, [r5, #0]
 800b2cc:	2a01      	cmp	r2, #1
 800b2ce:	f000 828f 	beq.w	800b7f0 <forward_dense+0x544>
 800b2d2:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800b2d6:	b106      	cbz	r6, 800b2da <forward_dense+0x2e>
 800b2d8:	6836      	ldr	r6, [r6, #0]
 800b2da:	2a02      	cmp	r2, #2
 800b2dc:	f000 816e 	beq.w	800b5bc <forward_dense+0x310>
 800b2e0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800b2e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 8274 	beq.w	800b7d4 <forward_dense+0x528>
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800b2f2:	6809      	ldr	r1, [r1, #0]
 800b2f4:	910d      	str	r1, [sp, #52]	; 0x34
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	f240 826e 	bls.w	800b7d8 <forward_dense+0x52c>
 800b2fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	930b      	str	r3, [sp, #44]	; 0x2c
 800b302:	460b      	mov	r3, r1
 800b304:	68e8      	ldr	r0, [r5, #12]
 800b306:	68f7      	ldr	r7, [r6, #12]
 800b308:	6840      	ldr	r0, [r0, #4]
 800b30a:	6999      	ldr	r1, [r3, #24]
 800b30c:	9013      	str	r0, [sp, #76]	; 0x4c
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	680b      	ldr	r3, [r1, #0]
 800b312:	9012      	str	r0, [sp, #72]	; 0x48
 800b314:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800b318:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800b31c:	fb00 f404 	mul.w	r4, r0, r4
 800b320:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800b324:	fa4e f000 	asr.w	r0, lr, r0
 800b328:	2a03      	cmp	r2, #3
 800b32a:	9010      	str	r0, [sp, #64]	; 0x40
 800b32c:	f000 825d 	beq.w	800b7ea <forward_dense+0x53e>
 800b330:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800b334:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800b338:	2a00      	cmp	r2, #0
 800b33a:	f000 8246 	beq.w	800b7ca <forward_dense+0x51e>
 800b33e:	6812      	ldr	r2, [r2, #0]
 800b340:	2a00      	cmp	r2, #0
 800b342:	f000 8242 	beq.w	800b7ca <forward_dense+0x51e>
 800b346:	2b04      	cmp	r3, #4
 800b348:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b34c:	f000 822c 	beq.w	800b7a8 <forward_dense+0x4fc>
 800b350:	2b08      	cmp	r3, #8
 800b352:	f000 8229 	beq.w	800b7a8 <forward_dense+0x4fc>
 800b356:	f04f 0b00 	mov.w	fp, #0
 800b35a:	69b2      	ldr	r2, [r6, #24]
 800b35c:	69ab      	ldr	r3, [r5, #24]
 800b35e:	6891      	ldr	r1, [r2, #8]
 800b360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	6952      	ldr	r2, [r2, #20]
 800b366:	9106      	str	r1, [sp, #24]
 800b368:	fb07 f404 	mul.w	r4, r7, r4
 800b36c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b370:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b372:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b376:	4281      	cmp	r1, r0
 800b378:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800b37c:	900e      	str	r0, [sp, #56]	; 0x38
 800b37e:	940c      	str	r4, [sp, #48]	; 0x30
 800b380:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 800b384:	f080 8113 	bcs.w	800b5ae <forward_dense+0x302>
 800b388:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b38a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800b5d8 <forward_dense+0x32c>
 800b38e:	f021 0201 	bic.w	r2, r1, #1
 800b392:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b396:	9204      	str	r2, [sp, #16]
 800b398:	f001 0201 	and.w	r2, r1, #1
 800b39c:	08c8      	lsrs	r0, r1, #3
 800b39e:	9208      	str	r2, [sp, #32]
 800b3a0:	008a      	lsls	r2, r1, #2
 800b3a2:	f001 0a07 	and.w	sl, r1, #7
 800b3a6:	920f      	str	r2, [sp, #60]	; 0x3c
 800b3a8:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800b3ac:	3320      	adds	r3, #32
 800b3ae:	465c      	mov	r4, fp
 800b3b0:	9007      	str	r0, [sp, #28]
 800b3b2:	46cb      	mov	fp, r9
 800b3b4:	9205      	str	r2, [sp, #20]
 800b3b6:	9302      	str	r3, [sp, #8]
 800b3b8:	46c1      	mov	r9, r8
 800b3ba:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800b3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	689a      	ldr	r2, [r3, #8]
 800b3c4:	9b02      	ldr	r3, [sp, #8]
 800b3c6:	3b20      	subs	r3, #32
 800b3c8:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3cc:	b10b      	cbz	r3, 800b3d2 <forward_dense+0x126>
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	2c00      	cmp	r4, #0
 800b3d4:	f000 81da 	beq.w	800b78c <forward_dense+0x4e0>
 800b3d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b3da:	2904      	cmp	r1, #4
 800b3dc:	9906      	ldr	r1, [sp, #24]
 800b3de:	f000 80fd 	beq.w	800b5dc <forward_dense+0x330>
 800b3e2:	4549      	cmp	r1, r9
 800b3e4:	f080 80d2 	bcs.w	800b58c <forward_dense+0x2e0>
 800b3e8:	460f      	mov	r7, r1
 800b3ea:	9907      	ldr	r1, [sp, #28]
 800b3ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3f0:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b3f4:	1c4e      	adds	r6, r1, #1
 800b3f6:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b3fa:	4694      	mov	ip, r2
 800b3fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b3fe:	468e      	mov	lr, r1
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80de 	beq.w	800b5c2 <forward_dense+0x316>
 800b406:	ecf3 2a01 	vldmia	r3!, {s5}
 800b40a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b5d8 <forward_dense+0x32c>
 800b40e:	f1be 0f00 	cmp.w	lr, #0
 800b412:	f000 80de 	beq.w	800b5d2 <forward_dense+0x326>
 800b416:	f10c 0108 	add.w	r1, ip, #8
 800b41a:	4640      	mov	r0, r8
 800b41c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800b420:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800b424:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800b428:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800b42c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 800b430:	ed10 5a04 	vldr	s10, [r0, #-16]
 800b434:	ed50 5a03 	vldr	s11, [r0, #-12]
 800b438:	ed10 6a02 	vldr	s12, [r0, #-8]
 800b43c:	ed50 6a01 	vldr	s13, [r0, #-4]
 800b440:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b444:	edd5 7a00 	vldr	s15, [r5]
 800b448:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800b44c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b450:	ee67 7a83 	vmul.f32	s15, s15, s6
 800b454:	ed95 3a00 	vldr	s6, [r5]
 800b458:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800b45c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b460:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b464:	3108      	adds	r1, #8
 800b466:	edd5 3a00 	vldr	s7, [r5]
 800b46a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800b46e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b472:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b476:	3020      	adds	r0, #32
 800b478:	ed95 4a00 	vldr	s8, [r5]
 800b47c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800b480:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b484:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b488:	edd5 4a00 	vldr	s9, [r5]
 800b48c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800b490:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b494:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b498:	ed95 5a00 	vldr	s10, [r5]
 800b49c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800b4a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b4a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b4a8:	edd5 5a00 	vldr	s11, [r5]
 800b4ac:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800b4b0:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b4b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b4b8:	428e      	cmp	r6, r1
 800b4ba:	ed95 6a00 	vldr	s12, [r5]
 800b4be:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b4c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4c6:	d1a9      	bne.n	800b41c <forward_dense+0x170>
 800b4c8:	f1a6 0108 	sub.w	r1, r6, #8
 800b4cc:	4650      	mov	r0, sl
 800b4ce:	2a00      	cmp	r2, #0
 800b4d0:	d04a      	beq.n	800b568 <forward_dense+0x2bc>
 800b4d2:	780d      	ldrb	r5, [r1, #0]
 800b4d4:	edd0 6a00 	vldr	s13, [r0]
 800b4d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b4dc:	edd5 7a00 	vldr	s15, [r5]
 800b4e0:	2a01      	cmp	r2, #1
 800b4e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4e6:	d03f      	beq.n	800b568 <forward_dense+0x2bc>
 800b4e8:	784d      	ldrb	r5, [r1, #1]
 800b4ea:	edd0 6a01 	vldr	s13, [r0, #4]
 800b4ee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b4f2:	edd5 7a00 	vldr	s15, [r5]
 800b4f6:	2a02      	cmp	r2, #2
 800b4f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4fc:	d034      	beq.n	800b568 <forward_dense+0x2bc>
 800b4fe:	788d      	ldrb	r5, [r1, #2]
 800b500:	edd0 6a02 	vldr	s13, [r0, #8]
 800b504:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b508:	edd5 7a00 	vldr	s15, [r5]
 800b50c:	2a03      	cmp	r2, #3
 800b50e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b512:	d029      	beq.n	800b568 <forward_dense+0x2bc>
 800b514:	78cd      	ldrb	r5, [r1, #3]
 800b516:	edd0 6a03 	vldr	s13, [r0, #12]
 800b51a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b51e:	edd5 7a00 	vldr	s15, [r5]
 800b522:	2a04      	cmp	r2, #4
 800b524:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b528:	d01e      	beq.n	800b568 <forward_dense+0x2bc>
 800b52a:	790d      	ldrb	r5, [r1, #4]
 800b52c:	edd0 6a04 	vldr	s13, [r0, #16]
 800b530:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b534:	edd5 7a00 	vldr	s15, [r5]
 800b538:	2a05      	cmp	r2, #5
 800b53a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b53e:	d013      	beq.n	800b568 <forward_dense+0x2bc>
 800b540:	794d      	ldrb	r5, [r1, #5]
 800b542:	edd0 6a05 	vldr	s13, [r0, #20]
 800b546:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b54a:	edd5 7a00 	vldr	s15, [r5]
 800b54e:	2a06      	cmp	r2, #6
 800b550:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b554:	d008      	beq.n	800b568 <forward_dense+0x2bc>
 800b556:	7989      	ldrb	r1, [r1, #6]
 800b558:	edd0 7a06 	vldr	s15, [r0, #24]
 800b55c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b560:	edd1 6a00 	vldr	s13, [r1]
 800b564:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b568:	44dc      	add	ip, fp
 800b56a:	445e      	add	r6, fp
 800b56c:	ee32 7a87 	vadd.f32	s14, s5, s14
 800b570:	eca7 7a01 	vstmia	r7!, {s14}
 800b574:	454f      	cmp	r7, r9
 800b576:	f4ff af43 	bcc.w	800b400 <forward_dense+0x154>
 800b57a:	9a06      	ldr	r2, [sp, #24]
 800b57c:	eba9 0302 	sub.w	r3, r9, r2
 800b580:	3b01      	subs	r3, #1
 800b582:	f023 0303 	bic.w	r3, r3, #3
 800b586:	3304      	adds	r3, #4
 800b588:	18d3      	adds	r3, r2, r3
 800b58a:	9306      	str	r3, [sp, #24]
 800b58c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b58e:	9a05      	ldr	r2, [sp, #20]
 800b590:	4499      	add	r9, r3
 800b592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b594:	441a      	add	r2, r3
 800b596:	9205      	str	r2, [sp, #20]
 800b598:	9a02      	ldr	r2, [sp, #8]
 800b59a:	441a      	add	r2, r3
 800b59c:	9202      	str	r2, [sp, #8]
 800b59e:	9a04      	ldr	r2, [sp, #16]
 800b5a0:	441a      	add	r2, r3
 800b5a2:	9204      	str	r2, [sp, #16]
 800b5a4:	9b06      	ldr	r3, [sp, #24]
 800b5a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	f4ff af08 	bcc.w	800b3be <forward_dense+0x112>
 800b5ae:	b015      	add	sp, #84	; 0x54
 800b5b0:	ecbd 8b02 	vpop	{d8}
 800b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b8:	6853      	ldr	r3, [r2, #4]
 800b5ba:	deff      	udf	#255	; 0xff
 800b5bc:	2300      	movs	r3, #0
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	deff      	udf	#255	; 0xff
 800b5c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b5d8 <forward_dense+0x32c>
 800b5c6:	eef0 2a48 	vmov.f32	s5, s16
 800b5ca:	f1be 0f00 	cmp.w	lr, #0
 800b5ce:	f47f af22 	bne.w	800b416 <forward_dense+0x16a>
 800b5d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5d4:	4661      	mov	r1, ip
 800b5d6:	e77a      	b.n	800b4ce <forward_dense+0x222>
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	4549      	cmp	r1, r9
 800b5de:	d2d5      	bcs.n	800b58c <forward_dense+0x2e0>
 800b5e0:	9807      	ldr	r0, [sp, #28]
 800b5e2:	9103      	str	r1, [sp, #12]
 800b5e4:	9904      	ldr	r1, [sp, #16]
 800b5e6:	f100 0c01 	add.w	ip, r0, #1
 800b5ea:	3901      	subs	r1, #1
 800b5ec:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800b5f0:	9109      	str	r1, [sp, #36]	; 0x24
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 80b2 	beq.w	800b75c <forward_dense+0x4b0>
 800b5f8:	9907      	ldr	r1, [sp, #28]
 800b5fa:	ecf3 2a01 	vldmia	r3!, {s5}
 800b5fe:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800b5d8 <forward_dense+0x32c>
 800b602:	2900      	cmp	r1, #0
 800b604:	f000 80b2 	beq.w	800b76c <forward_dense+0x4c0>
 800b608:	9902      	ldr	r1, [sp, #8]
 800b60a:	1d10      	adds	r0, r2, #4
 800b60c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800b610:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800b614:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800b618:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800b61c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800b620:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800b624:	ed11 5a04 	vldr	s10, [r1, #-16]
 800b628:	ed51 5a03 	vldr	s11, [r1, #-12]
 800b62c:	ed11 6a02 	vldr	s12, [r1, #-8]
 800b630:	ed51 6a01 	vldr	s13, [r1, #-4]
 800b634:	f006 070f 	and.w	r7, r6, #15
 800b638:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800b63c:	edd7 7a00 	vldr	s15, [r7]
 800b640:	0936      	lsrs	r6, r6, #4
 800b642:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b646:	ed96 3a00 	vldr	s6, [r6]
 800b64a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800b64e:	092e      	lsrs	r6, r5, #4
 800b650:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b654:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b658:	f005 050f 	and.w	r5, r5, #15
 800b65c:	edd6 3a00 	vldr	s7, [r6]
 800b660:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800b664:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b668:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b66c:	0937      	lsrs	r7, r6, #4
 800b66e:	ed95 4a00 	vldr	s8, [r5]
 800b672:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800b676:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b67a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800b67e:	f006 060f 	and.w	r6, r6, #15
 800b682:	edd7 4a00 	vldr	s9, [r7]
 800b686:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b68a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b68e:	3004      	adds	r0, #4
 800b690:	ed96 5a00 	vldr	s10, [r6]
 800b694:	092e      	lsrs	r6, r5, #4
 800b696:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b69a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b69e:	f005 050f 	and.w	r5, r5, #15
 800b6a2:	edd6 5a00 	vldr	s11, [r6]
 800b6a6:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b6aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b6ae:	4584      	cmp	ip, r0
 800b6b0:	ed95 6a00 	vldr	s12, [r5]
 800b6b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b6b8:	f101 0120 	add.w	r1, r1, #32
 800b6bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6c0:	d1a4      	bne.n	800b60c <forward_dense+0x360>
 800b6c2:	f8dd e014 	ldr.w	lr, [sp, #20]
 800b6c6:	f1ac 0804 	sub.w	r8, ip, #4
 800b6ca:	9904      	ldr	r1, [sp, #16]
 800b6cc:	458e      	cmp	lr, r1
 800b6ce:	d22a      	bcs.n	800b726 <forward_dense+0x47a>
 800b6d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6d2:	eba1 070e 	sub.w	r7, r1, lr
 800b6d6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800b6da:	f10e 0008 	add.w	r0, lr, #8
 800b6de:	f108 36ff 	add.w	r6, r8, #4294967295
 800b6e2:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800b6e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6ea:	ed50 5a01 	vldr	s11, [r0, #-4]
 800b6ee:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b6f2:	f001 050f 	and.w	r5, r1, #15
 800b6f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b6fa:	edd5 7a00 	vldr	s15, [r5]
 800b6fe:	0909      	lsrs	r1, r1, #4
 800b700:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b704:	ed91 6a00 	vldr	s12, [r1]
 800b708:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b70c:	42b7      	cmp	r7, r6
 800b70e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b712:	f100 0008 	add.w	r0, r0, #8
 800b716:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b71a:	d1e4      	bne.n	800b6e6 <forward_dense+0x43a>
 800b71c:	f10a 0a01 	add.w	sl, sl, #1
 800b720:	44d0      	add	r8, sl
 800b722:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800b726:	9908      	ldr	r1, [sp, #32]
 800b728:	b321      	cbz	r1, 800b774 <forward_dense+0x4c8>
 800b72a:	f898 1000 	ldrb.w	r1, [r8]
 800b72e:	edde 7a00 	vldr	s15, [lr]
 800b732:	0909      	lsrs	r1, r1, #4
 800b734:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b738:	edd1 6a00 	vldr	s13, [r1]
 800b73c:	9903      	ldr	r1, [sp, #12]
 800b73e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b742:	445a      	add	r2, fp
 800b744:	44dc      	add	ip, fp
 800b746:	ee72 2a87 	vadd.f32	s5, s5, s14
 800b74a:	ece1 2a01 	vstmia	r1!, {s5}
 800b74e:	4589      	cmp	r9, r1
 800b750:	9103      	str	r1, [sp, #12]
 800b752:	f67f af12 	bls.w	800b57a <forward_dense+0x2ce>
 800b756:	2b00      	cmp	r3, #0
 800b758:	f47f af4e 	bne.w	800b5f8 <forward_dense+0x34c>
 800b75c:	9907      	ldr	r1, [sp, #28]
 800b75e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800b5d8 <forward_dense+0x32c>
 800b762:	eef0 2a48 	vmov.f32	s5, s16
 800b766:	2900      	cmp	r1, #0
 800b768:	f47f af4e 	bne.w	800b608 <forward_dense+0x35c>
 800b76c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800b770:	4690      	mov	r8, r2
 800b772:	e7aa      	b.n	800b6ca <forward_dense+0x41e>
 800b774:	9903      	ldr	r1, [sp, #12]
 800b776:	ee32 7a87 	vadd.f32	s14, s5, s14
 800b77a:	445a      	add	r2, fp
 800b77c:	eca1 7a01 	vstmia	r1!, {s14}
 800b780:	4549      	cmp	r1, r9
 800b782:	9103      	str	r1, [sp, #12]
 800b784:	44dc      	add	ip, fp
 800b786:	f4ff af34 	bcc.w	800b5f2 <forward_dense+0x346>
 800b78a:	e6f6      	b.n	800b57a <forward_dense+0x2ce>
 800b78c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b78e:	9d06      	ldr	r5, [sp, #24]
 800b790:	9101      	str	r1, [sp, #4]
 800b792:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b794:	9100      	str	r1, [sp, #0]
 800b796:	4628      	mov	r0, r5
 800b798:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b79a:	f000 fed9 	bl	800c550 <forward_lite_dense_if32of32wf32>
 800b79e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7a0:	462b      	mov	r3, r5
 800b7a2:	4413      	add	r3, r2
 800b7a4:	9306      	str	r3, [sp, #24]
 800b7a6:	e6f1      	b.n	800b58c <forward_dense+0x2e0>
 800b7a8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800b7ac:	f1b9 0f00 	cmp.w	r9, #0
 800b7b0:	d016      	beq.n	800b7e0 <forward_dense+0x534>
 800b7b2:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b7b6:	f001 f8e1 	bl	800c97c <ai_array_get_byte_size>
 800b7ba:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800b7be:	4602      	mov	r2, r0
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	f000 ffe8 	bl	800c798 <st_int8_copy>
 800b7c8:	e5c7      	b.n	800b35a <forward_dense+0xae>
 800b7ca:	2b04      	cmp	r3, #4
 800b7cc:	d00a      	beq.n	800b7e4 <forward_dense+0x538>
 800b7ce:	f04f 0900 	mov.w	r9, #0
 800b7d2:	e5bd      	b.n	800b350 <forward_dense+0xa4>
 800b7d4:	930d      	str	r3, [sp, #52]	; 0x34
 800b7d6:	e595      	b.n	800b304 <forward_dense+0x58>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7dc:	460b      	mov	r3, r1
 800b7de:	e591      	b.n	800b304 <forward_dense+0x58>
 800b7e0:	46c3      	mov	fp, r8
 800b7e2:	e5ba      	b.n	800b35a <forward_dense+0xae>
 800b7e4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800b7e8:	e5b7      	b.n	800b35a <forward_dense+0xae>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	deff      	udf	#255	; 0xff
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	deff      	udf	#255	; 0xff
 800b7f6:	bf00      	nop

0800b7f8 <forward_relu>:
 800b7f8:	6982      	ldr	r2, [r0, #24]
 800b7fa:	8813      	ldrh	r3, [r2, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d05b      	beq.n	800b8b8 <forward_relu+0xc0>
 800b800:	6851      	ldr	r1, [r2, #4]
 800b802:	684a      	ldr	r2, [r1, #4]
 800b804:	b102      	cbz	r2, 800b808 <forward_relu+0x10>
 800b806:	6812      	ldr	r2, [r2, #0]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	f000 8123 	beq.w	800ba54 <forward_relu+0x25c>
 800b80e:	b470      	push	{r4, r5, r6}
 800b810:	6909      	ldr	r1, [r1, #16]
 800b812:	b101      	cbz	r1, 800b816 <forward_relu+0x1e>
 800b814:	6809      	ldr	r1, [r1, #0]
 800b816:	69c6      	ldr	r6, [r0, #28]
 800b818:	2e00      	cmp	r6, #0
 800b81a:	f000 8097 	beq.w	800b94c <forward_relu+0x154>
 800b81e:	6873      	ldr	r3, [r6, #4]
 800b820:	6988      	ldr	r0, [r1, #24]
 800b822:	6991      	ldr	r1, [r2, #24]
 800b824:	2b01      	cmp	r3, #1
 800b826:	f000 80c1 	beq.w	800b9ac <forward_relu+0x1b4>
 800b82a:	6893      	ldr	r3, [r2, #8]
 800b82c:	6880      	ldr	r0, [r0, #8]
 800b82e:	688c      	ldr	r4, [r1, #8]
 800b830:	0a1b      	lsrs	r3, r3, #8
 800b832:	f000 80f2 	beq.w	800ba1a <forward_relu+0x222>
 800b836:	68d5      	ldr	r5, [r2, #12]
 800b838:	2201      	movs	r2, #1
 800b83a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b83e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b842:	42ab      	cmp	r3, r5
 800b844:	fb01 f202 	mul.w	r2, r1, r2
 800b848:	d1f9      	bne.n	800b83e <forward_relu+0x46>
 800b84a:	68b3      	ldr	r3, [r6, #8]
 800b84c:	ed93 7a02 	vldr	s14, [r3, #8]
 800b850:	edd3 6a00 	vldr	s13, [r3]
 800b854:	ed93 6a01 	vldr	s12, [r3, #4]
 800b858:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b85c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b860:	3a01      	subs	r2, #1
 800b862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b866:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b86a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b86e:	d425      	bmi.n	800b8bc <forward_relu+0xc4>
 800b870:	429c      	cmp	r4, r3
 800b872:	d81f      	bhi.n	800b8b4 <forward_relu+0xbc>
 800b874:	1d1a      	adds	r2, r3, #4
 800b876:	1d01      	adds	r1, r0, #4
 800b878:	e00d      	b.n	800b896 <forward_relu+0x9e>
 800b87a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b882:	db03      	blt.n	800b88c <forward_relu+0x94>
 800b884:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b888:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b88c:	3b08      	subs	r3, #8
 800b88e:	429c      	cmp	r4, r3
 800b890:	ed61 7a01 	vstmdb	r1!, {s15}
 800b894:	d80e      	bhi.n	800b8b4 <forward_relu+0xbc>
 800b896:	4613      	mov	r3, r2
 800b898:	ed72 7a01 	vldmdb	r2!, {s15}
 800b89c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a4:	d9e9      	bls.n	800b87a <forward_relu+0x82>
 800b8a6:	3b08      	subs	r3, #8
 800b8a8:	eef0 7a47 	vmov.f32	s15, s14
 800b8ac:	429c      	cmp	r4, r3
 800b8ae:	ed61 7a01 	vstmdb	r1!, {s15}
 800b8b2:	d9f0      	bls.n	800b896 <forward_relu+0x9e>
 800b8b4:	bc70      	pop	{r4, r5, r6}
 800b8b6:	4770      	bx	lr
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	deff      	udf	#255	; 0xff
 800b8bc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c4:	d11f      	bne.n	800b906 <forward_relu+0x10e>
 800b8c6:	429c      	cmp	r4, r3
 800b8c8:	d8f4      	bhi.n	800b8b4 <forward_relu+0xbc>
 800b8ca:	1b1c      	subs	r4, r3, r4
 800b8cc:	f024 0403 	bic.w	r4, r4, #3
 800b8d0:	1d1a      	adds	r2, r3, #4
 800b8d2:	2500      	movs	r5, #0
 800b8d4:	1b1b      	subs	r3, r3, r4
 800b8d6:	1d01      	adds	r1, r0, #4
 800b8d8:	ed72 7a01 	vldmdb	r2!, {s15}
 800b8dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e4:	dc0a      	bgt.n	800b8fc <forward_relu+0x104>
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	f841 5d04 	str.w	r5, [r1, #-4]!
 800b8ec:	d0e2      	beq.n	800b8b4 <forward_relu+0xbc>
 800b8ee:	ed72 7a01 	vldmdb	r2!, {s15}
 800b8f2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8fa:	ddf4      	ble.n	800b8e6 <forward_relu+0xee>
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	ed61 7a01 	vstmdb	r1!, {s15}
 800b902:	d1e9      	bne.n	800b8d8 <forward_relu+0xe0>
 800b904:	e7d6      	b.n	800b8b4 <forward_relu+0xbc>
 800b906:	429c      	cmp	r4, r3
 800b908:	d8d4      	bhi.n	800b8b4 <forward_relu+0xbc>
 800b90a:	1b1c      	subs	r4, r3, r4
 800b90c:	f024 0403 	bic.w	r4, r4, #3
 800b910:	1d1a      	adds	r2, r3, #4
 800b912:	1d01      	adds	r1, r0, #4
 800b914:	1b1b      	subs	r3, r3, r4
 800b916:	ed72 7a01 	vldmdb	r2!, {s15}
 800b91a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b922:	db0e      	blt.n	800b942 <forward_relu+0x14a>
 800b924:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b928:	4293      	cmp	r3, r2
 800b92a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b92e:	ed61 7a01 	vstmdb	r1!, {s15}
 800b932:	d0bf      	beq.n	800b8b4 <forward_relu+0xbc>
 800b934:	ed72 7a01 	vldmdb	r2!, {s15}
 800b938:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b940:	daf0      	bge.n	800b924 <forward_relu+0x12c>
 800b942:	4293      	cmp	r3, r2
 800b944:	ed61 7a01 	vstmdb	r1!, {s15}
 800b948:	d1e5      	bne.n	800b916 <forward_relu+0x11e>
 800b94a:	e7b3      	b.n	800b8b4 <forward_relu+0xbc>
 800b94c:	6893      	ldr	r3, [r2, #8]
 800b94e:	6989      	ldr	r1, [r1, #24]
 800b950:	6990      	ldr	r0, [r2, #24]
 800b952:	6889      	ldr	r1, [r1, #8]
 800b954:	6884      	ldr	r4, [r0, #8]
 800b956:	0a1b      	lsrs	r3, r3, #8
 800b958:	d075      	beq.n	800ba46 <forward_relu+0x24e>
 800b95a:	68d5      	ldr	r5, [r2, #12]
 800b95c:	2201      	movs	r2, #1
 800b95e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b962:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800b966:	429d      	cmp	r5, r3
 800b968:	fb00 f202 	mul.w	r2, r0, r2
 800b96c:	d1f9      	bne.n	800b962 <forward_relu+0x16a>
 800b96e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800b972:	3b01      	subs	r3, #1
 800b974:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b978:	4294      	cmp	r4, r2
 800b97a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800b97e:	d899      	bhi.n	800b8b4 <forward_relu+0xbc>
 800b980:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ba5c <forward_relu+0x264>
 800b984:	3204      	adds	r2, #4
 800b986:	3104      	adds	r1, #4
 800b988:	4613      	mov	r3, r2
 800b98a:	ed72 7a01 	vldmdb	r2!, {s15}
 800b98e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b996:	f1a3 0308 	sub.w	r3, r3, #8
 800b99a:	bfb8      	it	lt
 800b99c:	eef0 7a47 	vmovlt.f32	s15, s14
 800b9a0:	429c      	cmp	r4, r3
 800b9a2:	ed61 7a01 	vstmdb	r1!, {s15}
 800b9a6:	d9ef      	bls.n	800b988 <forward_relu+0x190>
 800b9a8:	bc70      	pop	{r4, r5, r6}
 800b9aa:	4770      	bx	lr
 800b9ac:	688c      	ldr	r4, [r1, #8]
 800b9ae:	6891      	ldr	r1, [r2, #8]
 800b9b0:	6880      	ldr	r0, [r0, #8]
 800b9b2:	0a09      	lsrs	r1, r1, #8
 800b9b4:	d049      	beq.n	800ba4a <forward_relu+0x252>
 800b9b6:	68d5      	ldr	r5, [r2, #12]
 800b9b8:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800b9bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b9c0:	42aa      	cmp	r2, r5
 800b9c2:	fb01 f303 	mul.w	r3, r1, r3
 800b9c6:	d1f9      	bne.n	800b9bc <forward_relu+0x1c4>
 800b9c8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800b9cc:	3a01      	subs	r2, #1
 800b9ce:	68b1      	ldr	r1, [r6, #8]
 800b9d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9d4:	429c      	cmp	r4, r3
 800b9d6:	ed91 7a00 	vldr	s14, [r1]
 800b9da:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b9de:	f63f af69 	bhi.w	800b8b4 <forward_relu+0xbc>
 800b9e2:	2500      	movs	r5, #0
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	1d02      	adds	r2, r0, #4
 800b9e8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b9ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f4:	f1a3 0104 	sub.w	r1, r3, #4
 800b9f8:	f1a3 0308 	sub.w	r3, r3, #8
 800b9fc:	d406      	bmi.n	800ba0c <forward_relu+0x214>
 800b9fe:	429c      	cmp	r4, r3
 800ba00:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ba04:	f63f af56 	bhi.w	800b8b4 <forward_relu+0xbc>
 800ba08:	460b      	mov	r3, r1
 800ba0a:	e7ed      	b.n	800b9e8 <forward_relu+0x1f0>
 800ba0c:	429c      	cmp	r4, r3
 800ba0e:	ed62 7a01 	vstmdb	r2!, {s15}
 800ba12:	f63f af4f 	bhi.w	800b8b4 <forward_relu+0xbc>
 800ba16:	460b      	mov	r3, r1
 800ba18:	e7e6      	b.n	800b9e8 <forward_relu+0x1f0>
 800ba1a:	68b3      	ldr	r3, [r6, #8]
 800ba1c:	ed93 7a02 	vldr	s14, [r3, #8]
 800ba20:	edd3 6a00 	vldr	s13, [r3]
 800ba24:	ed93 6a01 	vldr	s12, [r3, #4]
 800ba28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ba2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba30:	d401      	bmi.n	800ba36 <forward_relu+0x23e>
 800ba32:	4623      	mov	r3, r4
 800ba34:	e71e      	b.n	800b874 <forward_relu+0x7c>
 800ba36:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ba3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3e:	4623      	mov	r3, r4
 800ba40:	f47f af63 	bne.w	800b90a <forward_relu+0x112>
 800ba44:	e741      	b.n	800b8ca <forward_relu+0xd2>
 800ba46:	4622      	mov	r2, r4
 800ba48:	e79a      	b.n	800b980 <forward_relu+0x188>
 800ba4a:	68b2      	ldr	r2, [r6, #8]
 800ba4c:	4623      	mov	r3, r4
 800ba4e:	ed92 7a00 	vldr	s14, [r2]
 800ba52:	e7c6      	b.n	800b9e2 <forward_relu+0x1ea>
 800ba54:	2300      	movs	r3, #0
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	deff      	udf	#255	; 0xff
 800ba5a:	bf00      	nop
 800ba5c:	00000000 	.word	0x00000000

0800ba60 <forward_ap>:
 800ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba64:	6983      	ldr	r3, [r0, #24]
 800ba66:	b09b      	sub	sp, #108	; 0x6c
 800ba68:	881a      	ldrh	r2, [r3, #0]
 800ba6a:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba6c:	2a00      	cmp	r2, #0
 800ba6e:	f000 80f8 	beq.w	800bc62 <forward_ap+0x202>
 800ba72:	6859      	ldr	r1, [r3, #4]
 800ba74:	684b      	ldr	r3, [r1, #4]
 800ba76:	b103      	cbz	r3, 800ba7a <forward_ap+0x1a>
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2a01      	cmp	r2, #1
 800ba7c:	f000 80f9 	beq.w	800bc72 <forward_ap+0x212>
 800ba80:	690a      	ldr	r2, [r1, #16]
 800ba82:	2a00      	cmp	r2, #0
 800ba84:	f000 80f8 	beq.w	800bc78 <forward_ap+0x218>
 800ba88:	6811      	ldr	r1, [r2, #0]
 800ba8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ba8c:	68ca      	ldr	r2, [r1, #12]
 800ba8e:	6989      	ldr	r1, [r1, #24]
 800ba90:	68d4      	ldr	r4, [r2, #12]
 800ba92:	6895      	ldr	r5, [r2, #8]
 800ba94:	688a      	ldr	r2, [r1, #8]
 800ba96:	68d9      	ldr	r1, [r3, #12]
 800ba98:	699b      	ldr	r3, [r3, #24]
 800ba9a:	9205      	str	r2, [sp, #20]
 800ba9c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	9315      	str	r3, [sp, #84]	; 0x54
 800baa2:	e9d1 7c02 	ldrd	r7, ip, [r1, #8]
 800baa6:	e9d2 3600 	ldrd	r3, r6, [r2]
 800baaa:	6a02      	ldr	r2, [r0, #32]
 800baac:	970a      	str	r7, [sp, #40]	; 0x28
 800baae:	920b      	str	r2, [sp, #44]	; 0x2c
 800bab0:	684f      	ldr	r7, [r1, #4]
 800bab2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800bab4:	69c1      	ldr	r1, [r0, #28]
 800bab6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bab8:	9013      	str	r0, [sp, #76]	; 0x4c
 800baba:	4258      	negs	r0, r3
 800babc:	9410      	str	r4, [sp, #64]	; 0x40
 800babe:	9509      	str	r5, [sp, #36]	; 0x24
 800bac0:	9614      	str	r6, [sp, #80]	; 0x50
 800bac2:	9111      	str	r1, [sp, #68]	; 0x44
 800bac4:	9212      	str	r2, [sp, #72]	; 0x48
 800bac6:	9003      	str	r0, [sp, #12]
 800bac8:	2c00      	cmp	r4, #0
 800baca:	f000 80c7 	beq.w	800bc5c <forward_ap+0x1fc>
 800bace:	eb0c 0003 	add.w	r0, ip, r3
 800bad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bad6:	9004      	str	r0, [sp, #16]
 800bad8:	fb07 f303 	mul.w	r3, r7, r3
 800badc:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800bae0:	fb02 f301 	mul.w	r3, r2, r1
 800bae4:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800bae8:	9316      	str	r3, [sp, #88]	; 0x58
 800baea:	4273      	negs	r3, r6
 800baec:	9317      	str	r3, [sp, #92]	; 0x5c
 800baee:	fb05 f30a 	mul.w	r3, r5, sl
 800baf2:	9319      	str	r3, [sp, #100]	; 0x64
 800baf4:	2300      	movs	r3, #0
 800baf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bafa:	930c      	str	r3, [sp, #48]	; 0x30
 800bafc:	463d      	mov	r5, r7
 800bafe:	9b03      	ldr	r3, [sp, #12]
 800bb00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb02:	9804      	ldr	r0, [sp, #16]
 800bb04:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800bb08:	4281      	cmp	r1, r0
 800bb0a:	bf94      	ite	ls
 800bb0c:	185b      	addls	r3, r3, r1
 800bb0e:	181b      	addhi	r3, r3, r0
 800bb10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb12:	920e      	str	r2, [sp, #56]	; 0x38
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	2900      	cmp	r1, #0
 800bb18:	f000 8092 	beq.w	800bc40 <forward_ap+0x1e0>
 800bb1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	fb00 f102 	mul.w	r1, r0, r2
 800bb24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb26:	9318      	str	r3, [sp, #96]	; 0x60
 800bb28:	9b05      	ldr	r3, [sp, #20]
 800bb2a:	9108      	str	r1, [sp, #32]
 800bb2c:	1882      	adds	r2, r0, r2
 800bb2e:	eb03 010a 	add.w	r1, r3, sl
 800bb32:	9207      	str	r2, [sp, #28]
 800bb34:	4698      	mov	r8, r3
 800bb36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb38:	2300      	movs	r3, #0
 800bb3a:	930d      	str	r3, [sp, #52]	; 0x34
 800bb3c:	2a00      	cmp	r2, #0
 800bb3e:	bfac      	ite	ge
 800bb40:	9b08      	ldrge	r3, [sp, #32]
 800bb42:	9c08      	ldrlt	r4, [sp, #32]
 800bb44:	9206      	str	r2, [sp, #24]
 800bb46:	bfa8      	it	ge
 800bb48:	189c      	addge	r4, r3, r2
 800bb4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb4c:	9806      	ldr	r0, [sp, #24]
 800bb4e:	9e07      	ldr	r6, [sp, #28]
 800bb50:	fb04 340a 	mla	r4, r4, sl, r3
 800bb54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb56:	bfb8      	it	lt
 800bb58:	2200      	movlt	r2, #0
 800bb5a:	42b3      	cmp	r3, r6
 800bb5c:	bf94      	ite	ls
 800bb5e:	18c0      	addls	r0, r0, r3
 800bb60:	1980      	addhi	r0, r0, r6
 800bb62:	eba2 0e00 	sub.w	lr, r2, r0
 800bb66:	1a82      	subs	r2, r0, r2
 800bb68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb6a:	9200      	str	r2, [sp, #0]
 800bb6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bb6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb72:	fb02 fe0e 	mul.w	lr, r2, lr
 800bb76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	bf08      	it	eq
 800bb7c:	4672      	moveq	r2, lr
 800bb7e:	9202      	str	r2, [sp, #8]
 800bb80:	9b01      	ldr	r3, [sp, #4]
 800bb82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb84:	4293      	cmp	r3, r2
 800bb86:	dd49      	ble.n	800bc1c <forward_ap+0x1bc>
 800bb88:	9b00      	ldr	r3, [sp, #0]
 800bb8a:	4694      	mov	ip, r2
 800bb8c:	fb0a 4003 	mla	r0, sl, r3, r4
 800bb90:	2201      	movs	r2, #1
 800bb92:	2700      	movs	r7, #0
 800bb94:	9b00      	ldr	r3, [sp, #0]
 800bb96:	441f      	add	r7, r3
 800bb98:	45be      	cmp	lr, r7
 800bb9a:	d064      	beq.n	800bc66 <forward_ap+0x206>
 800bb9c:	42a0      	cmp	r0, r4
 800bb9e:	bf88      	it	hi
 800bba0:	2600      	movhi	r6, #0
 800bba2:	d932      	bls.n	800bc0a <forward_ap+0x1aa>
 800bba4:	4623      	mov	r3, r4
 800bba6:	eb0a 0b04 	add.w	fp, sl, r4
 800bbaa:	b145      	cbz	r5, 800bbbe <forward_ap+0x15e>
 800bbac:	2a00      	cmp	r2, #0
 800bbae:	d05e      	beq.n	800bc6e <forward_ap+0x20e>
 800bbb0:	4642      	mov	r2, r8
 800bbb2:	ecf3 7a01 	vldmia	r3!, {s15}
 800bbb6:	459b      	cmp	fp, r3
 800bbb8:	ece2 7a01 	vstmia	r2!, {s15}
 800bbbc:	d1f9      	bne.n	800bbb2 <forward_ap+0x152>
 800bbbe:	46a3      	mov	fp, r4
 800bbc0:	44d3      	add	fp, sl
 800bbc2:	4558      	cmp	r0, fp
 800bbc4:	d910      	bls.n	800bbe8 <forward_ap+0x188>
 800bbc6:	2d00      	cmp	r5, #0
 800bbc8:	d0fa      	beq.n	800bbc0 <forward_ap+0x160>
 800bbca:	4643      	mov	r3, r8
 800bbcc:	465a      	mov	r2, fp
 800bbce:	ed93 7a00 	vldr	s14, [r3]
 800bbd2:	ecf2 7a01 	vldmia	r2!, {s15}
 800bbd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbda:	ece3 7a01 	vstmia	r3!, {s15}
 800bbde:	428b      	cmp	r3, r1
 800bbe0:	d1f5      	bne.n	800bbce <forward_ap+0x16e>
 800bbe2:	44d3      	add	fp, sl
 800bbe4:	4558      	cmp	r0, fp
 800bbe6:	d8ee      	bhi.n	800bbc6 <forward_ap+0x166>
 800bbe8:	b17e      	cbz	r6, 800bc0a <forward_ap+0x1aa>
 800bbea:	ee07 6a90 	vmov	s15, r6
 800bbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbf6:	b145      	cbz	r5, 800bc0a <forward_ap+0x1aa>
 800bbf8:	4643      	mov	r3, r8
 800bbfa:	edd3 7a00 	vldr	s15, [r3]
 800bbfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc02:	ece3 7a01 	vstmia	r3!, {s15}
 800bc06:	4299      	cmp	r1, r3
 800bc08:	d1f7      	bne.n	800bbfa <forward_ap+0x19a>
 800bc0a:	9b01      	ldr	r3, [sp, #4]
 800bc0c:	f10c 0c01 	add.w	ip, ip, #1
 800bc10:	4563      	cmp	r3, ip
 800bc12:	444c      	add	r4, r9
 800bc14:	4448      	add	r0, r9
 800bc16:	f04f 0200 	mov.w	r2, #0
 800bc1a:	d1bb      	bne.n	800bb94 <forward_ap+0x134>
 800bc1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bc1e:	9c07      	ldr	r4, [sp, #28]
 800bc20:	9a06      	ldr	r2, [sp, #24]
 800bc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc24:	4402      	add	r2, r0
 800bc26:	1a20      	subs	r0, r4, r0
 800bc28:	9007      	str	r0, [sp, #28]
 800bc2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	4298      	cmp	r0, r3
 800bc30:	930d      	str	r3, [sp, #52]	; 0x34
 800bc32:	44d0      	add	r8, sl
 800bc34:	4451      	add	r1, sl
 800bc36:	d181      	bne.n	800bb3c <forward_ap+0xdc>
 800bc38:	9b05      	ldr	r3, [sp, #20]
 800bc3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bc3c:	4413      	add	r3, r2
 800bc3e:	9305      	str	r3, [sp, #20]
 800bc40:	9a03      	ldr	r2, [sp, #12]
 800bc42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bc44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc46:	440a      	add	r2, r1
 800bc48:	9203      	str	r2, [sp, #12]
 800bc4a:	9a04      	ldr	r2, [sp, #16]
 800bc4c:	1a52      	subs	r2, r2, r1
 800bc4e:	9204      	str	r2, [sp, #16]
 800bc50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc52:	3301      	adds	r3, #1
 800bc54:	429a      	cmp	r2, r3
 800bc56:	930c      	str	r3, [sp, #48]	; 0x30
 800bc58:	f47f af51 	bne.w	800bafe <forward_ap+0x9e>
 800bc5c:	b01b      	add	sp, #108	; 0x6c
 800bc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc62:	6853      	ldr	r3, [r2, #4]
 800bc64:	deff      	udf	#255	; 0xff
 800bc66:	42a0      	cmp	r0, r4
 800bc68:	9e02      	ldr	r6, [sp, #8]
 800bc6a:	d89b      	bhi.n	800bba4 <forward_ap+0x144>
 800bc6c:	e7bc      	b.n	800bbe8 <forward_ap+0x188>
 800bc6e:	46a3      	mov	fp, r4
 800bc70:	e7ab      	b.n	800bbca <forward_ap+0x16a>
 800bc72:	2300      	movs	r3, #0
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	deff      	udf	#255	; 0xff
 800bc78:	68d3      	ldr	r3, [r2, #12]
 800bc7a:	deff      	udf	#255	; 0xff

0800bc7c <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 800bc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc80:	b08d      	sub	sp, #52	; 0x34
 800bc82:	9003      	str	r0, [sp, #12]
 800bc84:	9207      	str	r2, [sp, #28]
 800bc86:	9308      	str	r3, [sp, #32]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
 800bc8e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800bc90:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800bc92:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800bc96:	910b      	str	r1, [sp, #44]	; 0x2c
 800bc98:	fb00 f003 	mul.w	r0, r0, r3
 800bc9c:	9004      	str	r0, [sp, #16]
 800bc9e:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800bca2:	9009      	str	r0, [sp, #36]	; 0x24
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	f000 80ef 	beq.w	800be88 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 800bcaa:	fb00 f302 	mul.w	r3, r0, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	9306      	str	r3, [sp, #24]
 800bcb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bcb4:	fb03 f302 	mul.w	r3, r3, r2
 800bcb8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bcc0:	425b      	negs	r3, r3
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	00a4      	lsls	r4, r4, #2
 800bcc8:	9302      	str	r3, [sp, #8]
 800bcca:	0093      	lsls	r3, r2, #2
 800bccc:	9405      	str	r4, [sp, #20]
 800bcce:	930a      	str	r3, [sp, #40]	; 0x28
 800bcd0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f2c0 80db 	blt.w	800be8e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x212>
 800bcd8:	9e01      	ldr	r6, [sp, #4]
 800bcda:	9d04      	ldr	r5, [sp, #16]
 800bcdc:	2000      	movs	r0, #0
 800bcde:	9b07      	ldr	r3, [sp, #28]
 800bce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bce2:	9900      	ldr	r1, [sp, #0]
 800bce4:	fb05 3502 	mla	r5, r5, r2, r3
 800bce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcea:	440b      	add	r3, r1
 800bcec:	9919      	ldr	r1, [sp, #100]	; 0x64
 800bcee:	428b      	cmp	r3, r1
 800bcf0:	bf94      	ite	ls
 800bcf2:	ebc0 0003 	rsbls	r0, r0, r3
 800bcf6:	ebc0 0001 	rsbhi	r0, r0, r1
 800bcfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcfc:	eba3 0a00 	sub.w	sl, r3, r0
 800bd00:	9b08      	ldr	r3, [sp, #32]
 800bd02:	f1bb 0f00 	cmp.w	fp, #0
 800bd06:	eba1 0900 	sub.w	r9, r1, r0
 800bd0a:	eeb0 7a40 	vmov.f32	s14, s0
 800bd0e:	fb03 f000 	mul.w	r0, r3, r0
 800bd12:	f340 80a1 	ble.w	800be58 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>
 800bd16:	f020 040f 	bic.w	r4, r0, #15
 800bd1a:	f104 38ff 	add.w	r8, r4, #4294967295
 800bd1e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800bd22:	f108 0801 	add.w	r8, r8, #1
 800bd26:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800bd2a:	fb02 fa0a 	mul.w	sl, r2, sl
 800bd2e:	fb02 f909 	mul.w	r9, r2, r9
 800bd32:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800bd36:	f04f 0c00 	mov.w	ip, #0
 800bd3a:	2c00      	cmp	r4, #0
 800bd3c:	bfd8      	it	le
 800bd3e:	2700      	movle	r7, #0
 800bd40:	dd70      	ble.n	800be24 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 800bd42:	f106 0240 	add.w	r2, r6, #64	; 0x40
 800bd46:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800bd50:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800bd54:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800bd58:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 800bd5c:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800bd60:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 800bd64:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800bd68:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 800bd6c:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 800bd70:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800bd74:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800bd78:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800bd7c:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 800bd80:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bd84:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800bd88:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bd8c:	3110      	adds	r1, #16
 800bd8e:	42a1      	cmp	r1, r4
 800bd90:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 800bd94:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800bd98:	eee5 7a86 	vfma.f32	s15, s11, s12
 800bd9c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800bda0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800bda4:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800bda8:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800bdac:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800bdb0:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800bdb4:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800bdb8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bdbc:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800bdc0:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 800bdc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bdc8:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800bdcc:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 800bdd0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bdd4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800bdd8:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800bddc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bde0:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800bde4:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800bde8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bdec:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800bdf0:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800bdf4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bdf8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800bdfc:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800be00:	eee1 7a21 	vfma.f32	s15, s2, s3
 800be04:	eee2 7a22 	vfma.f32	s15, s4, s5
 800be08:	eee3 7a23 	vfma.f32	s15, s6, s7
 800be0c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800be10:	eee5 7a25 	vfma.f32	s15, s10, s11
 800be14:	eee6 7a26 	vfma.f32	s15, s12, s13
 800be18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be1c:	db96      	blt.n	800bd4c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd0>
 800be1e:	4476      	add	r6, lr
 800be20:	4475      	add	r5, lr
 800be22:	4647      	mov	r7, r8
 800be24:	42b8      	cmp	r0, r7
 800be26:	dd10      	ble.n	800be4a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 800be28:	463b      	mov	r3, r7
 800be2a:	4631      	mov	r1, r6
 800be2c:	462a      	mov	r2, r5
 800be2e:	ecf2 6a01 	vldmia	r2!, {s13}
 800be32:	ecf1 7a01 	vldmia	r1!, {s15}
 800be36:	3301      	adds	r3, #1
 800be38:	4298      	cmp	r0, r3
 800be3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be3e:	d1f6      	bne.n	800be2e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 800be40:	1bc7      	subs	r7, r0, r7
 800be42:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800be46:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800be4a:	f10c 0c01 	add.w	ip, ip, #1
 800be4e:	45dc      	cmp	ip, fp
 800be50:	4456      	add	r6, sl
 800be52:	444d      	add	r5, r9
 800be54:	f47f af71 	bne.w	800bd3a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xbe>
 800be58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800be5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be5c:	9a03      	ldr	r2, [sp, #12]
 800be5e:	9b02      	ldr	r3, [sp, #8]
 800be60:	ed82 7a00 	vstr	s14, [r2]
 800be64:	4401      	add	r1, r0
 800be66:	911c      	str	r1, [sp, #112]	; 0x70
 800be68:	9905      	ldr	r1, [sp, #20]
 800be6a:	440a      	add	r2, r1
 800be6c:	9203      	str	r2, [sp, #12]
 800be6e:	9a00      	ldr	r2, [sp, #0]
 800be70:	9906      	ldr	r1, [sp, #24]
 800be72:	1a12      	subs	r2, r2, r0
 800be74:	9200      	str	r2, [sp, #0]
 800be76:	9a01      	ldr	r2, [sp, #4]
 800be78:	440a      	add	r2, r1
 800be7a:	9201      	str	r2, [sp, #4]
 800be7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be7e:	3301      	adds	r3, #1
 800be80:	4293      	cmp	r3, r2
 800be82:	9302      	str	r3, [sp, #8]
 800be84:	f47f af24 	bne.w	800bcd0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x54>
 800be88:	b00d      	add	sp, #52	; 0x34
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8e:	9a00      	ldr	r2, [sp, #0]
 800be90:	9b04      	ldr	r3, [sp, #16]
 800be92:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800be94:	4610      	mov	r0, r2
 800be96:	189d      	adds	r5, r3, r2
 800be98:	e721      	b.n	800bcde <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x62>
 800be9a:	bf00      	nop

0800be9c <forward_lite_conv2d_if32of32wf32>:
 800be9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea0:	ed2d 8b02 	vpush	{d8}
 800bea4:	b09f      	sub	sp, #124	; 0x7c
 800bea6:	af08      	add	r7, sp, #32
 800bea8:	461c      	mov	r4, r3
 800beaa:	62f9      	str	r1, [r7, #44]	; 0x2c
 800beac:	63fc      	str	r4, [r7, #60]	; 0x3c
 800beae:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 800beb2:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 800beb6:	64fc      	str	r4, [r7, #76]	; 0x4c
 800beb8:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800bebc:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	424e      	negs	r6, r1
 800bec4:	4686      	mov	lr, r0
 800bec6:	4694      	mov	ip, r2
 800bec8:	613a      	str	r2, [r7, #16]
 800beca:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 800bece:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bed2:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 800bed6:	617d      	str	r5, [r7, #20]
 800bed8:	633e      	str	r6, [r7, #48]	; 0x30
 800beda:	2c00      	cmp	r4, #0
 800bedc:	f000 8092 	beq.w	800c004 <forward_lite_conv2d_if32of32wf32+0x168>
 800bee0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800bee4:	6379      	str	r1, [r7, #52]	; 0x34
 800bee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800beea:	eddf 0a9c 	vldr	s1, [pc, #624]	; 800c15c <forward_lite_conv2d_if32of32wf32+0x2c0>
 800beee:	fb04 f202 	mul.w	r2, r4, r2
 800bef2:	fb03 f402 	mul.w	r4, r3, r2
 800bef6:	fb03 f201 	mul.w	r2, r3, r1
 800befa:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800befe:	63bc      	str	r4, [r7, #56]	; 0x38
 800bf00:	fb01 f10a 	mul.w	r1, r1, sl
 800bf04:	0089      	lsls	r1, r1, #2
 800bf06:	61b9      	str	r1, [r7, #24]
 800bf08:	fb05 f102 	mul.w	r1, r5, r2
 800bf0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf10:	fb06 f202 	mul.w	r2, r6, r2
 800bf14:	0089      	lsls	r1, r1, #2
 800bf16:	61f9      	str	r1, [r7, #28]
 800bf18:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 800bf1c:	f10b 0207 	add.w	r2, fp, #7
 800bf20:	62b9      	str	r1, [r7, #40]	; 0x28
 800bf22:	f022 0107 	bic.w	r1, r2, #7
 800bf26:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 800bf2a:	4240      	negs	r0, r0
 800bf2c:	60f9      	str	r1, [r7, #12]
 800bf2e:	60ba      	str	r2, [r7, #8]
 800bf30:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 800bf34:	2200      	movs	r2, #0
 800bf36:	4655      	mov	r5, sl
 800bf38:	6538      	str	r0, [r7, #80]	; 0x50
 800bf3a:	6239      	str	r1, [r7, #32]
 800bf3c:	627a      	str	r2, [r7, #36]	; 0x24
 800bf3e:	46da      	mov	sl, fp
 800bf40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf42:	2a00      	cmp	r2, #0
 800bf44:	f2c0 80d7 	blt.w	800c0f6 <forward_lite_conv2d_if32of32wf32+0x25a>
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 800bf4e:	657a      	str	r2, [r7, #84]	; 0x54
 800bf50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf56:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800bf5a:	440a      	add	r2, r1
 800bf5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf5e:	4282      	cmp	r2, r0
 800bf60:	bf94      	ite	ls
 800bf62:	ebc1 0102 	rsbls	r1, r1, r2
 800bf66:	ebc1 0100 	rsbhi	r1, r1, r0
 800bf6a:	6a3a      	ldr	r2, [r7, #32]
 800bf6c:	6439      	str	r1, [r7, #64]	; 0x40
 800bf6e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800bf72:	d24d      	bcs.n	800c010 <forward_lite_conv2d_if32of32wf32+0x174>
 800bf74:	b385      	cbz	r5, 800bfd8 <forward_lite_conv2d_if32of32wf32+0x13c>
 800bf76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf78:	2a00      	cmp	r2, #0
 800bf7a:	f000 80c1 	beq.w	800c100 <forward_lite_conv2d_if32of32wf32+0x264>
 800bf7e:	4659      	mov	r1, fp
 800bf80:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 800bf84:	693e      	ldr	r6, [r7, #16]
 800bf86:	46d3      	mov	fp, sl
 800bf88:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 800bf8c:	4691      	mov	r9, r2
 800bf8e:	2400      	movs	r4, #0
 800bf90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf92:	ecb9 0a01 	vldmia	r9!, {s0}
 800bf96:	9207      	str	r2, [sp, #28]
 800bf98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf9a:	e9cd a205 	strd	sl, r2, [sp, #20]
 800bf9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfa0:	9204      	str	r2, [sp, #16]
 800bfa2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bfa6:	9203      	str	r2, [sp, #12]
 800bfa8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bfac:	9202      	str	r2, [sp, #8]
 800bfae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	e9cd 5200 	strd	r5, r2, [sp]
 800bfb8:	3401      	adds	r4, #1
 800bfba:	4632      	mov	r2, r6
 800bfbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bfc0:	64b9      	str	r1, [r7, #72]	; 0x48
 800bfc2:	f7ff fe5b 	bl	800bc7c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800bfc6:	42a5      	cmp	r5, r4
 800bfc8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bfca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfce:	445e      	add	r6, fp
 800bfd0:	f108 0804 	add.w	r8, r8, #4
 800bfd4:	d1dc      	bne.n	800bf90 <forward_lite_conv2d_if32of32wf32+0xf4>
 800bfd6:	46da      	mov	sl, fp
 800bfd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfda:	69b8      	ldr	r0, [r7, #24]
 800bfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfde:	4401      	add	r1, r0
 800bfe0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bfe2:	6978      	ldr	r0, [r7, #20]
 800bfe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfe6:	4401      	add	r1, r0
 800bfe8:	6339      	str	r1, [r7, #48]	; 0x30
 800bfea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bfec:	1a09      	subs	r1, r1, r0
 800bfee:	6379      	str	r1, [r7, #52]	; 0x34
 800bff0:	69f8      	ldr	r0, [r7, #28]
 800bff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bff4:	4401      	add	r1, r0
 800bff6:	62b9      	str	r1, [r7, #40]	; 0x28
 800bff8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800bffc:	3201      	adds	r2, #1
 800bffe:	4291      	cmp	r1, r2
 800c000:	627a      	str	r2, [r7, #36]	; 0x24
 800c002:	d19d      	bne.n	800bf40 <forward_lite_conv2d_if32of32wf32+0xa4>
 800c004:	375c      	adds	r7, #92	; 0x5c
 800c006:	46bd      	mov	sp, r7
 800c008:	ecbd 8b02 	vpop	{d8}
 800c00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c010:	466a      	mov	r2, sp
 800c012:	ee08 2a10 	vmov	s16, r2
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	ebad 0d02 	sub.w	sp, sp, r2
 800c01c:	aa08      	add	r2, sp, #32
 800c01e:	2d00      	cmp	r5, #0
 800c020:	d03d      	beq.n	800c09e <forward_lite_conv2d_if32of32wf32+0x202>
 800c022:	6938      	ldr	r0, [r7, #16]
 800c024:	68bc      	ldr	r4, [r7, #8]
 800c026:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 800c02a:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800c02c:	4659      	mov	r1, fp
 800c02e:	f04f 0800 	mov.w	r8, #0
 800c032:	46ab      	mov	fp, r5
 800c034:	4605      	mov	r5, r0
 800c036:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c038:	b138      	cbz	r0, 800c04a <forward_lite_conv2d_if32of32wf32+0x1ae>
 800c03a:	4628      	mov	r0, r5
 800c03c:	4694      	mov	ip, r2
 800c03e:	f850 eb04 	ldr.w	lr, [r0], #4
 800c042:	f84c eb04 	str.w	lr, [ip], #4
 800c046:	42a0      	cmp	r0, r4
 800c048:	d1f9      	bne.n	800c03e <forward_lite_conv2d_if32of32wf32+0x1a2>
 800c04a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c04c:	b358      	cbz	r0, 800c0a6 <forward_lite_conv2d_if32of32wf32+0x20a>
 800c04e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c050:	ecb6 0a01 	vldmia	r6!, {s0}
 800c054:	9007      	str	r0, [sp, #28]
 800c056:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c058:	9006      	str	r0, [sp, #24]
 800c05a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c05c:	9005      	str	r0, [sp, #20]
 800c05e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c060:	9004      	str	r0, [sp, #16]
 800c062:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800c066:	9003      	str	r0, [sp, #12]
 800c068:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c06c:	9002      	str	r0, [sp, #8]
 800c06e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c072:	f108 0801 	add.w	r8, r8, #1
 800c076:	e9cd b000 	strd	fp, r0, [sp]
 800c07a:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 800c07e:	4648      	mov	r0, r9
 800c080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c084:	f7ff fdfa 	bl	800bc7c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800c088:	45d8      	cmp	r8, fp
 800c08a:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 800c08e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c092:	4455      	add	r5, sl
 800c094:	4454      	add	r4, sl
 800c096:	f109 0904 	add.w	r9, r9, #4
 800c09a:	d1cc      	bne.n	800c036 <forward_lite_conv2d_if32of32wf32+0x19a>
 800c09c:	465d      	mov	r5, fp
 800c09e:	ee18 2a10 	vmov	r2, s16
 800c0a2:	4695      	mov	sp, r2
 800c0a4:	e798      	b.n	800bfd8 <forward_lite_conv2d_if32of32wf32+0x13c>
 800c0a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c0a8:	9007      	str	r0, [sp, #28]
 800c0aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c0ac:	9006      	str	r0, [sp, #24]
 800c0ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c0b0:	9005      	str	r0, [sp, #20]
 800c0b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c0b4:	9004      	str	r0, [sp, #16]
 800c0b6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800c0ba:	9003      	str	r0, [sp, #12]
 800c0bc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c0c0:	9002      	str	r0, [sp, #8]
 800c0c2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c0c6:	eeb0 0a60 	vmov.f32	s0, s1
 800c0ca:	e9cd b000 	strd	fp, r0, [sp]
 800c0ce:	f108 0801 	add.w	r8, r8, #1
 800c0d2:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 800c0d6:	4648      	mov	r0, r9
 800c0d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c0dc:	f7ff fdce 	bl	800bc7c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800c0e0:	45c3      	cmp	fp, r8
 800c0e2:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 800c0e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0ea:	4455      	add	r5, sl
 800c0ec:	4454      	add	r4, sl
 800c0ee:	f109 0904 	add.w	r9, r9, #4
 800c0f2:	d1a0      	bne.n	800c036 <forward_lite_conv2d_if32of32wf32+0x19a>
 800c0f4:	e7d2      	b.n	800c09c <forward_lite_conv2d_if32of32wf32+0x200>
 800c0f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0f8:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800c0fc:	657a      	str	r2, [r7, #84]	; 0x54
 800c0fe:	e727      	b.n	800bf50 <forward_lite_conv2d_if32of32wf32+0xb4>
 800c100:	4659      	mov	r1, fp
 800c102:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 800c106:	693e      	ldr	r6, [r7, #16]
 800c108:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 800c10c:	46d3      	mov	fp, sl
 800c10e:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 800c112:	4614      	mov	r4, r2
 800c114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c116:	9207      	str	r2, [sp, #28]
 800c118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c11a:	f8cd 9010 	str.w	r9, [sp, #16]
 800c11e:	e9cd a205 	strd	sl, r2, [sp, #20]
 800c122:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c126:	9203      	str	r2, [sp, #12]
 800c128:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c12c:	9202      	str	r2, [sp, #8]
 800c12e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c132:	4640      	mov	r0, r8
 800c134:	e9cd 5200 	strd	r5, r2, [sp]
 800c138:	eeb0 0a60 	vmov.f32	s0, s1
 800c13c:	4632      	mov	r2, r6
 800c13e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c142:	6579      	str	r1, [r7, #84]	; 0x54
 800c144:	3401      	adds	r4, #1
 800c146:	f7ff fd99 	bl	800bc7c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800c14a:	42a5      	cmp	r5, r4
 800c14c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c14e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c152:	445e      	add	r6, fp
 800c154:	f108 0804 	add.w	r8, r8, #4
 800c158:	d1dc      	bne.n	800c114 <forward_lite_conv2d_if32of32wf32+0x278>
 800c15a:	e73c      	b.n	800bfd6 <forward_lite_conv2d_if32of32wf32+0x13a>
 800c15c:	00000000 	.word	0x00000000

0800c160 <forward_lite_dw_if32of32wf32>:
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	b0a5      	sub	sp, #148	; 0x94
 800c166:	9111      	str	r1, [sp, #68]	; 0x44
 800c168:	9320      	str	r3, [sp, #128]	; 0x80
 800c16a:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	; 0xe0
 800c16e:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 800c172:	9122      	str	r1, [sp, #136]	; 0x88
 800c174:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
 800c178:	9123      	str	r1, [sp, #140]	; 0x8c
 800c17a:	4259      	negs	r1, r3
 800c17c:	910f      	str	r1, [sp, #60]	; 0x3c
 800c17e:	9933      	ldr	r1, [sp, #204]	; 0xcc
 800c180:	9219      	str	r2, [sp, #100]	; 0x64
 800c182:	f8bd 20d8 	ldrh.w	r2, [sp, #216]	; 0xd8
 800c186:	901f      	str	r0, [sp, #124]	; 0x7c
 800c188:	9221      	str	r2, [sp, #132]	; 0x84
 800c18a:	2900      	cmp	r1, #0
 800c18c:	f000 813b 	beq.w	800c406 <forward_lite_dw_if32of32wf32+0x2a6>
 800c190:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800c192:	9310      	str	r3, [sp, #64]	; 0x40
 800c194:	4252      	negs	r2, r2
 800c196:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800c198:	921c      	str	r2, [sp, #112]	; 0x70
 800c19a:	00ca      	lsls	r2, r1, #3
 800c19c:	9201      	str	r2, [sp, #4]
 800c19e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800c1a0:	ed9f 3aa5 	vldr	s6, [pc, #660]	; 800c438 <forward_lite_dw_if32of32wf32+0x2d8>
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1a8:	fb02 f303 	mul.w	r3, r2, r3
 800c1ac:	008f      	lsls	r7, r1, #2
 800c1ae:	ea4f 1801 	mov.w	r8, r1, lsl #4
 800c1b2:	931e      	str	r3, [sp, #120]	; 0x78
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	9312      	str	r3, [sp, #72]	; 0x48
 800c1b8:	46bb      	mov	fp, r7
 800c1ba:	46c1      	mov	r9, r8
 800c1bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c1be:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800c1c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	eb02 0103 	add.w	r1, r2, r3
 800c1c8:	bfb8      	it	lt
 800c1ca:	461a      	movlt	r2, r3
 800c1cc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c1ce:	bfa8      	it	ge
 800c1d0:	2200      	movge	r2, #0
 800c1d2:	4299      	cmp	r1, r3
 800c1d4:	bf28      	it	cs
 800c1d6:	4619      	movcs	r1, r3
 800c1d8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f000 8105 	beq.w	800c3ea <forward_lite_dw_if32of32wf32+0x28a>
 800c1e0:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 800c1e2:	1a53      	subs	r3, r2, r1
 800c1e4:	4423      	add	r3, r4
 800c1e6:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800c1e8:	fb04 f303 	mul.w	r3, r4, r3
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	eba1 0e02 	sub.w	lr, r1, r2
 800c1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1f4:	1813      	adds	r3, r2, r0
 800c1f6:	fb02 f204 	mul.w	r2, r2, r4
 800c1fa:	9215      	str	r2, [sp, #84]	; 0x54
 800c1fc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800c1fe:	fb02 f303 	mul.w	r3, r2, r3
 800c202:	931d      	str	r3, [sp, #116]	; 0x74
 800c204:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
 800c208:	fbb3 f3f2 	udiv	r3, r3, r2
 800c20c:	9316      	str	r3, [sp, #88]	; 0x58
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	9317      	str	r3, [sp, #92]	; 0x5c
 800c212:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c214:	930b      	str	r3, [sp, #44]	; 0x2c
 800c216:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c218:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c21a:	930a      	str	r3, [sp, #40]	; 0x28
 800c21c:	2300      	movs	r3, #0
 800c21e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800c222:	920d      	str	r2, [sp, #52]	; 0x34
 800c224:	9313      	str	r3, [sp, #76]	; 0x4c
 800c226:	46f2      	mov	sl, lr
 800c228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f2c0 80ff 	blt.w	800c42e <forward_lite_dw_if32of32wf32+0x2ce>
 800c230:	2500      	movs	r5, #0
 800c232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c234:	462a      	mov	r2, r5
 800c236:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800c238:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c23a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800c23c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c23e:	1808      	adds	r0, r1, r0
 800c240:	993b      	ldr	r1, [sp, #236]	; 0xec
 800c242:	4288      	cmp	r0, r1
 800c244:	bf28      	it	cs
 800c246:	4608      	movcs	r0, r1
 800c248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c24a:	1a80      	subs	r0, r0, r2
 800c24c:	190c      	adds	r4, r1, r4
 800c24e:	2e00      	cmp	r6, #0
 800c250:	f000 80de 	beq.w	800c410 <forward_lite_dw_if32of32wf32+0x2b0>
 800c254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c256:	960c      	str	r6, [sp, #48]	; 0x30
 800c258:	4296      	cmp	r6, r2
 800c25a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c25c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c260:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800c262:	eba2 0100 	sub.w	r1, r2, r0
 800c266:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c268:	fb02 f101 	mul.w	r1, r2, r1
 800c26c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c26e:	bf14      	ite	ne
 800c270:	eef0 3a62 	vmovne.f32	s7, s5
 800c274:	eef0 3a43 	vmoveq.f32	s7, s6
 800c278:	1a12      	subs	r2, r2, r0
 800c27a:	442c      	add	r4, r5
 800c27c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800c27e:	fb0b 5404 	mla	r4, fp, r4, r5
 800c282:	eb04 050b 	add.w	r5, r4, fp
 800c286:	42ac      	cmp	r4, r5
 800c288:	9407      	str	r4, [sp, #28]
 800c28a:	9514      	str	r5, [sp, #80]	; 0x50
 800c28c:	f080 8097 	bcs.w	800c3be <forward_lite_dw_if32of32wf32+0x25e>
 800c290:	0089      	lsls	r1, r1, #2
 800c292:	0092      	lsls	r2, r2, #2
 800c294:	9102      	str	r1, [sp, #8]
 800c296:	9203      	str	r2, [sp, #12]
 800c298:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
 800c29c:	428a      	cmp	r2, r1
 800c29e:	f020 0803 	bic.w	r8, r0, #3
 800c2a2:	f0c0 808c 	bcc.w	800c3be <forward_lite_dw_if32of32wf32+0x25e>
 800c2a6:	2901      	cmp	r1, #1
 800c2a8:	f040 80c8 	bne.w	800c43c <forward_lite_dw_if32of32wf32+0x2dc>
 800c2ac:	f108 32ff 	add.w	r2, r8, #4294967295
 800c2b0:	0891      	lsrs	r1, r2, #2
 800c2b2:	1c4a      	adds	r2, r1, #1
 800c2b4:	fb01 9109 	mla	r1, r1, r9, r9
 800c2b8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c2ba:	9106      	str	r1, [sp, #24]
 800c2bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c2be:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
 800c2c2:	4421      	add	r1, r4
 800c2c4:	9108      	str	r1, [sp, #32]
 800c2c6:	e9dd ce02 	ldrd	ip, lr, [sp, #8]
 800c2ca:	0111      	lsls	r1, r2, #4
 800c2cc:	0092      	lsls	r2, r2, #2
 800c2ce:	9204      	str	r2, [sp, #16]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	9105      	str	r1, [sp, #20]
 800c2d4:	920e      	str	r2, [sp, #56]	; 0x38
 800c2d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c2d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2da:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800c2de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c2e0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c2e4:	9202      	str	r2, [sp, #8]
 800c2e6:	ecb7 7a01 	vldmia	r7!, {s14}
 800c2ea:	f1ba 0f00 	cmp.w	sl, #0
 800c2ee:	ee23 7a87 	vmul.f32	s14, s7, s14
 800c2f2:	dd4b      	ble.n	800c38c <forward_lite_dw_if32of32wf32+0x22c>
 800c2f4:	9a07      	ldr	r2, [sp, #28]
 800c2f6:	2600      	movs	r6, #0
 800c2f8:	f1b8 0f00 	cmp.w	r8, #0
 800c2fc:	f340 8086 	ble.w	800c40c <forward_lite_dw_if32of32wf32+0x2ac>
 800c300:	9c01      	ldr	r4, [sp, #4]
 800c302:	f103 0110 	add.w	r1, r3, #16
 800c306:	1915      	adds	r5, r2, r4
 800c308:	f04f 0b00 	mov.w	fp, #0
 800c30c:	4614      	mov	r4, r2
 800c30e:	ed51 5a03 	vldr	s11, [r1, #-12]
 800c312:	edd4 7a01 	vldr	s15, [r4, #4]
 800c316:	ed94 6a00 	vldr	s12, [r4]
 800c31a:	ed51 6a04 	vldr	s13, [r1, #-16]
 800c31e:	ed95 5a00 	vldr	s10, [r5]
 800c322:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c326:	ed51 5a02 	vldr	s11, [r1, #-8]
 800c32a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c32e:	f10b 0b04 	add.w	fp, fp, #4
 800c332:	45c3      	cmp	fp, r8
 800c334:	ed95 6a01 	vldr	s12, [r5, #4]
 800c338:	ed51 6a01 	vldr	s13, [r1, #-4]
 800c33c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c340:	444c      	add	r4, r9
 800c342:	f101 0110 	add.w	r1, r1, #16
 800c346:	444d      	add	r5, r9
 800c348:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c34c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c350:	dbdd      	blt.n	800c30e <forward_lite_dw_if32of32wf32+0x1ae>
 800c352:	9906      	ldr	r1, [sp, #24]
 800c354:	440a      	add	r2, r1
 800c356:	9905      	ldr	r1, [sp, #20]
 800c358:	440b      	add	r3, r1
 800c35a:	9904      	ldr	r1, [sp, #16]
 800c35c:	4288      	cmp	r0, r1
 800c35e:	dd10      	ble.n	800c382 <forward_lite_dw_if32of32wf32+0x222>
 800c360:	460c      	mov	r4, r1
 800c362:	4693      	mov	fp, r2
 800c364:	461d      	mov	r5, r3
 800c366:	ecfb 6a01 	vldmia	fp!, {s13}
 800c36a:	ecf5 7a01 	vldmia	r5!, {s15}
 800c36e:	3401      	adds	r4, #1
 800c370:	42a0      	cmp	r0, r4
 800c372:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c376:	d1f6      	bne.n	800c366 <forward_lite_dw_if32of32wf32+0x206>
 800c378:	1a41      	subs	r1, r0, r1
 800c37a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c37e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c382:	3601      	adds	r6, #1
 800c384:	45b2      	cmp	sl, r6
 800c386:	4462      	add	r2, ip
 800c388:	4473      	add	r3, lr
 800c38a:	d1b5      	bne.n	800c2f8 <forward_lite_dw_if32of32wf32+0x198>
 800c38c:	9a02      	ldr	r2, [sp, #8]
 800c38e:	eca2 7a01 	vstmia	r2!, {s14}
 800c392:	9202      	str	r2, [sp, #8]
 800c394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c396:	4413      	add	r3, r2
 800c398:	9a08      	ldr	r2, [sp, #32]
 800c39a:	42ba      	cmp	r2, r7
 800c39c:	d1a3      	bne.n	800c2e6 <forward_lite_dw_if32of32wf32+0x186>
 800c39e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c3a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800c3a2:	9a07      	ldr	r2, [sp, #28]
 800c3a4:	4421      	add	r1, r4
 800c3a6:	910e      	str	r1, [sp, #56]	; 0x38
 800c3a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c3aa:	9908      	ldr	r1, [sp, #32]
 800c3ac:	4421      	add	r1, r4
 800c3ae:	9108      	str	r1, [sp, #32]
 800c3b0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c3b2:	3204      	adds	r2, #4
 800c3b4:	428a      	cmp	r2, r1
 800c3b6:	9207      	str	r2, [sp, #28]
 800c3b8:	d38d      	bcc.n	800c2d6 <forward_lite_dw_if32of32wf32+0x176>
 800c3ba:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 800c3be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3c0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c3c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3c4:	440a      	add	r2, r1
 800c3c6:	920a      	str	r2, [sp, #40]	; 0x28
 800c3c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c3ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3cc:	440a      	add	r2, r1
 800c3ce:	920b      	str	r2, [sp, #44]	; 0x2c
 800c3d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3d2:	1a52      	subs	r2, r2, r1
 800c3d4:	920d      	str	r2, [sp, #52]	; 0x34
 800c3d6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800c3d8:	3301      	adds	r3, #1
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800c3de:	f47f af23 	bne.w	800c228 <forward_lite_dw_if32of32wf32+0xc8>
 800c3e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c3e6:	4413      	add	r3, r2
 800c3e8:	9311      	str	r3, [sp, #68]	; 0x44
 800c3ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3ec:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800c3ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3f0:	440a      	add	r2, r1
 800c3f2:	920f      	str	r2, [sp, #60]	; 0x3c
 800c3f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3f6:	1a52      	subs	r2, r2, r1
 800c3f8:	9210      	str	r2, [sp, #64]	; 0x40
 800c3fa:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	429a      	cmp	r2, r3
 800c400:	9312      	str	r3, [sp, #72]	; 0x48
 800c402:	f47f aedb 	bne.w	800c1bc <forward_lite_dw_if32of32wf32+0x5c>
 800c406:	b025      	add	sp, #148	; 0x94
 800c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40c:	2100      	movs	r1, #0
 800c40e:	e7a5      	b.n	800c35c <forward_lite_dw_if32of32wf32+0x1fc>
 800c410:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c412:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c414:	960c      	str	r6, [sp, #48]	; 0x30
 800c416:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c41a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800c41c:	1a11      	subs	r1, r2, r0
 800c41e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c420:	fb02 f101 	mul.w	r1, r2, r1
 800c424:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c426:	eef0 3a43 	vmov.f32	s7, s6
 800c42a:	1a12      	subs	r2, r2, r0
 800c42c:	e725      	b.n	800c27a <forward_lite_dw_if32of32wf32+0x11a>
 800c42e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c430:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c432:	462a      	mov	r2, r5
 800c434:	442b      	add	r3, r5
 800c436:	e6fe      	b.n	800c236 <forward_lite_dw_if32of32wf32+0xd6>
 800c438:	00000000 	.word	0x00000000
 800c43c:	f108 31ff 	add.w	r1, r8, #4294967295
 800c440:	0889      	lsrs	r1, r1, #2
 800c442:	1c4a      	adds	r2, r1, #1
 800c444:	fb01 9109 	mla	r1, r1, r9, r9
 800c448:	9105      	str	r1, [sp, #20]
 800c44a:	0114      	lsls	r4, r2, #4
 800c44c:	2100      	movs	r1, #0
 800c44e:	910e      	str	r1, [sp, #56]	; 0x38
 800c450:	9404      	str	r4, [sp, #16]
 800c452:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800c456:	911a      	str	r1, [sp, #104]	; 0x68
 800c458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c45a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c45c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800c45e:	440a      	add	r2, r1
 800c460:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c462:	920e      	str	r2, [sp, #56]	; 0x38
 800c464:	190d      	adds	r5, r1, r4
 800c466:	9506      	str	r5, [sp, #24]
 800c468:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c46a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c46e:	192c      	adds	r4, r5, r4
 800c470:	0092      	lsls	r2, r2, #2
 800c472:	9408      	str	r4, [sp, #32]
 800c474:	9118      	str	r1, [sp, #96]	; 0x60
 800c476:	921a      	str	r2, [sp, #104]	; 0x68
 800c478:	9a06      	ldr	r2, [sp, #24]
 800c47a:	ecb2 7a01 	vldmia	r2!, {s14}
 800c47e:	f1ba 0f00 	cmp.w	sl, #0
 800c482:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c486:	9206      	str	r2, [sp, #24]
 800c488:	dd51      	ble.n	800c52e <forward_lite_dw_if32of32wf32+0x3ce>
 800c48a:	9907      	ldr	r1, [sp, #28]
 800c48c:	2700      	movs	r7, #0
 800c48e:	f1b8 0f00 	cmp.w	r8, #0
 800c492:	bfd8      	it	le
 800c494:	2200      	movle	r2, #0
 800c496:	dd2f      	ble.n	800c4f8 <forward_lite_dw_if32of32wf32+0x398>
 800c498:	9c01      	ldr	r4, [sp, #4]
 800c49a:	f103 0210 	add.w	r2, r3, #16
 800c49e:	190d      	adds	r5, r1, r4
 800c4a0:	2600      	movs	r6, #0
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	eb04 0c0b 	add.w	ip, r4, fp
 800c4a8:	ed12 4a03 	vldr	s8, [r2, #-12]
 800c4ac:	eddc 7a00 	vldr	s15, [ip]
 800c4b0:	ed52 4a04 	vldr	s9, [r2, #-16]
 800c4b4:	ed94 5a00 	vldr	s10, [r4]
 800c4b8:	edd5 6a00 	vldr	s13, [r5]
 800c4bc:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c4c0:	ed12 6a01 	vldr	s12, [r2, #-4]
 800c4c4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c4c8:	eb05 0c0b 	add.w	ip, r5, fp
 800c4cc:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c4d0:	3604      	adds	r6, #4
 800c4d2:	4546      	cmp	r6, r8
 800c4d4:	f102 0210 	add.w	r2, r2, #16
 800c4d8:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800c4dc:	444c      	add	r4, r9
 800c4de:	444d      	add	r5, r9
 800c4e0:	eddc 6a00 	vldr	s13, [ip]
 800c4e4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c4e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4ec:	dbda      	blt.n	800c4a4 <forward_lite_dw_if32of32wf32+0x344>
 800c4ee:	9a05      	ldr	r2, [sp, #20]
 800c4f0:	4411      	add	r1, r2
 800c4f2:	9a04      	ldr	r2, [sp, #16]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	4672      	mov	r2, lr
 800c4f8:	4290      	cmp	r0, r2
 800c4fa:	dd11      	ble.n	800c520 <forward_lite_dw_if32of32wf32+0x3c0>
 800c4fc:	4615      	mov	r5, r2
 800c4fe:	460c      	mov	r4, r1
 800c500:	461e      	mov	r6, r3
 800c502:	edd4 7a00 	vldr	s15, [r4]
 800c506:	ecf6 6a01 	vldmia	r6!, {s13}
 800c50a:	3501      	adds	r5, #1
 800c50c:	4285      	cmp	r5, r0
 800c50e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c512:	445c      	add	r4, fp
 800c514:	d1f5      	bne.n	800c502 <forward_lite_dw_if32of32wf32+0x3a2>
 800c516:	1a82      	subs	r2, r0, r2
 800c518:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c51c:	fb02 110b 	mla	r1, r2, fp, r1
 800c520:	9a02      	ldr	r2, [sp, #8]
 800c522:	3701      	adds	r7, #1
 800c524:	4411      	add	r1, r2
 800c526:	9a03      	ldr	r2, [sp, #12]
 800c528:	4557      	cmp	r7, sl
 800c52a:	4413      	add	r3, r2
 800c52c:	d1af      	bne.n	800c48e <forward_lite_dw_if32of32wf32+0x32e>
 800c52e:	9a08      	ldr	r2, [sp, #32]
 800c530:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c532:	eca2 7a01 	vstmia	r2!, {s14}
 800c536:	9208      	str	r2, [sp, #32]
 800c538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c53a:	4413      	add	r3, r2
 800c53c:	9a06      	ldr	r2, [sp, #24]
 800c53e:	428a      	cmp	r2, r1
 800c540:	d19a      	bne.n	800c478 <forward_lite_dw_if32of32wf32+0x318>
 800c542:	9a07      	ldr	r2, [sp, #28]
 800c544:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c546:	3204      	adds	r2, #4
 800c548:	428a      	cmp	r2, r1
 800c54a:	9207      	str	r2, [sp, #28]
 800c54c:	d384      	bcc.n	800c458 <forward_lite_dw_if32of32wf32+0x2f8>
 800c54e:	e736      	b.n	800c3be <forward_lite_dw_if32of32wf32+0x25e>

0800c550 <forward_lite_dense_if32of32wf32>:
 800c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800c558:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800c55c:	4287      	cmp	r7, r0
 800c55e:	f240 8106 	bls.w	800c76e <forward_lite_dense_if32of32wf32+0x21e>
 800c562:	f1a6 0810 	sub.w	r8, r6, #16
 800c566:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800c56a:	f108 0801 	add.w	r8, r8, #1
 800c56e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c572:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800c576:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800c57a:	4605      	mov	r5, r0
 800c57c:	f006 0a0f 	and.w	sl, r6, #15
 800c580:	2e0f      	cmp	r6, #15
 800c582:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800c794 <forward_lite_dense_if32of32wf32+0x244>
 800c586:	f240 8101 	bls.w	800c78c <forward_lite_dense_if32of32wf32+0x23c>
 800c58a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800c58e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800c592:	46b6      	mov	lr, r6
 800c594:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800c598:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800c59c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800c5a0:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800c5a4:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800c5a8:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800c5ac:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800c5b0:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800c5b4:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800c5b8:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800c5bc:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800c5c0:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800c5c4:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800c5c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c5cc:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800c5d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c5d4:	f1ae 0e10 	sub.w	lr, lr, #16
 800c5d8:	f1be 0f0f 	cmp.w	lr, #15
 800c5dc:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800c5e0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800c5e4:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c5e8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800c5ec:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800c5f0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800c5f4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800c5f8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800c5fc:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800c600:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800c604:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c608:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800c60c:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800c610:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c614:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800c618:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800c61c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c620:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800c624:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800c628:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c62c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800c630:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800c634:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c638:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800c63c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800c640:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c644:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800c648:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800c64c:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c650:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c654:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c658:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c65c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c660:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c664:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c668:	d894      	bhi.n	800c594 <forward_lite_dense_if32of32wf32+0x44>
 800c66a:	eb02 0e0b 	add.w	lr, r2, fp
 800c66e:	4654      	mov	r4, sl
 800c670:	46c4      	mov	ip, r8
 800c672:	2c00      	cmp	r4, #0
 800c674:	d075      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c676:	eddc 6a00 	vldr	s13, [ip]
 800c67a:	edde 7a00 	vldr	s15, [lr]
 800c67e:	2c01      	cmp	r4, #1
 800c680:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c684:	d06d      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c686:	eddc 6a01 	vldr	s13, [ip, #4]
 800c68a:	edde 7a01 	vldr	s15, [lr, #4]
 800c68e:	2c02      	cmp	r4, #2
 800c690:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c694:	d065      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c696:	eddc 6a02 	vldr	s13, [ip, #8]
 800c69a:	edde 7a02 	vldr	s15, [lr, #8]
 800c69e:	2c03      	cmp	r4, #3
 800c6a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c6a4:	d05d      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c6a6:	eddc 6a03 	vldr	s13, [ip, #12]
 800c6aa:	edde 7a03 	vldr	s15, [lr, #12]
 800c6ae:	2c04      	cmp	r4, #4
 800c6b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c6b4:	d055      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c6b6:	eddc 6a04 	vldr	s13, [ip, #16]
 800c6ba:	edde 7a04 	vldr	s15, [lr, #16]
 800c6be:	2c05      	cmp	r4, #5
 800c6c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c6c4:	d04d      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c6c6:	eddc 6a05 	vldr	s13, [ip, #20]
 800c6ca:	edde 7a05 	vldr	s15, [lr, #20]
 800c6ce:	2c06      	cmp	r4, #6
 800c6d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c6d4:	d045      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c6d6:	eddc 6a06 	vldr	s13, [ip, #24]
 800c6da:	edde 7a06 	vldr	s15, [lr, #24]
 800c6de:	2c07      	cmp	r4, #7
 800c6e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c6e4:	d03d      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c6e6:	eddc 6a07 	vldr	s13, [ip, #28]
 800c6ea:	edde 7a07 	vldr	s15, [lr, #28]
 800c6ee:	2c08      	cmp	r4, #8
 800c6f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c6f4:	d035      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c6f6:	eddc 6a08 	vldr	s13, [ip, #32]
 800c6fa:	edde 7a08 	vldr	s15, [lr, #32]
 800c6fe:	2c09      	cmp	r4, #9
 800c700:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c704:	d02d      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c706:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800c70a:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800c70e:	2c0a      	cmp	r4, #10
 800c710:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c714:	d025      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c716:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800c71a:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800c71e:	2c0b      	cmp	r4, #11
 800c720:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c724:	d01d      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c726:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800c72a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800c72e:	2c0c      	cmp	r4, #12
 800c730:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c734:	d015      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c736:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800c73a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800c73e:	3c0d      	subs	r4, #13
 800c740:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c744:	d00d      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c746:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800c74a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800c74e:	2c01      	cmp	r4, #1
 800c750:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c754:	d005      	beq.n	800c762 <forward_lite_dense_if32of32wf32+0x212>
 800c756:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800c75a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800c75e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c762:	444a      	add	r2, r9
 800c764:	eca5 7a01 	vstmia	r5!, {s14}
 800c768:	42af      	cmp	r7, r5
 800c76a:	f63f af09 	bhi.w	800c580 <forward_lite_dense_if32of32wf32+0x30>
 800c76e:	b15b      	cbz	r3, 800c788 <forward_lite_dense_if32of32wf32+0x238>
 800c770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c772:	b14a      	cbz	r2, 800c788 <forward_lite_dense_if32of32wf32+0x238>
 800c774:	edd0 7a00 	vldr	s15, [r0]
 800c778:	ecb3 7a01 	vldmia	r3!, {s14}
 800c77c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c780:	ece0 7a01 	vstmia	r0!, {s15}
 800c784:	4287      	cmp	r7, r0
 800c786:	d1f5      	bne.n	800c774 <forward_lite_dense_if32of32wf32+0x224>
 800c788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78c:	4634      	mov	r4, r6
 800c78e:	4696      	mov	lr, r2
 800c790:	468c      	mov	ip, r1
 800c792:	e76e      	b.n	800c672 <forward_lite_dense_if32of32wf32+0x122>
 800c794:	00000000 	.word	0x00000000

0800c798 <st_int8_copy>:
 800c798:	4288      	cmp	r0, r1
 800c79a:	d057      	beq.n	800c84c <st_int8_copy+0xb4>
 800c79c:	2a00      	cmp	r2, #0
 800c79e:	d055      	beq.n	800c84c <st_int8_copy+0xb4>
 800c7a0:	4288      	cmp	r0, r1
 800c7a2:	d354      	bcc.n	800c84e <st_int8_copy+0xb6>
 800c7a4:	078b      	lsls	r3, r1, #30
 800c7a6:	d102      	bne.n	800c7ae <st_int8_copy+0x16>
 800c7a8:	e009      	b.n	800c7be <st_int8_copy+0x26>
 800c7aa:	2a00      	cmp	r2, #0
 800c7ac:	d05c      	beq.n	800c868 <st_int8_copy+0xd0>
 800c7ae:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800c7b2:	f801 3b01 	strb.w	r3, [r1], #1
 800c7b6:	078b      	lsls	r3, r1, #30
 800c7b8:	f102 32ff 	add.w	r2, r2, #4294967295
 800c7bc:	d1f5      	bne.n	800c7aa <st_int8_copy+0x12>
 800c7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800c7c6:	d069      	beq.n	800c89c <st_int8_copy+0x104>
 800c7c8:	ea41 0300 	orr.w	r3, r1, r0
 800c7cc:	075b      	lsls	r3, r3, #29
 800c7ce:	d14c      	bne.n	800c86a <st_int8_copy+0xd2>
 800c7d0:	f10e 33ff 	add.w	r3, lr, #4294967295
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d948      	bls.n	800c86a <st_int8_copy+0xd2>
 800c7d8:	f100 0310 	add.w	r3, r0, #16
 800c7dc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800c7e0:	f101 0c10 	add.w	ip, r1, #16
 800c7e4:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800c7e8:	ed13 6b04 	vldr	d6, [r3, #-16]
 800c7ec:	ed13 7b02 	vldr	d7, [r3, #-8]
 800c7f0:	3310      	adds	r3, #16
 800c7f2:	4573      	cmp	r3, lr
 800c7f4:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800c7f8:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800c7fc:	f10c 0c10 	add.w	ip, ip, #16
 800c800:	d1f2      	bne.n	800c7e8 <st_int8_copy+0x50>
 800c802:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800c806:	4421      	add	r1, r4
 800c808:	4420      	add	r0, r4
 800c80a:	f002 0203 	and.w	r2, r2, #3
 800c80e:	b16b      	cbz	r3, 800c82c <st_int8_copy+0x94>
 800c810:	6804      	ldr	r4, [r0, #0]
 800c812:	600c      	str	r4, [r1, #0]
 800c814:	1e5c      	subs	r4, r3, #1
 800c816:	d005      	beq.n	800c824 <st_int8_copy+0x8c>
 800c818:	6845      	ldr	r5, [r0, #4]
 800c81a:	604d      	str	r5, [r1, #4]
 800c81c:	2c01      	cmp	r4, #1
 800c81e:	bf1c      	itt	ne
 800c820:	6884      	ldrne	r4, [r0, #8]
 800c822:	608c      	strne	r4, [r1, #8]
 800c824:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c828:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c82c:	b162      	cbz	r2, 800c848 <st_int8_copy+0xb0>
 800c82e:	f990 3000 	ldrsb.w	r3, [r0]
 800c832:	700b      	strb	r3, [r1, #0]
 800c834:	3a01      	subs	r2, #1
 800c836:	d007      	beq.n	800c848 <st_int8_copy+0xb0>
 800c838:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c83c:	704b      	strb	r3, [r1, #1]
 800c83e:	2a01      	cmp	r2, #1
 800c840:	bf1c      	itt	ne
 800c842:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800c846:	708b      	strbne	r3, [r1, #2]
 800c848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c84c:	4770      	bx	lr
 800c84e:	1883      	adds	r3, r0, r2
 800c850:	428b      	cmp	r3, r1
 800c852:	d9a7      	bls.n	800c7a4 <st_int8_copy+0xc>
 800c854:	4283      	cmp	r3, r0
 800c856:	440a      	add	r2, r1
 800c858:	d9f8      	bls.n	800c84c <st_int8_copy+0xb4>
 800c85a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800c85e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800c862:	4283      	cmp	r3, r0
 800c864:	d1f9      	bne.n	800c85a <st_int8_copy+0xc2>
 800c866:	4770      	bx	lr
 800c868:	4770      	bx	lr
 800c86a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800c86e:	460b      	mov	r3, r1
 800c870:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800c874:	4684      	mov	ip, r0
 800c876:	f8dc 7000 	ldr.w	r7, [ip]
 800c87a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800c87e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800c882:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800c886:	f8c3 800c 	str.w	r8, [r3, #12]
 800c88a:	601f      	str	r7, [r3, #0]
 800c88c:	605e      	str	r6, [r3, #4]
 800c88e:	609d      	str	r5, [r3, #8]
 800c890:	3310      	adds	r3, #16
 800c892:	459e      	cmp	lr, r3
 800c894:	f10c 0c10 	add.w	ip, ip, #16
 800c898:	d1ed      	bne.n	800c876 <st_int8_copy+0xde>
 800c89a:	e7b2      	b.n	800c802 <st_int8_copy+0x6a>
 800c89c:	0893      	lsrs	r3, r2, #2
 800c89e:	f002 0203 	and.w	r2, r2, #3
 800c8a2:	e7b4      	b.n	800c80e <st_int8_copy+0x76>

0800c8a4 <ai_array_to_buffer_fmt>:
 800c8a4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d050      	beq.n	800c94e <ai_array_to_buffer_fmt+0xaa>
 800c8ac:	4b2a      	ldr	r3, [pc, #168]	; (800c958 <ai_array_to_buffer_fmt+0xb4>)
 800c8ae:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d00b      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c8b6:	dc1c      	bgt.n	800c8f2 <ai_array_to_buffer_fmt+0x4e>
 800c8b8:	4b28      	ldr	r3, [pc, #160]	; (800c95c <ai_array_to_buffer_fmt+0xb8>)
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d007      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c8be:	dd0b      	ble.n	800c8d8 <ai_array_to_buffer_fmt+0x34>
 800c8c0:	4b27      	ldr	r3, [pc, #156]	; (800c960 <ai_array_to_buffer_fmt+0xbc>)
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d003      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c8c6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d131      	bne.n	800c932 <ai_array_to_buffer_fmt+0x8e>
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c8d4:	4318      	orrs	r0, r3
 800c8d6:	4770      	bx	lr
 800c8d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d0f6      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c8e0:	dd2c      	ble.n	800c93c <ai_array_to_buffer_fmt+0x98>
 800c8e2:	4b20      	ldr	r3, [pc, #128]	; (800c964 <ai_array_to_buffer_fmt+0xc0>)
 800c8e4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	bf18      	it	ne
 800c8ec:	2340      	movne	r3, #64	; 0x40
 800c8ee:	4318      	orrs	r0, r3
 800c8f0:	4770      	bx	lr
 800c8f2:	4b1d      	ldr	r3, [pc, #116]	; (800c968 <ai_array_to_buffer_fmt+0xc4>)
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d0ea      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c8f8:	dd0e      	ble.n	800c918 <ai_array_to_buffer_fmt+0x74>
 800c8fa:	4b1c      	ldr	r3, [pc, #112]	; (800c96c <ai_array_to_buffer_fmt+0xc8>)
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d0e6      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c900:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800c904:	429a      	cmp	r2, r3
 800c906:	d0e2      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c908:	4b19      	ldr	r3, [pc, #100]	; (800c970 <ai_array_to_buffer_fmt+0xcc>)
 800c90a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c90e:	429a      	cmp	r2, r3
 800c910:	bf18      	it	ne
 800c912:	2340      	movne	r3, #64	; 0x40
 800c914:	4318      	orrs	r0, r3
 800c916:	4770      	bx	lr
 800c918:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d0d6      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c920:	3307      	adds	r3, #7
 800c922:	429a      	cmp	r2, r3
 800c924:	d0d3      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c926:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800c92a:	429a      	cmp	r2, r3
 800c92c:	bf18      	it	ne
 800c92e:	2340      	movne	r3, #64	; 0x40
 800c930:	e7ce      	b.n	800c8d0 <ai_array_to_buffer_fmt+0x2c>
 800c932:	4b10      	ldr	r3, [pc, #64]	; (800c974 <ai_array_to_buffer_fmt+0xd0>)
 800c934:	429a      	cmp	r2, r3
 800c936:	bf18      	it	ne
 800c938:	2340      	movne	r3, #64	; 0x40
 800c93a:	e7c9      	b.n	800c8d0 <ai_array_to_buffer_fmt+0x2c>
 800c93c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c940:	429a      	cmp	r2, r3
 800c942:	d0c4      	beq.n	800c8ce <ai_array_to_buffer_fmt+0x2a>
 800c944:	3380      	adds	r3, #128	; 0x80
 800c946:	429a      	cmp	r2, r3
 800c948:	bf18      	it	ne
 800c94a:	2340      	movne	r3, #64	; 0x40
 800c94c:	e7c0      	b.n	800c8d0 <ai_array_to_buffer_fmt+0x2c>
 800c94e:	4b0a      	ldr	r3, [pc, #40]	; (800c978 <ai_array_to_buffer_fmt+0xd4>)
 800c950:	4003      	ands	r3, r0
 800c952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c956:	e7bb      	b.n	800c8d0 <ai_array_to_buffer_fmt+0x2c>
 800c958:	00840040 	.word	0x00840040
 800c95c:	00040840 	.word	0x00040840
 800c960:	00041040 	.word	0x00041040
 800c964:	00040447 	.word	0x00040447
 800c968:	00840840 	.word	0x00840840
 800c96c:	00841040 	.word	0x00841040
 800c970:	0084084f 	.word	0x0084084f
 800c974:	0004084f 	.word	0x0004084f
 800c978:	00803fff 	.word	0x00803fff

0800c97c <ai_array_get_byte_size>:
 800c97c:	b319      	cbz	r1, 800c9c6 <ai_array_get_byte_size+0x4a>
 800c97e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c982:	fb03 f101 	mul.w	r1, r3, r1
 800c986:	3107      	adds	r1, #7
 800c988:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800c98c:	f021 0307 	bic.w	r3, r1, #7
 800c990:	2a04      	cmp	r2, #4
 800c992:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800c996:	fa23 f101 	lsr.w	r1, r3, r1
 800c99a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800c99e:	d00b      	beq.n	800c9b8 <ai_array_get_byte_size+0x3c>
 800c9a0:	2a08      	cmp	r2, #8
 800c9a2:	d002      	beq.n	800c9aa <ai_array_get_byte_size+0x2e>
 800c9a4:	3107      	adds	r1, #7
 800c9a6:	08c8      	lsrs	r0, r1, #3
 800c9a8:	4770      	bx	lr
 800c9aa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c9ae:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800c9b2:	3107      	adds	r1, #7
 800c9b4:	08c8      	lsrs	r0, r1, #3
 800c9b6:	4770      	bx	lr
 800c9b8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c9bc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800c9c0:	3107      	adds	r1, #7
 800c9c2:	08c8      	lsrs	r0, r1, #3
 800c9c4:	4770      	bx	lr
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop

0800c9cc <ai_array_get_data_byte_size>:
 800c9cc:	b169      	cbz	r1, 800c9ea <ai_array_get_data_byte_size+0x1e>
 800c9ce:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800c9d2:	fb02 f101 	mul.w	r1, r2, r1
 800c9d6:	1dcb      	adds	r3, r1, #7
 800c9d8:	f023 0307 	bic.w	r3, r3, #7
 800c9dc:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800c9e0:	fa23 f000 	lsr.w	r0, r3, r0
 800c9e4:	3007      	adds	r0, #7
 800c9e6:	08c0      	lsrs	r0, r0, #3
 800c9e8:	4770      	bx	lr
 800c9ea:	4608      	mov	r0, r1
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop

0800c9f0 <ai_version_get>:
 800c9f0:	0212      	lsls	r2, r2, #8
 800c9f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c9f6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800c9fa:	4770      	bx	lr

0800c9fc <get_tensor_byte_size>:
 800c9fc:	b410      	push	{r4}
 800c9fe:	6983      	ldr	r3, [r0, #24]
 800ca00:	68c4      	ldr	r4, [r0, #12]
 800ca02:	6941      	ldr	r1, [r0, #20]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68e0      	ldr	r0, [r4, #12]
 800ca08:	4a07      	ldr	r2, [pc, #28]	; (800ca28 <get_tensor_byte_size+0x2c>)
 800ca0a:	68c9      	ldr	r1, [r1, #12]
 800ca0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca10:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800ca14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ca18:	fb01 f000 	mul.w	r0, r1, r0
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	bf04      	itt	eq
 800ca20:	3007      	addeq	r0, #7
 800ca22:	08c0      	lsreq	r0, r0, #3
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	000400c0 	.word	0x000400c0

0800ca2c <arm_rfft_fast_init_f32>:
 800ca2c:	084b      	lsrs	r3, r1, #1
 800ca2e:	2b80      	cmp	r3, #128	; 0x80
 800ca30:	b410      	push	{r4}
 800ca32:	8201      	strh	r1, [r0, #16]
 800ca34:	8003      	strh	r3, [r0, #0]
 800ca36:	d046      	beq.n	800cac6 <arm_rfft_fast_init_f32+0x9a>
 800ca38:	d916      	bls.n	800ca68 <arm_rfft_fast_init_f32+0x3c>
 800ca3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca3e:	d03c      	beq.n	800caba <arm_rfft_fast_init_f32+0x8e>
 800ca40:	d928      	bls.n	800ca94 <arm_rfft_fast_init_f32+0x68>
 800ca42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca46:	d01f      	beq.n	800ca88 <arm_rfft_fast_init_f32+0x5c>
 800ca48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca4c:	d112      	bne.n	800ca74 <arm_rfft_fast_init_f32+0x48>
 800ca4e:	4920      	ldr	r1, [pc, #128]	; (800cad0 <arm_rfft_fast_init_f32+0xa4>)
 800ca50:	4a20      	ldr	r2, [pc, #128]	; (800cad4 <arm_rfft_fast_init_f32+0xa8>)
 800ca52:	4b21      	ldr	r3, [pc, #132]	; (800cad8 <arm_rfft_fast_init_f32+0xac>)
 800ca54:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800ca58:	8184      	strh	r4, [r0, #12]
 800ca5a:	6081      	str	r1, [r0, #8]
 800ca5c:	6042      	str	r2, [r0, #4]
 800ca5e:	6143      	str	r3, [r0, #20]
 800ca60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca64:	2000      	movs	r0, #0
 800ca66:	4770      	bx	lr
 800ca68:	2b20      	cmp	r3, #32
 800ca6a:	d01c      	beq.n	800caa6 <arm_rfft_fast_init_f32+0x7a>
 800ca6c:	2b40      	cmp	r3, #64	; 0x40
 800ca6e:	d006      	beq.n	800ca7e <arm_rfft_fast_init_f32+0x52>
 800ca70:	2b10      	cmp	r3, #16
 800ca72:	d01d      	beq.n	800cab0 <arm_rfft_fast_init_f32+0x84>
 800ca74:	f04f 30ff 	mov.w	r0, #4294967295
 800ca78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	2438      	movs	r4, #56	; 0x38
 800ca80:	4916      	ldr	r1, [pc, #88]	; (800cadc <arm_rfft_fast_init_f32+0xb0>)
 800ca82:	4a17      	ldr	r2, [pc, #92]	; (800cae0 <arm_rfft_fast_init_f32+0xb4>)
 800ca84:	4b17      	ldr	r3, [pc, #92]	; (800cae4 <arm_rfft_fast_init_f32+0xb8>)
 800ca86:	e7e7      	b.n	800ca58 <arm_rfft_fast_init_f32+0x2c>
 800ca88:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800ca8c:	4916      	ldr	r1, [pc, #88]	; (800cae8 <arm_rfft_fast_init_f32+0xbc>)
 800ca8e:	4a17      	ldr	r2, [pc, #92]	; (800caec <arm_rfft_fast_init_f32+0xc0>)
 800ca90:	4b17      	ldr	r3, [pc, #92]	; (800caf0 <arm_rfft_fast_init_f32+0xc4>)
 800ca92:	e7e1      	b.n	800ca58 <arm_rfft_fast_init_f32+0x2c>
 800ca94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca98:	d1ec      	bne.n	800ca74 <arm_rfft_fast_init_f32+0x48>
 800ca9a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800ca9e:	4915      	ldr	r1, [pc, #84]	; (800caf4 <arm_rfft_fast_init_f32+0xc8>)
 800caa0:	4a15      	ldr	r2, [pc, #84]	; (800caf8 <arm_rfft_fast_init_f32+0xcc>)
 800caa2:	4b16      	ldr	r3, [pc, #88]	; (800cafc <arm_rfft_fast_init_f32+0xd0>)
 800caa4:	e7d8      	b.n	800ca58 <arm_rfft_fast_init_f32+0x2c>
 800caa6:	2430      	movs	r4, #48	; 0x30
 800caa8:	4915      	ldr	r1, [pc, #84]	; (800cb00 <arm_rfft_fast_init_f32+0xd4>)
 800caaa:	4a16      	ldr	r2, [pc, #88]	; (800cb04 <arm_rfft_fast_init_f32+0xd8>)
 800caac:	4b16      	ldr	r3, [pc, #88]	; (800cb08 <arm_rfft_fast_init_f32+0xdc>)
 800caae:	e7d3      	b.n	800ca58 <arm_rfft_fast_init_f32+0x2c>
 800cab0:	2414      	movs	r4, #20
 800cab2:	4916      	ldr	r1, [pc, #88]	; (800cb0c <arm_rfft_fast_init_f32+0xe0>)
 800cab4:	4a16      	ldr	r2, [pc, #88]	; (800cb10 <arm_rfft_fast_init_f32+0xe4>)
 800cab6:	4b17      	ldr	r3, [pc, #92]	; (800cb14 <arm_rfft_fast_init_f32+0xe8>)
 800cab8:	e7ce      	b.n	800ca58 <arm_rfft_fast_init_f32+0x2c>
 800caba:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800cabe:	4916      	ldr	r1, [pc, #88]	; (800cb18 <arm_rfft_fast_init_f32+0xec>)
 800cac0:	4a16      	ldr	r2, [pc, #88]	; (800cb1c <arm_rfft_fast_init_f32+0xf0>)
 800cac2:	4b17      	ldr	r3, [pc, #92]	; (800cb20 <arm_rfft_fast_init_f32+0xf4>)
 800cac4:	e7c8      	b.n	800ca58 <arm_rfft_fast_init_f32+0x2c>
 800cac6:	24d0      	movs	r4, #208	; 0xd0
 800cac8:	4916      	ldr	r1, [pc, #88]	; (800cb24 <arm_rfft_fast_init_f32+0xf8>)
 800caca:	4a17      	ldr	r2, [pc, #92]	; (800cb28 <arm_rfft_fast_init_f32+0xfc>)
 800cacc:	4b17      	ldr	r3, [pc, #92]	; (800cb2c <arm_rfft_fast_init_f32+0x100>)
 800cace:	e7c3      	b.n	800ca58 <arm_rfft_fast_init_f32+0x2c>
 800cad0:	08027ee0 	.word	0x08027ee0
 800cad4:	080190d8 	.word	0x080190d8
 800cad8:	0801f248 	.word	0x0801f248
 800cadc:	0801d1d8 	.word	0x0801d1d8
 800cae0:	08029ca0 	.word	0x08029ca0
 800cae4:	0802c190 	.word	0x0802c190
 800cae8:	08025bc8 	.word	0x08025bc8
 800caec:	08023ac8 	.word	0x08023ac8
 800caf0:	0801d248 	.word	0x0801d248
 800caf4:	0802be20 	.word	0x0802be20
 800caf8:	08023248 	.word	0x08023248
 800cafc:	08029ea0 	.word	0x08029ea0
 800cb00:	08026a80 	.word	0x08026a80
 800cb04:	08025ac8 	.word	0x08025ac8
 800cb08:	0801d0d8 	.word	0x0801d0d8
 800cb0c:	080269d8 	.word	0x080269d8
 800cb10:	08023a48 	.word	0x08023a48
 800cb14:	08026a00 	.word	0x08026a00
 800cb18:	0802a6a0 	.word	0x0802a6a0
 800cb1c:	08026ee0 	.word	0x08026ee0
 800cb20:	0802aa20 	.word	0x0802aa20
 800cb24:	0802c390 	.word	0x0802c390
 800cb28:	08026ae0 	.word	0x08026ae0
 800cb2c:	0802ba20 	.word	0x0802ba20

0800cb30 <arm_rfft_fast_f32>:
 800cb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb34:	8a06      	ldrh	r6, [r0, #16]
 800cb36:	0876      	lsrs	r6, r6, #1
 800cb38:	4607      	mov	r7, r0
 800cb3a:	4615      	mov	r5, r2
 800cb3c:	8006      	strh	r6, [r0, #0]
 800cb3e:	460c      	mov	r4, r1
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d15c      	bne.n	800cbfe <arm_rfft_fast_f32+0xce>
 800cb44:	461a      	mov	r2, r3
 800cb46:	2301      	movs	r3, #1
 800cb48:	f000 fbe4 	bl	800d314 <arm_cfft_f32>
 800cb4c:	edd4 7a00 	vldr	s15, [r4]
 800cb50:	ed94 7a01 	vldr	s14, [r4, #4]
 800cb54:	883e      	ldrh	r6, [r7, #0]
 800cb56:	6978      	ldr	r0, [r7, #20]
 800cb58:	ee37 7a07 	vadd.f32	s14, s14, s14
 800cb5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb60:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800cb64:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cb68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb6c:	3e01      	subs	r6, #1
 800cb6e:	ee26 7a83 	vmul.f32	s14, s13, s6
 800cb72:	ee67 7a83 	vmul.f32	s15, s15, s6
 800cb76:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800cb7a:	ed85 7a00 	vstr	s14, [r5]
 800cb7e:	edc5 7a01 	vstr	s15, [r5, #4]
 800cb82:	3010      	adds	r0, #16
 800cb84:	f105 0210 	add.w	r2, r5, #16
 800cb88:	3b08      	subs	r3, #8
 800cb8a:	f104 0110 	add.w	r1, r4, #16
 800cb8e:	ed93 7a02 	vldr	s14, [r3, #8]
 800cb92:	ed51 6a02 	vldr	s13, [r1, #-8]
 800cb96:	ed10 6a02 	vldr	s12, [r0, #-8]
 800cb9a:	edd3 3a03 	vldr	s7, [r3, #12]
 800cb9e:	ed11 5a01 	vldr	s10, [r1, #-4]
 800cba2:	ed50 5a01 	vldr	s11, [r0, #-4]
 800cba6:	ee77 7a66 	vsub.f32	s15, s14, s13
 800cbaa:	ee77 4a26 	vadd.f32	s9, s14, s13
 800cbae:	ee33 4a85 	vadd.f32	s8, s7, s10
 800cbb2:	ee66 6a27 	vmul.f32	s13, s12, s15
 800cbb6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800cbba:	ee35 5a63 	vsub.f32	s10, s10, s7
 800cbbe:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cbc2:	ee77 7a05 	vadd.f32	s15, s14, s10
 800cbc6:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cbca:	ee65 5a84 	vmul.f32	s11, s11, s8
 800cbce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cbd2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800cbd6:	ee67 7a83 	vmul.f32	s15, s15, s6
 800cbda:	ee27 7a03 	vmul.f32	s14, s14, s6
 800cbde:	3e01      	subs	r6, #1
 800cbe0:	ed02 7a02 	vstr	s14, [r2, #-8]
 800cbe4:	ed42 7a01 	vstr	s15, [r2, #-4]
 800cbe8:	f1a3 0308 	sub.w	r3, r3, #8
 800cbec:	f101 0108 	add.w	r1, r1, #8
 800cbf0:	f100 0008 	add.w	r0, r0, #8
 800cbf4:	f102 0208 	add.w	r2, r2, #8
 800cbf8:	d1c9      	bne.n	800cb8e <arm_rfft_fast_f32+0x5e>
 800cbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbfe:	edd1 7a00 	vldr	s15, [r1]
 800cc02:	edd1 6a01 	vldr	s13, [r1, #4]
 800cc06:	6941      	ldr	r1, [r0, #20]
 800cc08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cc0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cc10:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800cc14:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cc18:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800cc1c:	3e01      	subs	r6, #1
 800cc1e:	ed82 7a00 	vstr	s14, [r2]
 800cc22:	edc2 7a01 	vstr	s15, [r2, #4]
 800cc26:	00f0      	lsls	r0, r6, #3
 800cc28:	b3ee      	cbz	r6, 800cca6 <arm_rfft_fast_f32+0x176>
 800cc2a:	3808      	subs	r0, #8
 800cc2c:	f101 0e10 	add.w	lr, r1, #16
 800cc30:	4420      	add	r0, r4
 800cc32:	f104 0110 	add.w	r1, r4, #16
 800cc36:	f102 0c10 	add.w	ip, r2, #16
 800cc3a:	ed90 7a02 	vldr	s14, [r0, #8]
 800cc3e:	ed51 6a02 	vldr	s13, [r1, #-8]
 800cc42:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800cc46:	ed90 4a03 	vldr	s8, [r0, #12]
 800cc4a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800cc4e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800cc52:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800cc56:	ee74 4a05 	vadd.f32	s9, s8, s10
 800cc5a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800cc5e:	ee77 6a26 	vadd.f32	s13, s14, s13
 800cc62:	ee35 5a44 	vsub.f32	s10, s10, s8
 800cc66:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800cc6a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800cc6e:	ee77 7a05 	vadd.f32	s15, s14, s10
 800cc72:	ee26 6a24 	vmul.f32	s12, s12, s9
 800cc76:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800cc7a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cc7e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800cc82:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800cc86:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cc8a:	3e01      	subs	r6, #1
 800cc8c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800cc90:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800cc94:	f1a0 0008 	sub.w	r0, r0, #8
 800cc98:	f101 0108 	add.w	r1, r1, #8
 800cc9c:	f10e 0e08 	add.w	lr, lr, #8
 800cca0:	f10c 0c08 	add.w	ip, ip, #8
 800cca4:	d1c9      	bne.n	800cc3a <arm_rfft_fast_f32+0x10a>
 800cca6:	461a      	mov	r2, r3
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4638      	mov	r0, r7
 800ccac:	2301      	movs	r3, #1
 800ccae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb2:	f000 bb2f 	b.w	800d314 <arm_cfft_f32>
 800ccb6:	bf00      	nop

0800ccb8 <arm_cfft_radix8by2_f32>:
 800ccb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccbc:	ed2d 8b08 	vpush	{d8-d11}
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	4608      	mov	r0, r1
 800ccc4:	f8b7 e000 	ldrh.w	lr, [r7]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800ccce:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800ccd2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800ccd6:	f000 80b0 	beq.w	800ce3a <arm_cfft_radix8by2_f32+0x182>
 800ccda:	008b      	lsls	r3, r1, #2
 800ccdc:	3310      	adds	r3, #16
 800ccde:	18c6      	adds	r6, r0, r3
 800cce0:	3210      	adds	r2, #16
 800cce2:	4443      	add	r3, r8
 800cce4:	f100 0510 	add.w	r5, r0, #16
 800cce8:	f108 0410 	add.w	r4, r8, #16
 800ccec:	ed54 1a04 	vldr	s3, [r4, #-16]
 800ccf0:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ccf4:	ed13 4a04 	vldr	s8, [r3, #-16]
 800ccf8:	ed53 3a03 	vldr	s7, [r3, #-12]
 800ccfc:	ed53 5a02 	vldr	s11, [r3, #-8]
 800cd00:	ed13 5a01 	vldr	s10, [r3, #-4]
 800cd04:	ed14 0a02 	vldr	s0, [r4, #-8]
 800cd08:	ed54 7a01 	vldr	s15, [r4, #-4]
 800cd0c:	ed16 2a04 	vldr	s4, [r6, #-16]
 800cd10:	ed56 2a03 	vldr	s5, [r6, #-12]
 800cd14:	ed15 6a03 	vldr	s12, [r5, #-12]
 800cd18:	ed15 7a01 	vldr	s14, [r5, #-4]
 800cd1c:	ed15 3a04 	vldr	s6, [r5, #-16]
 800cd20:	ed56 0a02 	vldr	s1, [r6, #-8]
 800cd24:	ed16 1a01 	vldr	s2, [r6, #-4]
 800cd28:	ed55 4a02 	vldr	s9, [r5, #-8]
 800cd2c:	ee73 ba21 	vadd.f32	s23, s6, s3
 800cd30:	ee36 ba26 	vadd.f32	s22, s12, s13
 800cd34:	ee37 aa27 	vadd.f32	s20, s14, s15
 800cd38:	ee72 9a04 	vadd.f32	s19, s4, s8
 800cd3c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800cd40:	ee31 8a05 	vadd.f32	s16, s2, s10
 800cd44:	ee74 aa80 	vadd.f32	s21, s9, s0
 800cd48:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800cd4c:	ed45 ba04 	vstr	s23, [r5, #-16]
 800cd50:	ed05 ba03 	vstr	s22, [r5, #-12]
 800cd54:	ed45 aa02 	vstr	s21, [r5, #-8]
 800cd58:	ed05 aa01 	vstr	s20, [r5, #-4]
 800cd5c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800cd60:	ed46 9a04 	vstr	s19, [r6, #-16]
 800cd64:	ed06 9a03 	vstr	s18, [r6, #-12]
 800cd68:	ed46 8a02 	vstr	s17, [r6, #-8]
 800cd6c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800cd70:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800cd74:	ed12 6a03 	vldr	s12, [r2, #-12]
 800cd78:	ed52 2a04 	vldr	s5, [r2, #-16]
 800cd7c:	ee33 3a61 	vsub.f32	s6, s6, s3
 800cd80:	ee34 4a42 	vsub.f32	s8, s8, s4
 800cd84:	ee26 8a86 	vmul.f32	s16, s13, s12
 800cd88:	ee24 2a06 	vmul.f32	s4, s8, s12
 800cd8c:	ee63 1a22 	vmul.f32	s3, s6, s5
 800cd90:	ee24 4a22 	vmul.f32	s8, s8, s5
 800cd94:	ee23 3a06 	vmul.f32	s6, s6, s12
 800cd98:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800cd9c:	ee23 6a86 	vmul.f32	s12, s7, s12
 800cda0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800cda4:	ee36 6a04 	vadd.f32	s12, s12, s8
 800cda8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800cdac:	ee72 3a63 	vsub.f32	s7, s4, s7
 800cdb0:	ee71 2a88 	vadd.f32	s5, s3, s16
 800cdb4:	ed44 6a03 	vstr	s13, [r4, #-12]
 800cdb8:	ed44 2a04 	vstr	s5, [r4, #-16]
 800cdbc:	ed43 3a04 	vstr	s7, [r3, #-16]
 800cdc0:	ed03 6a03 	vstr	s12, [r3, #-12]
 800cdc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdc8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800cdcc:	ed12 7a01 	vldr	s14, [r2, #-4]
 800cdd0:	ed52 5a02 	vldr	s11, [r2, #-8]
 800cdd4:	ee35 6a41 	vsub.f32	s12, s10, s2
 800cdd8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800cddc:	ee67 3a87 	vmul.f32	s7, s15, s14
 800cde0:	ee26 5a87 	vmul.f32	s10, s13, s14
 800cde4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800cde8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cdec:	ee64 4a87 	vmul.f32	s9, s9, s14
 800cdf0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800cdf4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800cdf8:	ee26 6a25 	vmul.f32	s12, s12, s11
 800cdfc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ce00:	ee74 5a23 	vadd.f32	s11, s8, s7
 800ce04:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ce08:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ce0c:	f1be 0e01 	subs.w	lr, lr, #1
 800ce10:	ed44 5a02 	vstr	s11, [r4, #-8]
 800ce14:	f105 0510 	add.w	r5, r5, #16
 800ce18:	ed44 7a01 	vstr	s15, [r4, #-4]
 800ce1c:	f106 0610 	add.w	r6, r6, #16
 800ce20:	ed03 6a02 	vstr	s12, [r3, #-8]
 800ce24:	ed03 7a01 	vstr	s14, [r3, #-4]
 800ce28:	f102 0210 	add.w	r2, r2, #16
 800ce2c:	f104 0410 	add.w	r4, r4, #16
 800ce30:	f103 0310 	add.w	r3, r3, #16
 800ce34:	f47f af5a 	bne.w	800ccec <arm_cfft_radix8by2_f32+0x34>
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	b28c      	uxth	r4, r1
 800ce3c:	4621      	mov	r1, r4
 800ce3e:	2302      	movs	r3, #2
 800ce40:	f000 fae2 	bl	800d408 <arm_radix8_butterfly_f32>
 800ce44:	ecbd 8b08 	vpop	{d8-d11}
 800ce48:	4621      	mov	r1, r4
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	2302      	movs	r3, #2
 800ce50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce54:	f000 bad8 	b.w	800d408 <arm_radix8_butterfly_f32>

0800ce58 <arm_cfft_radix8by4_f32>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	ed2d 8b0a 	vpush	{d8-d12}
 800ce60:	8802      	ldrh	r2, [r0, #0]
 800ce62:	ed91 6a00 	vldr	s12, [r1]
 800ce66:	b08f      	sub	sp, #60	; 0x3c
 800ce68:	460f      	mov	r7, r1
 800ce6a:	0852      	lsrs	r2, r2, #1
 800ce6c:	6841      	ldr	r1, [r0, #4]
 800ce6e:	900c      	str	r0, [sp, #48]	; 0x30
 800ce70:	0093      	lsls	r3, r2, #2
 800ce72:	4638      	mov	r0, r7
 800ce74:	4418      	add	r0, r3
 800ce76:	4606      	mov	r6, r0
 800ce78:	9009      	str	r0, [sp, #36]	; 0x24
 800ce7a:	4418      	add	r0, r3
 800ce7c:	edd0 6a00 	vldr	s13, [r0]
 800ce80:	ed96 4a00 	vldr	s8, [r6]
 800ce84:	edd6 2a01 	vldr	s5, [r6, #4]
 800ce88:	edd0 7a01 	vldr	s15, [r0, #4]
 800ce8c:	900a      	str	r0, [sp, #40]	; 0x28
 800ce8e:	ee76 5a26 	vadd.f32	s11, s12, s13
 800ce92:	4604      	mov	r4, r0
 800ce94:	4625      	mov	r5, r4
 800ce96:	441c      	add	r4, r3
 800ce98:	edd4 4a00 	vldr	s9, [r4]
 800ce9c:	ed97 7a01 	vldr	s14, [r7, #4]
 800cea0:	ed94 3a01 	vldr	s6, [r4, #4]
 800cea4:	9401      	str	r4, [sp, #4]
 800cea6:	ee35 5a84 	vadd.f32	s10, s11, s8
 800ceaa:	4630      	mov	r0, r6
 800ceac:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ceb0:	463e      	mov	r6, r7
 800ceb2:	ee15 ea10 	vmov	lr, s10
 800ceb6:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ceba:	f846 eb08 	str.w	lr, [r6], #8
 800cebe:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cec2:	ed90 5a01 	vldr	s10, [r0, #4]
 800cec6:	9605      	str	r6, [sp, #20]
 800cec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cecc:	9e01      	ldr	r6, [sp, #4]
 800cece:	9707      	str	r7, [sp, #28]
 800ced0:	ee76 3aa2 	vadd.f32	s7, s13, s5
 800ced4:	ed96 2a01 	vldr	s4, [r6, #4]
 800ced8:	ee36 7a05 	vadd.f32	s14, s12, s10
 800cedc:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800cee0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 800cee4:	ee77 7a84 	vadd.f32	s15, s15, s8
 800cee8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800ceec:	4604      	mov	r4, r0
 800ceee:	46a3      	mov	fp, r4
 800cef0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800cef4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800cef8:	ee14 8a10 	vmov	r8, s8
 800cefc:	46a4      	mov	ip, r4
 800cefe:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800cf02:	ed87 7a01 	vstr	s14, [r7, #4]
 800cf06:	f84b 8b08 	str.w	r8, [fp], #8
 800cf0a:	f1ac 0704 	sub.w	r7, ip, #4
 800cf0e:	ed8c 5a01 	vstr	s10, [ip, #4]
 800cf12:	f101 0c08 	add.w	ip, r1, #8
 800cf16:	462c      	mov	r4, r5
 800cf18:	f8cd c010 	str.w	ip, [sp, #16]
 800cf1c:	ee15 ca90 	vmov	ip, s11
 800cf20:	ee36 6a62 	vsub.f32	s12, s12, s5
 800cf24:	f844 cb08 	str.w	ip, [r4], #8
 800cf28:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800cf2c:	ee36 6a43 	vsub.f32	s12, s12, s6
 800cf30:	9406      	str	r4, [sp, #24]
 800cf32:	ee76 6a83 	vadd.f32	s13, s13, s6
 800cf36:	f101 0410 	add.w	r4, r1, #16
 800cf3a:	0852      	lsrs	r2, r2, #1
 800cf3c:	9402      	str	r4, [sp, #8]
 800cf3e:	ed85 6a01 	vstr	s12, [r5, #4]
 800cf42:	462c      	mov	r4, r5
 800cf44:	f101 0518 	add.w	r5, r1, #24
 800cf48:	920b      	str	r2, [sp, #44]	; 0x2c
 800cf4a:	46b2      	mov	sl, r6
 800cf4c:	9503      	str	r5, [sp, #12]
 800cf4e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800cf52:	3a02      	subs	r2, #2
 800cf54:	ee16 5a90 	vmov	r5, s13
 800cf58:	46b6      	mov	lr, r6
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	0852      	lsrs	r2, r2, #1
 800cf5e:	f84a 5b08 	str.w	r5, [sl], #8
 800cf62:	f1a0 0604 	sub.w	r6, r0, #4
 800cf66:	edce 7a01 	vstr	s15, [lr, #4]
 800cf6a:	9208      	str	r2, [sp, #32]
 800cf6c:	f000 8130 	beq.w	800d1d0 <arm_cfft_radix8by4_f32+0x378>
 800cf70:	4691      	mov	r9, r2
 800cf72:	9a07      	ldr	r2, [sp, #28]
 800cf74:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cf78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cf7c:	3b08      	subs	r3, #8
 800cf7e:	f102 0510 	add.w	r5, r2, #16
 800cf82:	f101 0c20 	add.w	ip, r1, #32
 800cf86:	f1a4 020c 	sub.w	r2, r4, #12
 800cf8a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800cf8e:	4433      	add	r3, r6
 800cf90:	3410      	adds	r4, #16
 800cf92:	4650      	mov	r0, sl
 800cf94:	4659      	mov	r1, fp
 800cf96:	ed55 3a02 	vldr	s7, [r5, #-8]
 800cf9a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800cf9e:	ed91 7a00 	vldr	s14, [r1]
 800cfa2:	edd0 7a00 	vldr	s15, [r0]
 800cfa6:	ed54 5a01 	vldr	s11, [r4, #-4]
 800cfaa:	ed15 4a01 	vldr	s8, [r5, #-4]
 800cfae:	edd0 6a01 	vldr	s13, [r0, #4]
 800cfb2:	ed91 6a01 	vldr	s12, [r1, #4]
 800cfb6:	ee33 8a85 	vadd.f32	s16, s7, s10
 800cfba:	ee34 0a25 	vadd.f32	s0, s8, s11
 800cfbe:	ee78 4a07 	vadd.f32	s9, s16, s14
 800cfc2:	ee74 5a65 	vsub.f32	s11, s8, s11
 800cfc6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800cfca:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800cfce:	ed45 4a02 	vstr	s9, [r5, #-8]
 800cfd2:	edd1 4a01 	vldr	s9, [r1, #4]
 800cfd6:	ed90 4a01 	vldr	s8, [r0, #4]
 800cfda:	ee70 4a24 	vadd.f32	s9, s0, s9
 800cfde:	ee75 aa06 	vadd.f32	s21, s10, s12
 800cfe2:	ee74 4a84 	vadd.f32	s9, s9, s8
 800cfe6:	ee35 aac7 	vsub.f32	s20, s11, s14
 800cfea:	ed45 4a01 	vstr	s9, [r5, #-4]
 800cfee:	edd6 1a00 	vldr	s3, [r6]
 800cff2:	edd7 0a00 	vldr	s1, [r7]
 800cff6:	ed92 4a02 	vldr	s8, [r2, #8]
 800cffa:	edd3 3a02 	vldr	s7, [r3, #8]
 800cffe:	ed93 2a01 	vldr	s4, [r3, #4]
 800d002:	ed16 1a01 	vldr	s2, [r6, #-4]
 800d006:	edd2 2a01 	vldr	s5, [r2, #4]
 800d00a:	ed57 9a01 	vldr	s19, [r7, #-4]
 800d00e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800d012:	ee39 3a81 	vadd.f32	s6, s19, s2
 800d016:	ee74 8a84 	vadd.f32	s17, s9, s8
 800d01a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800d01e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800d022:	ee7a aae6 	vsub.f32	s21, s21, s13
 800d026:	ee18 aa90 	vmov	sl, s17
 800d02a:	f847 a908 	str.w	sl, [r7], #-8
 800d02e:	edd2 8a01 	vldr	s17, [r2, #4]
 800d032:	ed93 9a01 	vldr	s18, [r3, #4]
 800d036:	ee73 8a28 	vadd.f32	s17, s6, s17
 800d03a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800d03e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800d042:	ee74 0a63 	vsub.f32	s1, s8, s7
 800d046:	edc7 8a01 	vstr	s17, [r7, #4]
 800d04a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800d04e:	ed58 8a01 	vldr	s17, [r8, #-4]
 800d052:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800d056:	ee6a ba28 	vmul.f32	s23, s20, s17
 800d05a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800d05e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800d062:	ee31 9a20 	vadd.f32	s18, s2, s1
 800d066:	ee79 9a82 	vadd.f32	s19, s19, s4
 800d06a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800d06e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800d072:	ee69 baa8 	vmul.f32	s23, s19, s17
 800d076:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800d07a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800d07e:	ee69 8a28 	vmul.f32	s17, s18, s17
 800d082:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800d086:	ee1c aa10 	vmov	sl, s24
 800d08a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800d08e:	f841 ab08 	str.w	sl, [r1], #8
 800d092:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800d096:	ee3b bacb 	vsub.f32	s22, s23, s22
 800d09a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800d09e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800d0a2:	ed01 aa01 	vstr	s20, [r1, #-4]
 800d0a6:	edc2 8a01 	vstr	s17, [r2, #4]
 800d0aa:	ed82 ba02 	vstr	s22, [r2, #8]
 800d0ae:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800d0b2:	ee74 3a63 	vsub.f32	s7, s8, s7
 800d0b6:	ee38 8a47 	vsub.f32	s16, s16, s14
 800d0ba:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800d0be:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d0c2:	ee33 3a42 	vsub.f32	s6, s6, s4
 800d0c6:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d0ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d0ce:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800d0d2:	ee63 8a04 	vmul.f32	s17, s6, s8
 800d0d6:	ee28 aa24 	vmul.f32	s20, s16, s9
 800d0da:	ee60 9a04 	vmul.f32	s19, s0, s8
 800d0de:	ee28 8a04 	vmul.f32	s16, s16, s8
 800d0e2:	ee20 0a24 	vmul.f32	s0, s0, s9
 800d0e6:	ee63 3a84 	vmul.f32	s7, s7, s8
 800d0ea:	ee39 4a68 	vsub.f32	s8, s18, s17
 800d0ee:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800d0f2:	ee14 aa10 	vmov	sl, s8
 800d0f6:	ee30 0a48 	vsub.f32	s0, s0, s16
 800d0fa:	ee63 4a24 	vmul.f32	s9, s6, s9
 800d0fe:	ed44 9a02 	vstr	s19, [r4, #-8]
 800d102:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800d106:	ed04 0a01 	vstr	s0, [r4, #-4]
 800d10a:	f846 a908 	str.w	sl, [r6], #-8
 800d10e:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d112:	ee35 7a87 	vadd.f32	s14, s11, s14
 800d116:	edc6 3a01 	vstr	s7, [r6, #4]
 800d11a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d11e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d122:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800d126:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800d12a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800d12e:	ee26 5a87 	vmul.f32	s10, s13, s14
 800d132:	ee72 2a62 	vsub.f32	s5, s4, s5
 800d136:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800d13a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800d13e:	ee75 5a25 	vadd.f32	s11, s10, s11
 800d142:	ee62 0a86 	vmul.f32	s1, s5, s12
 800d146:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d14a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d14e:	ee21 6a06 	vmul.f32	s12, s2, s12
 800d152:	ee62 2a87 	vmul.f32	s5, s5, s14
 800d156:	ee21 1a07 	vmul.f32	s2, s2, s14
 800d15a:	ee15 aa90 	vmov	sl, s11
 800d15e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d162:	f840 ab08 	str.w	sl, [r0], #8
 800d166:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800d16a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800d16e:	f1b9 0901 	subs.w	r9, r9, #1
 800d172:	ed40 7a01 	vstr	s15, [r0, #-4]
 800d176:	f105 0508 	add.w	r5, r5, #8
 800d17a:	ed83 1a02 	vstr	s2, [r3, #8]
 800d17e:	edc3 2a01 	vstr	s5, [r3, #4]
 800d182:	f108 0808 	add.w	r8, r8, #8
 800d186:	f1a2 0208 	sub.w	r2, r2, #8
 800d18a:	f10c 0c10 	add.w	ip, ip, #16
 800d18e:	f104 0408 	add.w	r4, r4, #8
 800d192:	f10e 0e18 	add.w	lr, lr, #24
 800d196:	f1a3 0308 	sub.w	r3, r3, #8
 800d19a:	f47f aefc 	bne.w	800cf96 <arm_cfft_radix8by4_f32+0x13e>
 800d19e:	9908      	ldr	r1, [sp, #32]
 800d1a0:	9802      	ldr	r0, [sp, #8]
 800d1a2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800d1a6:	00cb      	lsls	r3, r1, #3
 800d1a8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800d1ac:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800d1b0:	9102      	str	r1, [sp, #8]
 800d1b2:	9905      	ldr	r1, [sp, #20]
 800d1b4:	4419      	add	r1, r3
 800d1b6:	9105      	str	r1, [sp, #20]
 800d1b8:	9904      	ldr	r1, [sp, #16]
 800d1ba:	4419      	add	r1, r3
 800d1bc:	9104      	str	r1, [sp, #16]
 800d1be:	9906      	ldr	r1, [sp, #24]
 800d1c0:	449b      	add	fp, r3
 800d1c2:	4419      	add	r1, r3
 800d1c4:	449a      	add	sl, r3
 800d1c6:	9b03      	ldr	r3, [sp, #12]
 800d1c8:	9106      	str	r1, [sp, #24]
 800d1ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1ce:	9303      	str	r3, [sp, #12]
 800d1d0:	9a05      	ldr	r2, [sp, #20]
 800d1d2:	9806      	ldr	r0, [sp, #24]
 800d1d4:	ed92 4a00 	vldr	s8, [r2]
 800d1d8:	ed90 7a00 	vldr	s14, [r0]
 800d1dc:	ed9b 3a00 	vldr	s6, [fp]
 800d1e0:	edda 3a00 	vldr	s7, [sl]
 800d1e4:	edd2 4a01 	vldr	s9, [r2, #4]
 800d1e8:	edd0 6a01 	vldr	s13, [r0, #4]
 800d1ec:	ed9a 2a01 	vldr	s4, [sl, #4]
 800d1f0:	eddb 7a01 	vldr	s15, [fp, #4]
 800d1f4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800d1f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d1fa:	ee34 6a07 	vadd.f32	s12, s8, s14
 800d1fe:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800d202:	ee36 5a03 	vadd.f32	s10, s12, s6
 800d206:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800d20a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d20e:	ee34 7a47 	vsub.f32	s14, s8, s14
 800d212:	ed82 5a00 	vstr	s10, [r2]
 800d216:	ed9b 5a01 	vldr	s10, [fp, #4]
 800d21a:	edda 4a01 	vldr	s9, [sl, #4]
 800d21e:	ee35 5a85 	vadd.f32	s10, s11, s10
 800d222:	ee37 4a27 	vadd.f32	s8, s14, s15
 800d226:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d22a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800d22e:	ed82 5a01 	vstr	s10, [r2, #4]
 800d232:	9a04      	ldr	r2, [sp, #16]
 800d234:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800d238:	edd2 1a00 	vldr	s3, [r2]
 800d23c:	edd2 2a01 	vldr	s5, [r2, #4]
 800d240:	9a02      	ldr	r2, [sp, #8]
 800d242:	ee34 4a42 	vsub.f32	s8, s8, s4
 800d246:	ee36 6a43 	vsub.f32	s12, s12, s6
 800d24a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800d24e:	ee24 4a22 	vmul.f32	s8, s8, s5
 800d252:	ee65 2a22 	vmul.f32	s5, s10, s5
 800d256:	ee25 5a21 	vmul.f32	s10, s10, s3
 800d25a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800d25e:	ee35 5a44 	vsub.f32	s10, s10, s8
 800d262:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d266:	edcb 2a00 	vstr	s5, [fp]
 800d26a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800d26e:	ed92 4a01 	vldr	s8, [r2, #4]
 800d272:	ed92 5a00 	vldr	s10, [r2]
 800d276:	9a03      	ldr	r2, [sp, #12]
 800d278:	ee36 6a63 	vsub.f32	s12, s12, s7
 800d27c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800d280:	ee66 4a05 	vmul.f32	s9, s12, s10
 800d284:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d288:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d28c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d290:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d294:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800d298:	ee76 6a83 	vadd.f32	s13, s13, s6
 800d29c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d2a0:	ed80 6a01 	vstr	s12, [r0, #4]
 800d2a4:	edc0 5a00 	vstr	s11, [r0]
 800d2a8:	edd2 5a01 	vldr	s11, [r2, #4]
 800d2ac:	9807      	ldr	r0, [sp, #28]
 800d2ae:	ee77 7a02 	vadd.f32	s15, s14, s4
 800d2b2:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800d2b6:	edd2 6a00 	vldr	s13, [r2]
 800d2ba:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800d2be:	ee67 6a26 	vmul.f32	s13, s14, s13
 800d2c2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d2c6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800d2ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d2ce:	ee36 7a07 	vadd.f32	s14, s12, s14
 800d2d2:	edca 7a01 	vstr	s15, [sl, #4]
 800d2d6:	ed8a 7a00 	vstr	s14, [sl]
 800d2da:	6872      	ldr	r2, [r6, #4]
 800d2dc:	4621      	mov	r1, r4
 800d2de:	2304      	movs	r3, #4
 800d2e0:	f000 f892 	bl	800d408 <arm_radix8_butterfly_f32>
 800d2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2e6:	6872      	ldr	r2, [r6, #4]
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	2304      	movs	r3, #4
 800d2ec:	f000 f88c 	bl	800d408 <arm_radix8_butterfly_f32>
 800d2f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2f2:	6872      	ldr	r2, [r6, #4]
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	2304      	movs	r3, #4
 800d2f8:	f000 f886 	bl	800d408 <arm_radix8_butterfly_f32>
 800d2fc:	6872      	ldr	r2, [r6, #4]
 800d2fe:	9801      	ldr	r0, [sp, #4]
 800d300:	4621      	mov	r1, r4
 800d302:	2304      	movs	r3, #4
 800d304:	b00f      	add	sp, #60	; 0x3c
 800d306:	ecbd 8b0a 	vpop	{d8-d12}
 800d30a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30e:	f000 b87b 	b.w	800d408 <arm_radix8_butterfly_f32>
 800d312:	bf00      	nop

0800d314 <arm_cfft_f32>:
 800d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d318:	2a01      	cmp	r2, #1
 800d31a:	4606      	mov	r6, r0
 800d31c:	4617      	mov	r7, r2
 800d31e:	460c      	mov	r4, r1
 800d320:	4698      	mov	r8, r3
 800d322:	8805      	ldrh	r5, [r0, #0]
 800d324:	d054      	beq.n	800d3d0 <arm_cfft_f32+0xbc>
 800d326:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800d32a:	d04c      	beq.n	800d3c6 <arm_cfft_f32+0xb2>
 800d32c:	d916      	bls.n	800d35c <arm_cfft_f32+0x48>
 800d32e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800d332:	d01a      	beq.n	800d36a <arm_cfft_f32+0x56>
 800d334:	d95c      	bls.n	800d3f0 <arm_cfft_f32+0xdc>
 800d336:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800d33a:	d044      	beq.n	800d3c6 <arm_cfft_f32+0xb2>
 800d33c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800d340:	d105      	bne.n	800d34e <arm_cfft_f32+0x3a>
 800d342:	2301      	movs	r3, #1
 800d344:	6872      	ldr	r2, [r6, #4]
 800d346:	4629      	mov	r1, r5
 800d348:	4620      	mov	r0, r4
 800d34a:	f000 f85d 	bl	800d408 <arm_radix8_butterfly_f32>
 800d34e:	f1b8 0f00 	cmp.w	r8, #0
 800d352:	d111      	bne.n	800d378 <arm_cfft_f32+0x64>
 800d354:	2f01      	cmp	r7, #1
 800d356:	d016      	beq.n	800d386 <arm_cfft_f32+0x72>
 800d358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d35c:	2d20      	cmp	r5, #32
 800d35e:	d032      	beq.n	800d3c6 <arm_cfft_f32+0xb2>
 800d360:	d94a      	bls.n	800d3f8 <arm_cfft_f32+0xe4>
 800d362:	2d40      	cmp	r5, #64	; 0x40
 800d364:	d0ed      	beq.n	800d342 <arm_cfft_f32+0x2e>
 800d366:	2d80      	cmp	r5, #128	; 0x80
 800d368:	d1f1      	bne.n	800d34e <arm_cfft_f32+0x3a>
 800d36a:	4621      	mov	r1, r4
 800d36c:	4630      	mov	r0, r6
 800d36e:	f7ff fca3 	bl	800ccb8 <arm_cfft_radix8by2_f32>
 800d372:	f1b8 0f00 	cmp.w	r8, #0
 800d376:	d0ed      	beq.n	800d354 <arm_cfft_f32+0x40>
 800d378:	68b2      	ldr	r2, [r6, #8]
 800d37a:	89b1      	ldrh	r1, [r6, #12]
 800d37c:	4620      	mov	r0, r4
 800d37e:	f7f2 ff37 	bl	80001f0 <arm_bitreversal_32>
 800d382:	2f01      	cmp	r7, #1
 800d384:	d1e8      	bne.n	800d358 <arm_cfft_f32+0x44>
 800d386:	ee07 5a90 	vmov	s15, r5
 800d38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d38e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d392:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d396:	2d00      	cmp	r5, #0
 800d398:	d0de      	beq.n	800d358 <arm_cfft_f32+0x44>
 800d39a:	f104 0108 	add.w	r1, r4, #8
 800d39e:	2300      	movs	r3, #0
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	429d      	cmp	r5, r3
 800d3a4:	f101 0108 	add.w	r1, r1, #8
 800d3a8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800d3ac:	ed51 7a03 	vldr	s15, [r1, #-12]
 800d3b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d3b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d3b8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d3bc:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d3c0:	d1ee      	bne.n	800d3a0 <arm_cfft_f32+0x8c>
 800d3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f7ff fd45 	bl	800ce58 <arm_cfft_radix8by4_f32>
 800d3ce:	e7be      	b.n	800d34e <arm_cfft_f32+0x3a>
 800d3d0:	b1ad      	cbz	r5, 800d3fe <arm_cfft_f32+0xea>
 800d3d2:	f101 030c 	add.w	r3, r1, #12
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800d3dc:	3201      	adds	r2, #1
 800d3de:	eef1 7a67 	vneg.f32	s15, s15
 800d3e2:	4295      	cmp	r5, r2
 800d3e4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800d3e8:	f103 0308 	add.w	r3, r3, #8
 800d3ec:	d1f4      	bne.n	800d3d8 <arm_cfft_f32+0xc4>
 800d3ee:	e79a      	b.n	800d326 <arm_cfft_f32+0x12>
 800d3f0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d3f4:	d0a5      	beq.n	800d342 <arm_cfft_f32+0x2e>
 800d3f6:	e7aa      	b.n	800d34e <arm_cfft_f32+0x3a>
 800d3f8:	2d10      	cmp	r5, #16
 800d3fa:	d0b6      	beq.n	800d36a <arm_cfft_f32+0x56>
 800d3fc:	e7a7      	b.n	800d34e <arm_cfft_f32+0x3a>
 800d3fe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800d402:	d894      	bhi.n	800d32e <arm_cfft_f32+0x1a>
 800d404:	e7aa      	b.n	800d35c <arm_cfft_f32+0x48>
 800d406:	bf00      	nop

0800d408 <arm_radix8_butterfly_f32>:
 800d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40c:	ed2d 8b10 	vpush	{d8-d15}
 800d410:	461c      	mov	r4, r3
 800d412:	b09d      	sub	sp, #116	; 0x74
 800d414:	4603      	mov	r3, r0
 800d416:	3304      	adds	r3, #4
 800d418:	ed9f bac4 	vldr	s22, [pc, #784]	; 800d72c <arm_radix8_butterfly_f32+0x324>
 800d41c:	9019      	str	r0, [sp, #100]	; 0x64
 800d41e:	921a      	str	r2, [sp, #104]	; 0x68
 800d420:	468b      	mov	fp, r1
 800d422:	931b      	str	r3, [sp, #108]	; 0x6c
 800d424:	468a      	mov	sl, r1
 800d426:	46a1      	mov	r9, r4
 800d428:	4607      	mov	r7, r0
 800d42a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800d42e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800d432:	eb03 0508 	add.w	r5, r3, r8
 800d436:	195c      	adds	r4, r3, r5
 800d438:	00de      	lsls	r6, r3, #3
 800d43a:	191a      	adds	r2, r3, r4
 800d43c:	9600      	str	r6, [sp, #0]
 800d43e:	1898      	adds	r0, r3, r2
 800d440:	4619      	mov	r1, r3
 800d442:	9e00      	ldr	r6, [sp, #0]
 800d444:	9311      	str	r3, [sp, #68]	; 0x44
 800d446:	4401      	add	r1, r0
 800d448:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800d44c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800d450:	19be      	adds	r6, r7, r6
 800d452:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800d456:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800d45a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800d45e:	9f00      	ldr	r7, [sp, #0]
 800d460:	011b      	lsls	r3, r3, #4
 800d462:	eb06 0e07 	add.w	lr, r6, r7
 800d466:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d468:	9302      	str	r3, [sp, #8]
 800d46a:	3204      	adds	r2, #4
 800d46c:	3104      	adds	r1, #4
 800d46e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d472:	f04f 0c00 	mov.w	ip, #0
 800d476:	edde 7a00 	vldr	s15, [lr]
 800d47a:	edd6 6a00 	vldr	s13, [r6]
 800d47e:	ed95 2a00 	vldr	s4, [r5]
 800d482:	ed17 aa01 	vldr	s20, [r7, #-4]
 800d486:	edd4 4a00 	vldr	s9, [r4]
 800d48a:	ed90 5a00 	vldr	s10, [r0]
 800d48e:	ed12 7a01 	vldr	s14, [r2, #-4]
 800d492:	ed51 0a01 	vldr	s1, [r1, #-4]
 800d496:	ee77 8a85 	vadd.f32	s17, s15, s10
 800d49a:	ee76 3a87 	vadd.f32	s7, s13, s14
 800d49e:	ee32 4a20 	vadd.f32	s8, s4, s1
 800d4a2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800d4a6:	ee33 6a84 	vadd.f32	s12, s7, s8
 800d4aa:	ee73 5a28 	vadd.f32	s11, s6, s17
 800d4ae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d4b2:	ee75 6a86 	vadd.f32	s13, s11, s12
 800d4b6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800d4ba:	ed47 6a01 	vstr	s13, [r7, #-4]
 800d4be:	edc4 5a00 	vstr	s11, [r4]
 800d4c2:	ed92 9a00 	vldr	s18, [r2]
 800d4c6:	ed95 1a01 	vldr	s2, [r5, #4]
 800d4ca:	edd6 5a01 	vldr	s11, [r6, #4]
 800d4ce:	ed91 6a00 	vldr	s12, [r1]
 800d4d2:	edd7 2a00 	vldr	s5, [r7]
 800d4d6:	edd4 1a01 	vldr	s3, [r4, #4]
 800d4da:	edde 6a01 	vldr	s13, [lr, #4]
 800d4de:	edd0 9a01 	vldr	s19, [r0, #4]
 800d4e2:	ee72 0a60 	vsub.f32	s1, s4, s1
 800d4e6:	ee71 aa46 	vsub.f32	s21, s2, s12
 800d4ea:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800d4ee:	ee37 0a60 	vsub.f32	s0, s14, s1
 800d4f2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800d4f6:	ee37 7a20 	vadd.f32	s14, s14, s1
 800d4fa:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800d4fe:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800d502:	ee75 5a89 	vadd.f32	s11, s11, s18
 800d506:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800d50a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800d50e:	ee31 6a06 	vadd.f32	s12, s2, s12
 800d512:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800d516:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800d51a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800d51e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800d522:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800d526:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800d52a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800d52e:	ee33 3a68 	vsub.f32	s6, s6, s17
 800d532:	ee36 0a88 	vadd.f32	s0, s13, s16
 800d536:	ee75 8a86 	vadd.f32	s17, s11, s12
 800d53a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800d53e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d542:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800d546:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800d54a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800d54e:	ee75 4a27 	vadd.f32	s9, s10, s15
 800d552:	ee71 5a49 	vsub.f32	s11, s2, s18
 800d556:	ee31 2a09 	vadd.f32	s4, s2, s18
 800d55a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800d55e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800d562:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800d566:	ee73 0a06 	vadd.f32	s1, s6, s12
 800d56a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800d56e:	ee36 5a87 	vadd.f32	s10, s13, s14
 800d572:	ee32 8a28 	vadd.f32	s16, s4, s17
 800d576:	ee33 6a46 	vsub.f32	s12, s6, s12
 800d57a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800d57e:	ee33 3a80 	vadd.f32	s6, s7, s0
 800d582:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d586:	ee71 5a64 	vsub.f32	s11, s2, s9
 800d58a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800d58e:	ee32 2a68 	vsub.f32	s4, s4, s17
 800d592:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800d596:	ee74 4a81 	vadd.f32	s9, s9, s2
 800d59a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800d59e:	44dc      	add	ip, fp
 800d5a0:	45e2      	cmp	sl, ip
 800d5a2:	ed87 8a00 	vstr	s16, [r7]
 800d5a6:	ed84 2a01 	vstr	s4, [r4, #4]
 800d5aa:	441f      	add	r7, r3
 800d5ac:	edce 0a00 	vstr	s1, [lr]
 800d5b0:	441c      	add	r4, r3
 800d5b2:	ed80 6a00 	vstr	s12, [r0]
 800d5b6:	edce 1a01 	vstr	s3, [lr, #4]
 800d5ba:	ed80 4a01 	vstr	s8, [r0, #4]
 800d5be:	449e      	add	lr, r3
 800d5c0:	ed86 3a00 	vstr	s6, [r6]
 800d5c4:	4418      	add	r0, r3
 800d5c6:	ed41 3a01 	vstr	s7, [r1, #-4]
 800d5ca:	ed02 5a01 	vstr	s10, [r2, #-4]
 800d5ce:	ed85 7a00 	vstr	s14, [r5]
 800d5d2:	edc6 5a01 	vstr	s11, [r6, #4]
 800d5d6:	edc1 4a00 	vstr	s9, [r1]
 800d5da:	441e      	add	r6, r3
 800d5dc:	edc2 6a00 	vstr	s13, [r2]
 800d5e0:	4419      	add	r1, r3
 800d5e2:	edc5 7a01 	vstr	s15, [r5, #4]
 800d5e6:	441a      	add	r2, r3
 800d5e8:	441d      	add	r5, r3
 800d5ea:	f63f af44 	bhi.w	800d476 <arm_radix8_butterfly_f32+0x6e>
 800d5ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d5f0:	2a07      	cmp	r2, #7
 800d5f2:	f240 81f5 	bls.w	800d9e0 <arm_radix8_butterfly_f32+0x5d8>
 800d5f6:	f108 0101 	add.w	r1, r8, #1
 800d5fa:	188f      	adds	r7, r1, r2
 800d5fc:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800d600:	19d6      	adds	r6, r2, r7
 800d602:	eb08 0c09 	add.w	ip, r8, r9
 800d606:	1994      	adds	r4, r2, r6
 800d608:	eb0c 0e09 	add.w	lr, ip, r9
 800d60c:	4610      	mov	r0, r2
 800d60e:	9701      	str	r7, [sp, #4]
 800d610:	4420      	add	r0, r4
 800d612:	eb0e 0709 	add.w	r7, lr, r9
 800d616:	1815      	adds	r5, r2, r0
 800d618:	eb07 0209 	add.w	r2, r7, r9
 800d61c:	9203      	str	r2, [sp, #12]
 800d61e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d624:	9117      	str	r1, [sp, #92]	; 0x5c
 800d626:	440a      	add	r2, r1
 800d628:	9900      	ldr	r1, [sp, #0]
 800d62a:	3108      	adds	r1, #8
 800d62c:	9100      	str	r1, [sp, #0]
 800d62e:	9902      	ldr	r1, [sp, #8]
 800d630:	3108      	adds	r1, #8
 800d632:	9102      	str	r1, [sp, #8]
 800d634:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d636:	00ff      	lsls	r7, r7, #3
 800d638:	9715      	str	r7, [sp, #84]	; 0x54
 800d63a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d63e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d642:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800d646:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800d648:	9903      	ldr	r1, [sp, #12]
 800d64a:	19d7      	adds	r7, r2, r7
 800d64c:	00c9      	lsls	r1, r1, #3
 800d64e:	9114      	str	r1, [sp, #80]	; 0x50
 800d650:	9710      	str	r7, [sp, #64]	; 0x40
 800d652:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d654:	9f00      	ldr	r7, [sp, #0]
 800d656:	19cf      	adds	r7, r1, r7
 800d658:	970d      	str	r7, [sp, #52]	; 0x34
 800d65a:	9f02      	ldr	r7, [sp, #8]
 800d65c:	19cf      	adds	r7, r1, r7
 800d65e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800d662:	970c      	str	r7, [sp, #48]	; 0x30
 800d664:	9f01      	ldr	r7, [sp, #4]
 800d666:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800d66a:	3504      	adds	r5, #4
 800d66c:	3004      	adds	r0, #4
 800d66e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800d672:	9508      	str	r5, [sp, #32]
 800d674:	9009      	str	r0, [sp, #36]	; 0x24
 800d676:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800d678:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d67a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800d67e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800d682:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800d686:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800d688:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800d68c:	1945      	adds	r5, r0, r5
 800d68e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800d692:	460f      	mov	r7, r1
 800d694:	3404      	adds	r4, #4
 800d696:	4641      	mov	r1, r8
 800d698:	1841      	adds	r1, r0, r1
 800d69a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800d69e:	940a      	str	r4, [sp, #40]	; 0x28
 800d6a0:	eb00 0c06 	add.w	ip, r0, r6
 800d6a4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d6a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d6aa:	9506      	str	r5, [sp, #24]
 800d6ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800d6ae:	9105      	str	r1, [sp, #20]
 800d6b0:	4639      	mov	r1, r7
 800d6b2:	1905      	adds	r5, r0, r4
 800d6b4:	3108      	adds	r1, #8
 800d6b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d6b8:	9507      	str	r5, [sp, #28]
 800d6ba:	910f      	str	r1, [sp, #60]	; 0x3c
 800d6bc:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800d6c0:	2101      	movs	r1, #1
 800d6c2:	eb00 0e06 	add.w	lr, r0, r6
 800d6c6:	9518      	str	r5, [sp, #96]	; 0x60
 800d6c8:	9404      	str	r4, [sp, #16]
 800d6ca:	9103      	str	r1, [sp, #12]
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	4689      	mov	r9, r1
 800d6d0:	9e06      	ldr	r6, [sp, #24]
 800d6d2:	ed90 fa00 	vldr	s30, [r0]
 800d6d6:	edd6 7a01 	vldr	s15, [r6, #4]
 800d6da:	edd0 ba01 	vldr	s23, [r0, #4]
 800d6de:	edcd 7a00 	vstr	s15, [sp]
 800d6e2:	a80d      	add	r0, sp, #52	; 0x34
 800d6e4:	edde 7a01 	vldr	s15, [lr, #4]
 800d6e8:	9c05      	ldr	r4, [sp, #20]
 800d6ea:	9d07      	ldr	r5, [sp, #28]
 800d6ec:	edd2 fa00 	vldr	s31, [r2]
 800d6f0:	ed92 ca01 	vldr	s24, [r2, #4]
 800d6f4:	edcd 7a01 	vstr	s15, [sp, #4]
 800d6f8:	c807      	ldmia	r0, {r0, r1, r2}
 800d6fa:	eddc 7a01 	vldr	s15, [ip, #4]
 800d6fe:	edd4 ea00 	vldr	s29, [r4]
 800d702:	ed95 ea00 	vldr	s28, [r5]
 800d706:	edd6 da00 	vldr	s27, [r6]
 800d70a:	edd4 aa01 	vldr	s21, [r4, #4]
 800d70e:	ed95 aa01 	vldr	s20, [r5, #4]
 800d712:	ed9e da00 	vldr	s26, [lr]
 800d716:	eddc ca00 	vldr	s25, [ip]
 800d71a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d71e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d720:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d722:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d724:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d726:	edcd 7a02 	vstr	s15, [sp, #8]
 800d72a:	e001      	b.n	800d730 <arm_radix8_butterfly_f32+0x328>
 800d72c:	3f3504f3 	.word	0x3f3504f3
 800d730:	ed16 6a01 	vldr	s12, [r6, #-4]
 800d734:	ed91 5a00 	vldr	s10, [r1]
 800d738:	ed57 9a01 	vldr	s19, [r7, #-4]
 800d73c:	edd5 7a00 	vldr	s15, [r5]
 800d740:	ed18 7a01 	vldr	s14, [r8, #-4]
 800d744:	edd2 3a00 	vldr	s7, [r2]
 800d748:	ed94 3a00 	vldr	s6, [r4]
 800d74c:	ed90 2a00 	vldr	s4, [r0]
 800d750:	ed92 0a01 	vldr	s0, [r2, #4]
 800d754:	ee33 8a85 	vadd.f32	s16, s7, s10
 800d758:	ee32 1a06 	vadd.f32	s2, s4, s12
 800d75c:	ee33 4a29 	vadd.f32	s8, s6, s19
 800d760:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d764:	ee78 1a04 	vadd.f32	s3, s16, s8
 800d768:	ee71 6a24 	vadd.f32	s13, s2, s9
 800d76c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800d770:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800d774:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d778:	ed82 6a00 	vstr	s12, [r2]
 800d77c:	edd5 8a01 	vldr	s17, [r5, #4]
 800d780:	ed90 9a01 	vldr	s18, [r0, #4]
 800d784:	edd6 2a00 	vldr	s5, [r6]
 800d788:	ed98 7a00 	vldr	s14, [r8]
 800d78c:	edd4 0a01 	vldr	s1, [r4, #4]
 800d790:	ed91 6a01 	vldr	s12, [r1, #4]
 800d794:	edd7 5a00 	vldr	s11, [r7]
 800d798:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800d79c:	ee33 3a69 	vsub.f32	s6, s6, s19
 800d7a0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800d7a4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800d7a8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d7ac:	ee38 7a87 	vadd.f32	s14, s17, s14
 800d7b0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800d7b4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800d7b8:	ee75 8a69 	vsub.f32	s17, s10, s19
 800d7bc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800d7c0:	ee35 5a29 	vadd.f32	s10, s10, s19
 800d7c4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800d7c8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800d7cc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800d7d0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800d7d4:	ee32 9a08 	vadd.f32	s18, s4, s16
 800d7d8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800d7dc:	ee32 2a48 	vsub.f32	s4, s4, s16
 800d7e0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800d7e4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800d7e8:	ee32 1a87 	vadd.f32	s2, s5, s14
 800d7ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d7f0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800d7f4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800d7f8:	ee73 0a29 	vadd.f32	s1, s6, s19
 800d7fc:	ee36 0a28 	vadd.f32	s0, s12, s17
 800d800:	ee33 3a69 	vsub.f32	s6, s6, s19
 800d804:	ee32 7a64 	vsub.f32	s14, s4, s9
 800d808:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800d80c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800d810:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800d814:	ee75 8a85 	vadd.f32	s17, s11, s10
 800d818:	ee74 3a22 	vadd.f32	s7, s8, s5
 800d81c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800d820:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800d824:	ee79 1a41 	vsub.f32	s3, s18, s2
 800d828:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800d82c:	ee76 5a43 	vsub.f32	s11, s12, s6
 800d830:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d834:	ee74 4a82 	vadd.f32	s9, s9, s4
 800d838:	ee30 4a60 	vsub.f32	s8, s0, s1
 800d83c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800d840:	ee30 0a80 	vadd.f32	s0, s1, s0
 800d844:	ee77 9a85 	vadd.f32	s19, s15, s10
 800d848:	ee33 6a06 	vadd.f32	s12, s6, s12
 800d84c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d850:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800d854:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800d858:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800d85c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800d860:	ee39 1a01 	vadd.f32	s2, s18, s2
 800d864:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800d868:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800d86c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800d870:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800d874:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800d878:	ee35 3a03 	vadd.f32	s6, s10, s6
 800d87c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800d880:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800d884:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800d888:	ed9d 4a02 	vldr	s8, [sp, #8]
 800d88c:	ed82 1a01 	vstr	s2, [r2, #4]
 800d890:	ee77 3a63 	vsub.f32	s7, s14, s7
 800d894:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800d898:	ed9d 7a01 	vldr	s14, [sp, #4]
 800d89c:	ed81 3a00 	vstr	s6, [r1]
 800d8a0:	ee30 9a89 	vadd.f32	s18, s1, s18
 800d8a4:	ee32 2a05 	vadd.f32	s4, s4, s10
 800d8a8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800d8ac:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800d8b0:	ee67 2a22 	vmul.f32	s5, s14, s5
 800d8b4:	ee64 1a00 	vmul.f32	s3, s8, s0
 800d8b8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d8bc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800d8c0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800d8c4:	ee64 8a28 	vmul.f32	s17, s8, s17
 800d8c8:	ed9d 4a00 	vldr	s8, [sp]
 800d8cc:	edc1 6a01 	vstr	s13, [r1, #4]
 800d8d0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800d8d4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800d8d8:	ee64 9a29 	vmul.f32	s19, s8, s19
 800d8dc:	ee24 4a25 	vmul.f32	s8, s8, s11
 800d8e0:	ee30 7a87 	vadd.f32	s14, s1, s14
 800d8e4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d8e8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800d8ec:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800d8f0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800d8f4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800d8f8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800d8fc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800d900:	ee75 1a21 	vadd.f32	s3, s10, s3
 800d904:	ee30 0a68 	vsub.f32	s0, s0, s17
 800d908:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800d90c:	ee70 0a84 	vadd.f32	s1, s1, s8
 800d910:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d914:	44d9      	add	r9, fp
 800d916:	45ca      	cmp	sl, r9
 800d918:	ed84 9a00 	vstr	s18, [r4]
 800d91c:	edc4 3a01 	vstr	s7, [r4, #4]
 800d920:	441a      	add	r2, r3
 800d922:	ed07 7a01 	vstr	s14, [r7, #-4]
 800d926:	edc7 2a00 	vstr	s5, [r7]
 800d92a:	4419      	add	r1, r3
 800d92c:	ed80 2a00 	vstr	s4, [r0]
 800d930:	ed80 8a01 	vstr	s16, [r0, #4]
 800d934:	441c      	add	r4, r3
 800d936:	ed48 1a01 	vstr	s3, [r8, #-4]
 800d93a:	ed88 0a00 	vstr	s0, [r8]
 800d93e:	441f      	add	r7, r3
 800d940:	ed46 4a01 	vstr	s9, [r6, #-4]
 800d944:	4418      	add	r0, r3
 800d946:	edc6 9a00 	vstr	s19, [r6]
 800d94a:	4498      	add	r8, r3
 800d94c:	edc5 0a00 	vstr	s1, [r5]
 800d950:	ed85 6a01 	vstr	s12, [r5, #4]
 800d954:	441e      	add	r6, r3
 800d956:	441d      	add	r5, r3
 800d958:	f63f aeea 	bhi.w	800d730 <arm_radix8_butterfly_f32+0x328>
 800d95c:	9a03      	ldr	r2, [sp, #12]
 800d95e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d960:	3201      	adds	r2, #1
 800d962:	4611      	mov	r1, r2
 800d964:	9203      	str	r2, [sp, #12]
 800d966:	9a04      	ldr	r2, [sp, #16]
 800d968:	4402      	add	r2, r0
 800d96a:	9204      	str	r2, [sp, #16]
 800d96c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d96e:	9a05      	ldr	r2, [sp, #20]
 800d970:	4402      	add	r2, r0
 800d972:	9205      	str	r2, [sp, #20]
 800d974:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d976:	9a07      	ldr	r2, [sp, #28]
 800d978:	4402      	add	r2, r0
 800d97a:	9207      	str	r2, [sp, #28]
 800d97c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d97e:	9a06      	ldr	r2, [sp, #24]
 800d980:	4402      	add	r2, r0
 800d982:	9206      	str	r2, [sp, #24]
 800d984:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d986:	4496      	add	lr, r2
 800d988:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d98a:	4494      	add	ip, r2
 800d98c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d98e:	3208      	adds	r2, #8
 800d990:	920f      	str	r2, [sp, #60]	; 0x3c
 800d992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d994:	3208      	adds	r2, #8
 800d996:	920e      	str	r2, [sp, #56]	; 0x38
 800d998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d99a:	3208      	adds	r2, #8
 800d99c:	920d      	str	r2, [sp, #52]	; 0x34
 800d99e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9a0:	3208      	adds	r2, #8
 800d9a2:	920c      	str	r2, [sp, #48]	; 0x30
 800d9a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9a6:	3208      	adds	r2, #8
 800d9a8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d9aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9ac:	3208      	adds	r2, #8
 800d9ae:	920a      	str	r2, [sp, #40]	; 0x28
 800d9b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9b2:	3208      	adds	r2, #8
 800d9b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9b6:	9a08      	ldr	r2, [sp, #32]
 800d9b8:	3208      	adds	r2, #8
 800d9ba:	9208      	str	r2, [sp, #32]
 800d9bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d9be:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d9c0:	4288      	cmp	r0, r1
 800d9c2:	4622      	mov	r2, r4
 800d9c4:	d007      	beq.n	800d9d6 <arm_radix8_butterfly_f32+0x5ce>
 800d9c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d9c8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d9cc:	4621      	mov	r1, r4
 800d9ce:	4401      	add	r1, r0
 800d9d0:	9110      	str	r1, [sp, #64]	; 0x40
 800d9d2:	9804      	ldr	r0, [sp, #16]
 800d9d4:	e67c      	b.n	800d6d0 <arm_radix8_butterfly_f32+0x2c8>
 800d9d6:	4683      	mov	fp, r0
 800d9d8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 800d9dc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d9de:	e524      	b.n	800d42a <arm_radix8_butterfly_f32+0x22>
 800d9e0:	b01d      	add	sp, #116	; 0x74
 800d9e2:	ecbd 8b10 	vpop	{d8-d15}
 800d9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ea:	bf00      	nop

0800d9ec <_ZdlPvj>:
 800d9ec:	f000 b9af 	b.w	800dd4e <_ZdlPv>

0800d9f0 <_ZdaPv>:
 800d9f0:	f000 b9ad 	b.w	800dd4e <_ZdlPv>

0800d9f4 <_Znwj>:
 800d9f4:	2801      	cmp	r0, #1
 800d9f6:	bf38      	it	cc
 800d9f8:	2001      	movcc	r0, #1
 800d9fa:	b510      	push	{r4, lr}
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	4620      	mov	r0, r4
 800da00:	f002 fc9a 	bl	8010338 <malloc>
 800da04:	b100      	cbz	r0, 800da08 <_Znwj+0x14>
 800da06:	bd10      	pop	{r4, pc}
 800da08:	f000 f9a4 	bl	800dd54 <_ZSt15get_new_handlerv>
 800da0c:	b908      	cbnz	r0, 800da12 <_Znwj+0x1e>
 800da0e:	f002 fc8b 	bl	8010328 <abort>
 800da12:	4780      	blx	r0
 800da14:	e7f3      	b.n	800d9fe <_Znwj+0xa>

0800da16 <_Znaj>:
 800da16:	f7ff bfed 	b.w	800d9f4 <_Znwj>

0800da1a <_ZNSaIcEC1Ev>:
 800da1a:	4770      	bx	lr

0800da1c <_ZNSaIcED1Ev>:
 800da1c:	4770      	bx	lr

0800da1e <_ZSt17__throw_bad_allocv>:
 800da1e:	b508      	push	{r3, lr}
 800da20:	f002 fc82 	bl	8010328 <abort>

0800da24 <_ZSt28__throw_bad_array_new_lengthv>:
 800da24:	b508      	push	{r3, lr}
 800da26:	f002 fc7f 	bl	8010328 <abort>

0800da2a <_ZSt19__throw_logic_errorPKc>:
 800da2a:	b508      	push	{r3, lr}
 800da2c:	f002 fc7c 	bl	8010328 <abort>

0800da30 <_ZSt20__throw_length_errorPKc>:
 800da30:	b508      	push	{r3, lr}
 800da32:	f002 fc79 	bl	8010328 <abort>

0800da36 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800da36:	b10a      	cbz	r2, 800da3c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800da38:	f003 bca5 	b.w	8011386 <memcpy>
 800da3c:	4770      	bx	lr

0800da3e <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800da3e:	b10a      	cbz	r2, 800da44 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800da40:	f003 bba4 	b.w	801118c <memcmp>
 800da44:	4610      	mov	r0, r2
 800da46:	4770      	bx	lr

0800da48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800da48:	b508      	push	{r3, lr}
 800da4a:	680b      	ldr	r3, [r1, #0]
 800da4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da50:	d302      	bcc.n	800da58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800da52:	480d      	ldr	r0, [pc, #52]	; (800da88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800da54:	f7ff ffec 	bl	800da30 <_ZSt20__throw_length_errorPKc>
 800da58:	4293      	cmp	r3, r2
 800da5a:	d90b      	bls.n	800da74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800da5c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800da60:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800da64:	d206      	bcs.n	800da74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800da66:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800da6a:	bf2a      	itet	cs
 800da6c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800da70:	6008      	strcc	r0, [r1, #0]
 800da72:	600b      	strcs	r3, [r1, #0]
 800da74:	6808      	ldr	r0, [r1, #0]
 800da76:	3001      	adds	r0, #1
 800da78:	d501      	bpl.n	800da7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800da7a:	f7ff ffd0 	bl	800da1e <_ZSt17__throw_bad_allocv>
 800da7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800da82:	f7ff bfb7 	b.w	800d9f4 <_Znwj>
 800da86:	bf00      	nop
 800da88:	0802c530 	.word	0x0802c530

0800da8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800da8c:	f850 3b08 	ldr.w	r3, [r0], #8
 800da90:	4283      	cmp	r3, r0
 800da92:	d002      	beq.n	800da9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800da94:	4618      	mov	r0, r3
 800da96:	f000 b95a 	b.w	800dd4e <_ZdlPv>
 800da9a:	4770      	bx	lr

0800da9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800da9c:	6840      	ldr	r0, [r0, #4]
 800da9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800daa2:	3901      	subs	r1, #1
 800daa4:	1a09      	subs	r1, r1, r0
 800daa6:	4291      	cmp	r1, r2
 800daa8:	b508      	push	{r3, lr}
 800daaa:	d202      	bcs.n	800dab2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800daac:	4618      	mov	r0, r3
 800daae:	f7ff ffbf 	bl	800da30 <_ZSt20__throw_length_errorPKc>
 800dab2:	bd08      	pop	{r3, pc}

0800dab4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800dab4:	6803      	ldr	r3, [r0, #0]
 800dab6:	428b      	cmp	r3, r1
 800dab8:	d806      	bhi.n	800dac8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800daba:	6842      	ldr	r2, [r0, #4]
 800dabc:	4413      	add	r3, r2
 800dabe:	4299      	cmp	r1, r3
 800dac0:	bf94      	ite	ls
 800dac2:	2000      	movls	r0, #0
 800dac4:	2001      	movhi	r0, #1
 800dac6:	4770      	bx	lr
 800dac8:	2001      	movs	r0, #1
 800daca:	4770      	bx	lr

0800dacc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800dacc:	2a01      	cmp	r2, #1
 800dace:	b410      	push	{r4}
 800dad0:	d104      	bne.n	800dadc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800dad2:	780a      	ldrb	r2, [r1, #0]
 800dad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dad8:	7002      	strb	r2, [r0, #0]
 800dada:	4770      	bx	lr
 800dadc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dae0:	f7ff bfa9 	b.w	800da36 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800dae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800dae4:	2a01      	cmp	r2, #1
 800dae6:	b430      	push	{r4, r5}
 800dae8:	d103      	bne.n	800daf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800daea:	780b      	ldrb	r3, [r1, #0]
 800daec:	7003      	strb	r3, [r0, #0]
 800daee:	bc30      	pop	{r4, r5}
 800daf0:	4770      	bx	lr
 800daf2:	2a00      	cmp	r2, #0
 800daf4:	d0fb      	beq.n	800daee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800daf6:	bc30      	pop	{r4, r5}
 800daf8:	f003 bb58 	b.w	80111ac <memmove>

0800dafc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800dafc:	b508      	push	{r3, lr}
 800dafe:	1a52      	subs	r2, r2, r1
 800db00:	f7ff ffe4 	bl	800dacc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800db04:	bd08      	pop	{r3, pc}

0800db06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800db06:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800db0a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800db0c:	461f      	mov	r7, r3
 800db0e:	6843      	ldr	r3, [r0, #4]
 800db10:	eb01 0802 	add.w	r8, r1, r2
 800db14:	1ab2      	subs	r2, r6, r2
 800db16:	441a      	add	r2, r3
 800db18:	eba3 0908 	sub.w	r9, r3, r8
 800db1c:	4603      	mov	r3, r0
 800db1e:	9201      	str	r2, [sp, #4]
 800db20:	f853 2b08 	ldr.w	r2, [r3], #8
 800db24:	429a      	cmp	r2, r3
 800db26:	bf18      	it	ne
 800db28:	6882      	ldrne	r2, [r0, #8]
 800db2a:	460d      	mov	r5, r1
 800db2c:	bf08      	it	eq
 800db2e:	220f      	moveq	r2, #15
 800db30:	a901      	add	r1, sp, #4
 800db32:	4604      	mov	r4, r0
 800db34:	f7ff ff88 	bl	800da48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800db38:	4682      	mov	sl, r0
 800db3a:	b11d      	cbz	r5, 800db44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800db3c:	6821      	ldr	r1, [r4, #0]
 800db3e:	462a      	mov	r2, r5
 800db40:	f7ff ffc4 	bl	800dacc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800db44:	b137      	cbz	r7, 800db54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800db46:	b12e      	cbz	r6, 800db54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800db48:	4632      	mov	r2, r6
 800db4a:	4639      	mov	r1, r7
 800db4c:	eb0a 0005 	add.w	r0, sl, r5
 800db50:	f7ff ffbc 	bl	800dacc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800db54:	f1b9 0f00 	cmp.w	r9, #0
 800db58:	d007      	beq.n	800db6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800db5a:	6821      	ldr	r1, [r4, #0]
 800db5c:	4435      	add	r5, r6
 800db5e:	464a      	mov	r2, r9
 800db60:	4441      	add	r1, r8
 800db62:	eb0a 0005 	add.w	r0, sl, r5
 800db66:	f7ff ffb1 	bl	800dacc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800db6a:	4620      	mov	r0, r4
 800db6c:	f7ff ff8e 	bl	800da8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800db70:	9b01      	ldr	r3, [sp, #4]
 800db72:	f8c4 a000 	str.w	sl, [r4]
 800db76:	60a3      	str	r3, [r4, #8]
 800db78:	b002      	add	sp, #8
 800db7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800db7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800db7e:	b510      	push	{r4, lr}
 800db80:	4604      	mov	r4, r0
 800db82:	f7ff ff83 	bl	800da8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800db86:	4620      	mov	r0, r4
 800db88:	bd10      	pop	{r4, pc}
	...

0800db8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800db8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db92:	4614      	mov	r4, r2
 800db94:	4680      	mov	r8, r0
 800db96:	462a      	mov	r2, r5
 800db98:	4689      	mov	r9, r1
 800db9a:	461f      	mov	r7, r3
 800db9c:	4621      	mov	r1, r4
 800db9e:	4b39      	ldr	r3, [pc, #228]	; (800dc84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800dba0:	f7ff ff7c 	bl	800da9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800dba4:	4642      	mov	r2, r8
 800dba6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbaa:	f852 6b08 	ldr.w	r6, [r2], #8
 800dbae:	4296      	cmp	r6, r2
 800dbb0:	bf18      	it	ne
 800dbb2:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800dbb6:	eba5 0b04 	sub.w	fp, r5, r4
 800dbba:	eb03 0a0b 	add.w	sl, r3, fp
 800dbbe:	bf08      	it	eq
 800dbc0:	220f      	moveq	r2, #15
 800dbc2:	4552      	cmp	r2, sl
 800dbc4:	d351      	bcc.n	800dc6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800dbc6:	444e      	add	r6, r9
 800dbc8:	4639      	mov	r1, r7
 800dbca:	44a1      	add	r9, r4
 800dbcc:	4640      	mov	r0, r8
 800dbce:	eba3 0909 	sub.w	r9, r3, r9
 800dbd2:	f7ff ff6f 	bl	800dab4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800dbd6:	b180      	cbz	r0, 800dbfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800dbd8:	f1b9 0f00 	cmp.w	r9, #0
 800dbdc:	d006      	beq.n	800dbec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800dbde:	42ac      	cmp	r4, r5
 800dbe0:	d004      	beq.n	800dbec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800dbe2:	464a      	mov	r2, r9
 800dbe4:	1931      	adds	r1, r6, r4
 800dbe6:	1970      	adds	r0, r6, r5
 800dbe8:	f7ff ff7c 	bl	800dae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800dbec:	b315      	cbz	r5, 800dc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800dbee:	462a      	mov	r2, r5
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f7ff ff6a 	bl	800dacc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800dbf8:	e01c      	b.n	800dc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800dbfa:	b135      	cbz	r5, 800dc0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800dbfc:	42ac      	cmp	r4, r5
 800dbfe:	d33c      	bcc.n	800dc7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800dc00:	462a      	mov	r2, r5
 800dc02:	4639      	mov	r1, r7
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7ff ff6d 	bl	800dae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800dc0a:	f1b9 0f00 	cmp.w	r9, #0
 800dc0e:	d011      	beq.n	800dc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800dc10:	42ac      	cmp	r4, r5
 800dc12:	d00f      	beq.n	800dc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800dc14:	464a      	mov	r2, r9
 800dc16:	1931      	adds	r1, r6, r4
 800dc18:	1970      	adds	r0, r6, r5
 800dc1a:	f7ff ff63 	bl	800dae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800dc1e:	42ac      	cmp	r4, r5
 800dc20:	d208      	bcs.n	800dc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800dc22:	4434      	add	r4, r6
 800dc24:	197b      	adds	r3, r7, r5
 800dc26:	429c      	cmp	r4, r3
 800dc28:	d30f      	bcc.n	800dc4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800dc2a:	462a      	mov	r2, r5
 800dc2c:	4639      	mov	r1, r7
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f7ff ff58 	bl	800dae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800dc34:	f8d8 3000 	ldr.w	r3, [r8]
 800dc38:	f8c8 a004 	str.w	sl, [r8, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	4640      	mov	r0, r8
 800dc40:	f803 200a 	strb.w	r2, [r3, sl]
 800dc44:	b003      	add	sp, #12
 800dc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4a:	42bc      	cmp	r4, r7
 800dc4c:	d803      	bhi.n	800dc56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800dc4e:	462a      	mov	r2, r5
 800dc50:	eb07 010b 	add.w	r1, r7, fp
 800dc54:	e7cd      	b.n	800dbf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800dc56:	1be4      	subs	r4, r4, r7
 800dc58:	4622      	mov	r2, r4
 800dc5a:	4639      	mov	r1, r7
 800dc5c:	4630      	mov	r0, r6
 800dc5e:	f7ff ff41 	bl	800dae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800dc62:	1b2a      	subs	r2, r5, r4
 800dc64:	1971      	adds	r1, r6, r5
 800dc66:	1930      	adds	r0, r6, r4
 800dc68:	e7c4      	b.n	800dbf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800dc6a:	9500      	str	r5, [sp, #0]
 800dc6c:	463b      	mov	r3, r7
 800dc6e:	4622      	mov	r2, r4
 800dc70:	4649      	mov	r1, r9
 800dc72:	4640      	mov	r0, r8
 800dc74:	f7ff ff47 	bl	800db06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800dc78:	e7dc      	b.n	800dc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800dc7a:	f1b9 0f00 	cmp.w	r9, #0
 800dc7e:	d0d0      	beq.n	800dc22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 800dc80:	e7c8      	b.n	800dc14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800dc82:	bf00      	nop
 800dc84:	0802c548 	.word	0x0802c548

0800dc88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800dc88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4608      	mov	r0, r1
 800dc8e:	9103      	str	r1, [sp, #12]
 800dc90:	f7f2 fb6e 	bl	8000370 <strlen>
 800dc94:	9b03      	ldr	r3, [sp, #12]
 800dc96:	9000      	str	r0, [sp, #0]
 800dc98:	6862      	ldr	r2, [r4, #4]
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f7ff ff75 	bl	800db8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800dca2:	b004      	add	sp, #16
 800dca4:	bd10      	pop	{r4, pc}

0800dca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800dca6:	b508      	push	{r3, lr}
 800dca8:	f7ff ffee 	bl	800dc88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800dcac:	bd08      	pop	{r3, pc}

0800dcae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 800dcae:	6800      	ldr	r0, [r0, #0]
 800dcb0:	4770      	bx	lr

0800dcb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800dcb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcb4:	6846      	ldr	r6, [r0, #4]
 800dcb6:	9101      	str	r1, [sp, #4]
 800dcb8:	4605      	mov	r5, r0
 800dcba:	4608      	mov	r0, r1
 800dcbc:	f7f2 fb58 	bl	8000370 <strlen>
 800dcc0:	4286      	cmp	r6, r0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4632      	mov	r2, r6
 800dcc6:	9901      	ldr	r1, [sp, #4]
 800dcc8:	bf28      	it	cs
 800dcca:	4602      	movcs	r2, r0
 800dccc:	6828      	ldr	r0, [r5, #0]
 800dcce:	f7ff feb6 	bl	800da3e <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800dcd2:	b900      	cbnz	r0, 800dcd6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800dcd4:	1b30      	subs	r0, r6, r4
 800dcd6:	b002      	add	sp, #8
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dcdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800dcdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcde:	4604      	mov	r4, r0
 800dce0:	4616      	mov	r6, r2
 800dce2:	460d      	mov	r5, r1
 800dce4:	b919      	cbnz	r1, 800dcee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800dce6:	b112      	cbz	r2, 800dcee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800dce8:	480d      	ldr	r0, [pc, #52]	; (800dd20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800dcea:	f7ff fe9e 	bl	800da2a <_ZSt19__throw_logic_errorPKc>
 800dcee:	1b73      	subs	r3, r6, r5
 800dcf0:	2b0f      	cmp	r3, #15
 800dcf2:	9301      	str	r3, [sp, #4]
 800dcf4:	d907      	bls.n	800dd06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	a901      	add	r1, sp, #4
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f7ff fea4 	bl	800da48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800dd00:	9b01      	ldr	r3, [sp, #4]
 800dd02:	6020      	str	r0, [r4, #0]
 800dd04:	60a3      	str	r3, [r4, #8]
 800dd06:	4632      	mov	r2, r6
 800dd08:	4629      	mov	r1, r5
 800dd0a:	6820      	ldr	r0, [r4, #0]
 800dd0c:	f7ff fef6 	bl	800dafc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800dd10:	9b01      	ldr	r3, [sp, #4]
 800dd12:	6822      	ldr	r2, [r4, #0]
 800dd14:	6063      	str	r3, [r4, #4]
 800dd16:	2100      	movs	r1, #0
 800dd18:	54d1      	strb	r1, [r2, r3]
 800dd1a:	b002      	add	sp, #8
 800dd1c:	bd70      	pop	{r4, r5, r6, pc}
 800dd1e:	bf00      	nop
 800dd20:	0802c561 	.word	0x0802c561

0800dd24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	f100 0308 	add.w	r3, r0, #8
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	6003      	str	r3, [r0, #0]
 800dd2e:	460d      	mov	r5, r1
 800dd30:	b159      	cbz	r1, 800dd4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800dd32:	4608      	mov	r0, r1
 800dd34:	f7f2 fb1c 	bl	8000370 <strlen>
 800dd38:	182a      	adds	r2, r5, r0
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f04f 0300 	mov.w	r3, #0
 800dd40:	4629      	mov	r1, r5
 800dd42:	f7ff ffcb 	bl	800dcdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800dd46:	4620      	mov	r0, r4
 800dd48:	bd38      	pop	{r3, r4, r5, pc}
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	e7f5      	b.n	800dd3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800dd4e <_ZdlPv>:
 800dd4e:	f002 bafb 	b.w	8010348 <free>
	...

0800dd54 <_ZSt15get_new_handlerv>:
 800dd54:	4b02      	ldr	r3, [pc, #8]	; (800dd60 <_ZSt15get_new_handlerv+0xc>)
 800dd56:	6818      	ldr	r0, [r3, #0]
 800dd58:	f3bf 8f5b 	dmb	ish
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	20016178 	.word	0x20016178
 800dd64:	00000000 	.word	0x00000000

0800dd68 <log>:
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	ed2d 8b02 	vpush	{d8}
 800dd6e:	ec55 4b10 	vmov	r4, r5, d0
 800dd72:	f000 fbc5 	bl	800e500 <__ieee754_log>
 800dd76:	4622      	mov	r2, r4
 800dd78:	462b      	mov	r3, r5
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	eeb0 8a40 	vmov.f32	s16, s0
 800dd82:	eef0 8a60 	vmov.f32	s17, s1
 800dd86:	f7f2 ff51 	bl	8000c2c <__aeabi_dcmpun>
 800dd8a:	b998      	cbnz	r0, 800ddb4 <log+0x4c>
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	2300      	movs	r3, #0
 800dd90:	4620      	mov	r0, r4
 800dd92:	4629      	mov	r1, r5
 800dd94:	f7f2 ff40 	bl	8000c18 <__aeabi_dcmpgt>
 800dd98:	b960      	cbnz	r0, 800ddb4 <log+0x4c>
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	4620      	mov	r0, r4
 800dda0:	4629      	mov	r1, r5
 800dda2:	f7f2 ff11 	bl	8000bc8 <__aeabi_dcmpeq>
 800dda6:	b160      	cbz	r0, 800ddc2 <log+0x5a>
 800dda8:	f003 fac0 	bl	801132c <__errno>
 800ddac:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800ddd8 <log+0x70>
 800ddb0:	2322      	movs	r3, #34	; 0x22
 800ddb2:	6003      	str	r3, [r0, #0]
 800ddb4:	eeb0 0a48 	vmov.f32	s0, s16
 800ddb8:	eef0 0a68 	vmov.f32	s1, s17
 800ddbc:	ecbd 8b02 	vpop	{d8}
 800ddc0:	bd38      	pop	{r3, r4, r5, pc}
 800ddc2:	f003 fab3 	bl	801132c <__errno>
 800ddc6:	ecbd 8b02 	vpop	{d8}
 800ddca:	2321      	movs	r3, #33	; 0x21
 800ddcc:	6003      	str	r3, [r0, #0]
 800ddce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddd2:	4803      	ldr	r0, [pc, #12]	; (800dde0 <log+0x78>)
 800ddd4:	f000 b924 	b.w	800e020 <nan>
 800ddd8:	00000000 	.word	0x00000000
 800dddc:	fff00000 	.word	0xfff00000
 800dde0:	0802ca0a 	.word	0x0802ca0a

0800dde4 <pow>:
 800dde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde6:	ed2d 8b02 	vpush	{d8}
 800ddea:	eeb0 8a40 	vmov.f32	s16, s0
 800ddee:	eef0 8a60 	vmov.f32	s17, s1
 800ddf2:	ec55 4b11 	vmov	r4, r5, d1
 800ddf6:	f000 fd3f 	bl	800e878 <__ieee754_pow>
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	462b      	mov	r3, r5
 800ddfe:	4620      	mov	r0, r4
 800de00:	4629      	mov	r1, r5
 800de02:	ec57 6b10 	vmov	r6, r7, d0
 800de06:	f7f2 ff11 	bl	8000c2c <__aeabi_dcmpun>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d13b      	bne.n	800de86 <pow+0xa2>
 800de0e:	ec51 0b18 	vmov	r0, r1, d8
 800de12:	2200      	movs	r2, #0
 800de14:	2300      	movs	r3, #0
 800de16:	f7f2 fed7 	bl	8000bc8 <__aeabi_dcmpeq>
 800de1a:	b1b8      	cbz	r0, 800de4c <pow+0x68>
 800de1c:	2200      	movs	r2, #0
 800de1e:	2300      	movs	r3, #0
 800de20:	4620      	mov	r0, r4
 800de22:	4629      	mov	r1, r5
 800de24:	f7f2 fed0 	bl	8000bc8 <__aeabi_dcmpeq>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d146      	bne.n	800deba <pow+0xd6>
 800de2c:	ec45 4b10 	vmov	d0, r4, r5
 800de30:	f000 f8ea 	bl	800e008 <finite>
 800de34:	b338      	cbz	r0, 800de86 <pow+0xa2>
 800de36:	2200      	movs	r2, #0
 800de38:	2300      	movs	r3, #0
 800de3a:	4620      	mov	r0, r4
 800de3c:	4629      	mov	r1, r5
 800de3e:	f7f2 fecd 	bl	8000bdc <__aeabi_dcmplt>
 800de42:	b300      	cbz	r0, 800de86 <pow+0xa2>
 800de44:	f003 fa72 	bl	801132c <__errno>
 800de48:	2322      	movs	r3, #34	; 0x22
 800de4a:	e01b      	b.n	800de84 <pow+0xa0>
 800de4c:	ec47 6b10 	vmov	d0, r6, r7
 800de50:	f000 f8da 	bl	800e008 <finite>
 800de54:	b9e0      	cbnz	r0, 800de90 <pow+0xac>
 800de56:	eeb0 0a48 	vmov.f32	s0, s16
 800de5a:	eef0 0a68 	vmov.f32	s1, s17
 800de5e:	f000 f8d3 	bl	800e008 <finite>
 800de62:	b1a8      	cbz	r0, 800de90 <pow+0xac>
 800de64:	ec45 4b10 	vmov	d0, r4, r5
 800de68:	f000 f8ce 	bl	800e008 <finite>
 800de6c:	b180      	cbz	r0, 800de90 <pow+0xac>
 800de6e:	4632      	mov	r2, r6
 800de70:	463b      	mov	r3, r7
 800de72:	4630      	mov	r0, r6
 800de74:	4639      	mov	r1, r7
 800de76:	f7f2 fed9 	bl	8000c2c <__aeabi_dcmpun>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d0e2      	beq.n	800de44 <pow+0x60>
 800de7e:	f003 fa55 	bl	801132c <__errno>
 800de82:	2321      	movs	r3, #33	; 0x21
 800de84:	6003      	str	r3, [r0, #0]
 800de86:	ecbd 8b02 	vpop	{d8}
 800de8a:	ec47 6b10 	vmov	d0, r6, r7
 800de8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de90:	2200      	movs	r2, #0
 800de92:	2300      	movs	r3, #0
 800de94:	4630      	mov	r0, r6
 800de96:	4639      	mov	r1, r7
 800de98:	f7f2 fe96 	bl	8000bc8 <__aeabi_dcmpeq>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d0f2      	beq.n	800de86 <pow+0xa2>
 800dea0:	eeb0 0a48 	vmov.f32	s0, s16
 800dea4:	eef0 0a68 	vmov.f32	s1, s17
 800dea8:	f000 f8ae 	bl	800e008 <finite>
 800deac:	2800      	cmp	r0, #0
 800deae:	d0ea      	beq.n	800de86 <pow+0xa2>
 800deb0:	ec45 4b10 	vmov	d0, r4, r5
 800deb4:	f000 f8a8 	bl	800e008 <finite>
 800deb8:	e7c3      	b.n	800de42 <pow+0x5e>
 800deba:	4f01      	ldr	r7, [pc, #4]	; (800dec0 <pow+0xdc>)
 800debc:	2600      	movs	r6, #0
 800debe:	e7e2      	b.n	800de86 <pow+0xa2>
 800dec0:	3ff00000 	.word	0x3ff00000
 800dec4:	00000000 	.word	0x00000000

0800dec8 <cos>:
 800dec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800deca:	ec53 2b10 	vmov	r2, r3, d0
 800dece:	4826      	ldr	r0, [pc, #152]	; (800df68 <cos+0xa0>)
 800ded0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ded4:	4281      	cmp	r1, r0
 800ded6:	dc06      	bgt.n	800dee6 <cos+0x1e>
 800ded8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800df60 <cos+0x98>
 800dedc:	b005      	add	sp, #20
 800dede:	f85d eb04 	ldr.w	lr, [sp], #4
 800dee2:	f000 b985 	b.w	800e1f0 <__kernel_cos>
 800dee6:	4821      	ldr	r0, [pc, #132]	; (800df6c <cos+0xa4>)
 800dee8:	4281      	cmp	r1, r0
 800deea:	dd09      	ble.n	800df00 <cos+0x38>
 800deec:	ee10 0a10 	vmov	r0, s0
 800def0:	4619      	mov	r1, r3
 800def2:	f7f2 fa49 	bl	8000388 <__aeabi_dsub>
 800def6:	ec41 0b10 	vmov	d0, r0, r1
 800defa:	b005      	add	sp, #20
 800defc:	f85d fb04 	ldr.w	pc, [sp], #4
 800df00:	4668      	mov	r0, sp
 800df02:	f001 f9e5 	bl	800f2d0 <__ieee754_rem_pio2>
 800df06:	f000 0003 	and.w	r0, r0, #3
 800df0a:	2801      	cmp	r0, #1
 800df0c:	d00b      	beq.n	800df26 <cos+0x5e>
 800df0e:	2802      	cmp	r0, #2
 800df10:	d016      	beq.n	800df40 <cos+0x78>
 800df12:	b9e0      	cbnz	r0, 800df4e <cos+0x86>
 800df14:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df18:	ed9d 0b00 	vldr	d0, [sp]
 800df1c:	f000 f968 	bl	800e1f0 <__kernel_cos>
 800df20:	ec51 0b10 	vmov	r0, r1, d0
 800df24:	e7e7      	b.n	800def6 <cos+0x2e>
 800df26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df2a:	ed9d 0b00 	vldr	d0, [sp]
 800df2e:	f000 fa27 	bl	800e380 <__kernel_sin>
 800df32:	ec53 2b10 	vmov	r2, r3, d0
 800df36:	ee10 0a10 	vmov	r0, s0
 800df3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800df3e:	e7da      	b.n	800def6 <cos+0x2e>
 800df40:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df44:	ed9d 0b00 	vldr	d0, [sp]
 800df48:	f000 f952 	bl	800e1f0 <__kernel_cos>
 800df4c:	e7f1      	b.n	800df32 <cos+0x6a>
 800df4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df52:	ed9d 0b00 	vldr	d0, [sp]
 800df56:	2001      	movs	r0, #1
 800df58:	f000 fa12 	bl	800e380 <__kernel_sin>
 800df5c:	e7e0      	b.n	800df20 <cos+0x58>
 800df5e:	bf00      	nop
	...
 800df68:	3fe921fb 	.word	0x3fe921fb
 800df6c:	7fefffff 	.word	0x7fefffff

0800df70 <logf>:
 800df70:	b508      	push	{r3, lr}
 800df72:	ed2d 8b02 	vpush	{d8}
 800df76:	eeb0 8a40 	vmov.f32	s16, s0
 800df7a:	f001 fbb9 	bl	800f6f0 <__ieee754_logf>
 800df7e:	eeb4 8a48 	vcmp.f32	s16, s16
 800df82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df86:	d60f      	bvs.n	800dfa8 <logf+0x38>
 800df88:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800df8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df90:	dc0a      	bgt.n	800dfa8 <logf+0x38>
 800df92:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800df96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df9a:	d108      	bne.n	800dfae <logf+0x3e>
 800df9c:	f003 f9c6 	bl	801132c <__errno>
 800dfa0:	2322      	movs	r3, #34	; 0x22
 800dfa2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800dfc4 <logf+0x54>
 800dfa6:	6003      	str	r3, [r0, #0]
 800dfa8:	ecbd 8b02 	vpop	{d8}
 800dfac:	bd08      	pop	{r3, pc}
 800dfae:	f003 f9bd 	bl	801132c <__errno>
 800dfb2:	ecbd 8b02 	vpop	{d8}
 800dfb6:	2321      	movs	r3, #33	; 0x21
 800dfb8:	6003      	str	r3, [r0, #0]
 800dfba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dfbe:	4802      	ldr	r0, [pc, #8]	; (800dfc8 <logf+0x58>)
 800dfc0:	f000 b866 	b.w	800e090 <nanf>
 800dfc4:	ff800000 	.word	0xff800000
 800dfc8:	0802ca0a 	.word	0x0802ca0a

0800dfcc <sqrtf>:
 800dfcc:	b508      	push	{r3, lr}
 800dfce:	ed2d 8b02 	vpush	{d8}
 800dfd2:	eeb0 8a40 	vmov.f32	s16, s0
 800dfd6:	f000 f861 	bl	800e09c <__ieee754_sqrtf>
 800dfda:	eeb4 8a48 	vcmp.f32	s16, s16
 800dfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe2:	d60c      	bvs.n	800dffe <sqrtf+0x32>
 800dfe4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e004 <sqrtf+0x38>
 800dfe8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff0:	d505      	bpl.n	800dffe <sqrtf+0x32>
 800dff2:	f003 f99b 	bl	801132c <__errno>
 800dff6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dffa:	2321      	movs	r3, #33	; 0x21
 800dffc:	6003      	str	r3, [r0, #0]
 800dffe:	ecbd 8b02 	vpop	{d8}
 800e002:	bd08      	pop	{r3, pc}
 800e004:	00000000 	.word	0x00000000

0800e008 <finite>:
 800e008:	b082      	sub	sp, #8
 800e00a:	ed8d 0b00 	vstr	d0, [sp]
 800e00e:	9801      	ldr	r0, [sp, #4]
 800e010:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e014:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e018:	0fc0      	lsrs	r0, r0, #31
 800e01a:	b002      	add	sp, #8
 800e01c:	4770      	bx	lr
	...

0800e020 <nan>:
 800e020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e028 <nan+0x8>
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	00000000 	.word	0x00000000
 800e02c:	7ff80000 	.word	0x7ff80000

0800e030 <with_errno>:
 800e030:	b570      	push	{r4, r5, r6, lr}
 800e032:	4604      	mov	r4, r0
 800e034:	460d      	mov	r5, r1
 800e036:	4616      	mov	r6, r2
 800e038:	f003 f978 	bl	801132c <__errno>
 800e03c:	4629      	mov	r1, r5
 800e03e:	6006      	str	r6, [r0, #0]
 800e040:	4620      	mov	r0, r4
 800e042:	bd70      	pop	{r4, r5, r6, pc}

0800e044 <xflow>:
 800e044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e046:	4614      	mov	r4, r2
 800e048:	461d      	mov	r5, r3
 800e04a:	b108      	cbz	r0, 800e050 <xflow+0xc>
 800e04c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e050:	e9cd 2300 	strd	r2, r3, [sp]
 800e054:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e058:	4620      	mov	r0, r4
 800e05a:	4629      	mov	r1, r5
 800e05c:	f7f2 fb4c 	bl	80006f8 <__aeabi_dmul>
 800e060:	2222      	movs	r2, #34	; 0x22
 800e062:	b003      	add	sp, #12
 800e064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e068:	f7ff bfe2 	b.w	800e030 <with_errno>

0800e06c <__math_uflow>:
 800e06c:	b508      	push	{r3, lr}
 800e06e:	2200      	movs	r2, #0
 800e070:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e074:	f7ff ffe6 	bl	800e044 <xflow>
 800e078:	ec41 0b10 	vmov	d0, r0, r1
 800e07c:	bd08      	pop	{r3, pc}

0800e07e <__math_oflow>:
 800e07e:	b508      	push	{r3, lr}
 800e080:	2200      	movs	r2, #0
 800e082:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e086:	f7ff ffdd 	bl	800e044 <xflow>
 800e08a:	ec41 0b10 	vmov	d0, r0, r1
 800e08e:	bd08      	pop	{r3, pc}

0800e090 <nanf>:
 800e090:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e098 <nanf+0x8>
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop
 800e098:	7fc00000 	.word	0x7fc00000

0800e09c <__ieee754_sqrtf>:
 800e09c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e0a0:	4770      	bx	lr
 800e0a2:	0000      	movs	r0, r0
 800e0a4:	0000      	movs	r0, r0
	...

0800e0a8 <ceil>:
 800e0a8:	ec51 0b10 	vmov	r0, r1, d0
 800e0ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e0b8:	2e13      	cmp	r6, #19
 800e0ba:	ee10 5a10 	vmov	r5, s0
 800e0be:	ee10 8a10 	vmov	r8, s0
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	dc2f      	bgt.n	800e126 <ceil+0x7e>
 800e0c6:	2e00      	cmp	r6, #0
 800e0c8:	da12      	bge.n	800e0f0 <ceil+0x48>
 800e0ca:	a333      	add	r3, pc, #204	; (adr r3, 800e198 <ceil+0xf0>)
 800e0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d0:	f7f2 f95c 	bl	800038c <__adddf3>
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f7f2 fd9e 	bl	8000c18 <__aeabi_dcmpgt>
 800e0dc:	b128      	cbz	r0, 800e0ea <ceil+0x42>
 800e0de:	2c00      	cmp	r4, #0
 800e0e0:	db51      	blt.n	800e186 <ceil+0xde>
 800e0e2:	432c      	orrs	r4, r5
 800e0e4:	d053      	beq.n	800e18e <ceil+0xe6>
 800e0e6:	4c2e      	ldr	r4, [pc, #184]	; (800e1a0 <ceil+0xf8>)
 800e0e8:	2500      	movs	r5, #0
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	e024      	b.n	800e13a <ceil+0x92>
 800e0f0:	4f2c      	ldr	r7, [pc, #176]	; (800e1a4 <ceil+0xfc>)
 800e0f2:	4137      	asrs	r7, r6
 800e0f4:	ea01 0307 	and.w	r3, r1, r7
 800e0f8:	4303      	orrs	r3, r0
 800e0fa:	d01e      	beq.n	800e13a <ceil+0x92>
 800e0fc:	a326      	add	r3, pc, #152	; (adr r3, 800e198 <ceil+0xf0>)
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	f7f2 f943 	bl	800038c <__adddf3>
 800e106:	2200      	movs	r2, #0
 800e108:	2300      	movs	r3, #0
 800e10a:	f7f2 fd85 	bl	8000c18 <__aeabi_dcmpgt>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d0eb      	beq.n	800e0ea <ceil+0x42>
 800e112:	2c00      	cmp	r4, #0
 800e114:	bfc2      	ittt	gt
 800e116:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800e11a:	4133      	asrgt	r3, r6
 800e11c:	18e4      	addgt	r4, r4, r3
 800e11e:	ea24 0407 	bic.w	r4, r4, r7
 800e122:	2500      	movs	r5, #0
 800e124:	e7e1      	b.n	800e0ea <ceil+0x42>
 800e126:	2e33      	cmp	r6, #51	; 0x33
 800e128:	dd0b      	ble.n	800e142 <ceil+0x9a>
 800e12a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e12e:	d104      	bne.n	800e13a <ceil+0x92>
 800e130:	ee10 2a10 	vmov	r2, s0
 800e134:	460b      	mov	r3, r1
 800e136:	f7f2 f929 	bl	800038c <__adddf3>
 800e13a:	ec41 0b10 	vmov	d0, r0, r1
 800e13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e142:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e146:	f04f 37ff 	mov.w	r7, #4294967295
 800e14a:	40df      	lsrs	r7, r3
 800e14c:	4238      	tst	r0, r7
 800e14e:	d0f4      	beq.n	800e13a <ceil+0x92>
 800e150:	a311      	add	r3, pc, #68	; (adr r3, 800e198 <ceil+0xf0>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	f7f2 f919 	bl	800038c <__adddf3>
 800e15a:	2200      	movs	r2, #0
 800e15c:	2300      	movs	r3, #0
 800e15e:	f7f2 fd5b 	bl	8000c18 <__aeabi_dcmpgt>
 800e162:	2800      	cmp	r0, #0
 800e164:	d0c1      	beq.n	800e0ea <ceil+0x42>
 800e166:	2c00      	cmp	r4, #0
 800e168:	dd0a      	ble.n	800e180 <ceil+0xd8>
 800e16a:	2e14      	cmp	r6, #20
 800e16c:	d101      	bne.n	800e172 <ceil+0xca>
 800e16e:	3401      	adds	r4, #1
 800e170:	e006      	b.n	800e180 <ceil+0xd8>
 800e172:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e176:	2301      	movs	r3, #1
 800e178:	40b3      	lsls	r3, r6
 800e17a:	441d      	add	r5, r3
 800e17c:	45a8      	cmp	r8, r5
 800e17e:	d8f6      	bhi.n	800e16e <ceil+0xc6>
 800e180:	ea25 0507 	bic.w	r5, r5, r7
 800e184:	e7b1      	b.n	800e0ea <ceil+0x42>
 800e186:	2500      	movs	r5, #0
 800e188:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e18c:	e7ad      	b.n	800e0ea <ceil+0x42>
 800e18e:	4625      	mov	r5, r4
 800e190:	e7ab      	b.n	800e0ea <ceil+0x42>
 800e192:	bf00      	nop
 800e194:	f3af 8000 	nop.w
 800e198:	8800759c 	.word	0x8800759c
 800e19c:	7e37e43c 	.word	0x7e37e43c
 800e1a0:	3ff00000 	.word	0x3ff00000
 800e1a4:	000fffff 	.word	0x000fffff

0800e1a8 <roundf>:
 800e1a8:	ee10 0a10 	vmov	r0, s0
 800e1ac:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e1b0:	3a7f      	subs	r2, #127	; 0x7f
 800e1b2:	2a16      	cmp	r2, #22
 800e1b4:	dc15      	bgt.n	800e1e2 <roundf+0x3a>
 800e1b6:	2a00      	cmp	r2, #0
 800e1b8:	da08      	bge.n	800e1cc <roundf+0x24>
 800e1ba:	3201      	adds	r2, #1
 800e1bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e1c0:	d101      	bne.n	800e1c6 <roundf+0x1e>
 800e1c2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e1c6:	ee00 3a10 	vmov	s0, r3
 800e1ca:	4770      	bx	lr
 800e1cc:	4907      	ldr	r1, [pc, #28]	; (800e1ec <roundf+0x44>)
 800e1ce:	4111      	asrs	r1, r2
 800e1d0:	4208      	tst	r0, r1
 800e1d2:	d0fa      	beq.n	800e1ca <roundf+0x22>
 800e1d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e1d8:	4113      	asrs	r3, r2
 800e1da:	4403      	add	r3, r0
 800e1dc:	ea23 0301 	bic.w	r3, r3, r1
 800e1e0:	e7f1      	b.n	800e1c6 <roundf+0x1e>
 800e1e2:	2a80      	cmp	r2, #128	; 0x80
 800e1e4:	d1f1      	bne.n	800e1ca <roundf+0x22>
 800e1e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e1ea:	4770      	bx	lr
 800e1ec:	007fffff 	.word	0x007fffff

0800e1f0 <__kernel_cos>:
 800e1f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f4:	ec57 6b10 	vmov	r6, r7, d0
 800e1f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e1fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e200:	ed8d 1b00 	vstr	d1, [sp]
 800e204:	da07      	bge.n	800e216 <__kernel_cos+0x26>
 800e206:	ee10 0a10 	vmov	r0, s0
 800e20a:	4639      	mov	r1, r7
 800e20c:	f7f2 fd24 	bl	8000c58 <__aeabi_d2iz>
 800e210:	2800      	cmp	r0, #0
 800e212:	f000 8088 	beq.w	800e326 <__kernel_cos+0x136>
 800e216:	4632      	mov	r2, r6
 800e218:	463b      	mov	r3, r7
 800e21a:	4630      	mov	r0, r6
 800e21c:	4639      	mov	r1, r7
 800e21e:	f7f2 fa6b 	bl	80006f8 <__aeabi_dmul>
 800e222:	4b51      	ldr	r3, [pc, #324]	; (800e368 <__kernel_cos+0x178>)
 800e224:	2200      	movs	r2, #0
 800e226:	4604      	mov	r4, r0
 800e228:	460d      	mov	r5, r1
 800e22a:	f7f2 fa65 	bl	80006f8 <__aeabi_dmul>
 800e22e:	a340      	add	r3, pc, #256	; (adr r3, 800e330 <__kernel_cos+0x140>)
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	4682      	mov	sl, r0
 800e236:	468b      	mov	fp, r1
 800e238:	4620      	mov	r0, r4
 800e23a:	4629      	mov	r1, r5
 800e23c:	f7f2 fa5c 	bl	80006f8 <__aeabi_dmul>
 800e240:	a33d      	add	r3, pc, #244	; (adr r3, 800e338 <__kernel_cos+0x148>)
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	f7f2 f8a1 	bl	800038c <__adddf3>
 800e24a:	4622      	mov	r2, r4
 800e24c:	462b      	mov	r3, r5
 800e24e:	f7f2 fa53 	bl	80006f8 <__aeabi_dmul>
 800e252:	a33b      	add	r3, pc, #236	; (adr r3, 800e340 <__kernel_cos+0x150>)
 800e254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e258:	f7f2 f896 	bl	8000388 <__aeabi_dsub>
 800e25c:	4622      	mov	r2, r4
 800e25e:	462b      	mov	r3, r5
 800e260:	f7f2 fa4a 	bl	80006f8 <__aeabi_dmul>
 800e264:	a338      	add	r3, pc, #224	; (adr r3, 800e348 <__kernel_cos+0x158>)
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	f7f2 f88f 	bl	800038c <__adddf3>
 800e26e:	4622      	mov	r2, r4
 800e270:	462b      	mov	r3, r5
 800e272:	f7f2 fa41 	bl	80006f8 <__aeabi_dmul>
 800e276:	a336      	add	r3, pc, #216	; (adr r3, 800e350 <__kernel_cos+0x160>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	f7f2 f884 	bl	8000388 <__aeabi_dsub>
 800e280:	4622      	mov	r2, r4
 800e282:	462b      	mov	r3, r5
 800e284:	f7f2 fa38 	bl	80006f8 <__aeabi_dmul>
 800e288:	a333      	add	r3, pc, #204	; (adr r3, 800e358 <__kernel_cos+0x168>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	f7f2 f87d 	bl	800038c <__adddf3>
 800e292:	4622      	mov	r2, r4
 800e294:	462b      	mov	r3, r5
 800e296:	f7f2 fa2f 	bl	80006f8 <__aeabi_dmul>
 800e29a:	4622      	mov	r2, r4
 800e29c:	462b      	mov	r3, r5
 800e29e:	f7f2 fa2b 	bl	80006f8 <__aeabi_dmul>
 800e2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	4639      	mov	r1, r7
 800e2ae:	f7f2 fa23 	bl	80006f8 <__aeabi_dmul>
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f7f2 f865 	bl	8000388 <__aeabi_dsub>
 800e2be:	4b2b      	ldr	r3, [pc, #172]	; (800e36c <__kernel_cos+0x17c>)
 800e2c0:	4598      	cmp	r8, r3
 800e2c2:	4606      	mov	r6, r0
 800e2c4:	460f      	mov	r7, r1
 800e2c6:	dc10      	bgt.n	800e2ea <__kernel_cos+0xfa>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	4650      	mov	r0, sl
 800e2ce:	4659      	mov	r1, fp
 800e2d0:	f7f2 f85a 	bl	8000388 <__aeabi_dsub>
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	4926      	ldr	r1, [pc, #152]	; (800e370 <__kernel_cos+0x180>)
 800e2d8:	4602      	mov	r2, r0
 800e2da:	2000      	movs	r0, #0
 800e2dc:	f7f2 f854 	bl	8000388 <__aeabi_dsub>
 800e2e0:	ec41 0b10 	vmov	d0, r0, r1
 800e2e4:	b003      	add	sp, #12
 800e2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ea:	4b22      	ldr	r3, [pc, #136]	; (800e374 <__kernel_cos+0x184>)
 800e2ec:	4920      	ldr	r1, [pc, #128]	; (800e370 <__kernel_cos+0x180>)
 800e2ee:	4598      	cmp	r8, r3
 800e2f0:	bfcc      	ite	gt
 800e2f2:	4d21      	ldrgt	r5, [pc, #132]	; (800e378 <__kernel_cos+0x188>)
 800e2f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e2f8:	2400      	movs	r4, #0
 800e2fa:	4622      	mov	r2, r4
 800e2fc:	462b      	mov	r3, r5
 800e2fe:	2000      	movs	r0, #0
 800e300:	f7f2 f842 	bl	8000388 <__aeabi_dsub>
 800e304:	4622      	mov	r2, r4
 800e306:	4680      	mov	r8, r0
 800e308:	4689      	mov	r9, r1
 800e30a:	462b      	mov	r3, r5
 800e30c:	4650      	mov	r0, sl
 800e30e:	4659      	mov	r1, fp
 800e310:	f7f2 f83a 	bl	8000388 <__aeabi_dsub>
 800e314:	4632      	mov	r2, r6
 800e316:	463b      	mov	r3, r7
 800e318:	f7f2 f836 	bl	8000388 <__aeabi_dsub>
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	4640      	mov	r0, r8
 800e322:	4649      	mov	r1, r9
 800e324:	e7da      	b.n	800e2dc <__kernel_cos+0xec>
 800e326:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e360 <__kernel_cos+0x170>
 800e32a:	e7db      	b.n	800e2e4 <__kernel_cos+0xf4>
 800e32c:	f3af 8000 	nop.w
 800e330:	be8838d4 	.word	0xbe8838d4
 800e334:	bda8fae9 	.word	0xbda8fae9
 800e338:	bdb4b1c4 	.word	0xbdb4b1c4
 800e33c:	3e21ee9e 	.word	0x3e21ee9e
 800e340:	809c52ad 	.word	0x809c52ad
 800e344:	3e927e4f 	.word	0x3e927e4f
 800e348:	19cb1590 	.word	0x19cb1590
 800e34c:	3efa01a0 	.word	0x3efa01a0
 800e350:	16c15177 	.word	0x16c15177
 800e354:	3f56c16c 	.word	0x3f56c16c
 800e358:	5555554c 	.word	0x5555554c
 800e35c:	3fa55555 	.word	0x3fa55555
 800e360:	00000000 	.word	0x00000000
 800e364:	3ff00000 	.word	0x3ff00000
 800e368:	3fe00000 	.word	0x3fe00000
 800e36c:	3fd33332 	.word	0x3fd33332
 800e370:	3ff00000 	.word	0x3ff00000
 800e374:	3fe90000 	.word	0x3fe90000
 800e378:	3fd20000 	.word	0x3fd20000
 800e37c:	00000000 	.word	0x00000000

0800e380 <__kernel_sin>:
 800e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e384:	ed2d 8b04 	vpush	{d8-d9}
 800e388:	eeb0 8a41 	vmov.f32	s16, s2
 800e38c:	eef0 8a61 	vmov.f32	s17, s3
 800e390:	ec55 4b10 	vmov	r4, r5, d0
 800e394:	b083      	sub	sp, #12
 800e396:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e39a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e39e:	9001      	str	r0, [sp, #4]
 800e3a0:	da06      	bge.n	800e3b0 <__kernel_sin+0x30>
 800e3a2:	ee10 0a10 	vmov	r0, s0
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	f7f2 fc56 	bl	8000c58 <__aeabi_d2iz>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d051      	beq.n	800e454 <__kernel_sin+0xd4>
 800e3b0:	4622      	mov	r2, r4
 800e3b2:	462b      	mov	r3, r5
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	4629      	mov	r1, r5
 800e3b8:	f7f2 f99e 	bl	80006f8 <__aeabi_dmul>
 800e3bc:	4682      	mov	sl, r0
 800e3be:	468b      	mov	fp, r1
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	f7f2 f996 	bl	80006f8 <__aeabi_dmul>
 800e3cc:	a341      	add	r3, pc, #260	; (adr r3, 800e4d4 <__kernel_sin+0x154>)
 800e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	4689      	mov	r9, r1
 800e3d6:	4650      	mov	r0, sl
 800e3d8:	4659      	mov	r1, fp
 800e3da:	f7f2 f98d 	bl	80006f8 <__aeabi_dmul>
 800e3de:	a33f      	add	r3, pc, #252	; (adr r3, 800e4dc <__kernel_sin+0x15c>)
 800e3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e4:	f7f1 ffd0 	bl	8000388 <__aeabi_dsub>
 800e3e8:	4652      	mov	r2, sl
 800e3ea:	465b      	mov	r3, fp
 800e3ec:	f7f2 f984 	bl	80006f8 <__aeabi_dmul>
 800e3f0:	a33c      	add	r3, pc, #240	; (adr r3, 800e4e4 <__kernel_sin+0x164>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	f7f1 ffc9 	bl	800038c <__adddf3>
 800e3fa:	4652      	mov	r2, sl
 800e3fc:	465b      	mov	r3, fp
 800e3fe:	f7f2 f97b 	bl	80006f8 <__aeabi_dmul>
 800e402:	a33a      	add	r3, pc, #232	; (adr r3, 800e4ec <__kernel_sin+0x16c>)
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	f7f1 ffbe 	bl	8000388 <__aeabi_dsub>
 800e40c:	4652      	mov	r2, sl
 800e40e:	465b      	mov	r3, fp
 800e410:	f7f2 f972 	bl	80006f8 <__aeabi_dmul>
 800e414:	a337      	add	r3, pc, #220	; (adr r3, 800e4f4 <__kernel_sin+0x174>)
 800e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41a:	f7f1 ffb7 	bl	800038c <__adddf3>
 800e41e:	9b01      	ldr	r3, [sp, #4]
 800e420:	4606      	mov	r6, r0
 800e422:	460f      	mov	r7, r1
 800e424:	b9eb      	cbnz	r3, 800e462 <__kernel_sin+0xe2>
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	4650      	mov	r0, sl
 800e42c:	4659      	mov	r1, fp
 800e42e:	f7f2 f963 	bl	80006f8 <__aeabi_dmul>
 800e432:	a325      	add	r3, pc, #148	; (adr r3, 800e4c8 <__kernel_sin+0x148>)
 800e434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e438:	f7f1 ffa6 	bl	8000388 <__aeabi_dsub>
 800e43c:	4642      	mov	r2, r8
 800e43e:	464b      	mov	r3, r9
 800e440:	f7f2 f95a 	bl	80006f8 <__aeabi_dmul>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	4620      	mov	r0, r4
 800e44a:	4629      	mov	r1, r5
 800e44c:	f7f1 ff9e 	bl	800038c <__adddf3>
 800e450:	4604      	mov	r4, r0
 800e452:	460d      	mov	r5, r1
 800e454:	ec45 4b10 	vmov	d0, r4, r5
 800e458:	b003      	add	sp, #12
 800e45a:	ecbd 8b04 	vpop	{d8-d9}
 800e45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e462:	4b1b      	ldr	r3, [pc, #108]	; (800e4d0 <__kernel_sin+0x150>)
 800e464:	ec51 0b18 	vmov	r0, r1, d8
 800e468:	2200      	movs	r2, #0
 800e46a:	f7f2 f945 	bl	80006f8 <__aeabi_dmul>
 800e46e:	4632      	mov	r2, r6
 800e470:	ec41 0b19 	vmov	d9, r0, r1
 800e474:	463b      	mov	r3, r7
 800e476:	4640      	mov	r0, r8
 800e478:	4649      	mov	r1, r9
 800e47a:	f7f2 f93d 	bl	80006f8 <__aeabi_dmul>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	ec51 0b19 	vmov	r0, r1, d9
 800e486:	f7f1 ff7f 	bl	8000388 <__aeabi_dsub>
 800e48a:	4652      	mov	r2, sl
 800e48c:	465b      	mov	r3, fp
 800e48e:	f7f2 f933 	bl	80006f8 <__aeabi_dmul>
 800e492:	ec53 2b18 	vmov	r2, r3, d8
 800e496:	f7f1 ff77 	bl	8000388 <__aeabi_dsub>
 800e49a:	a30b      	add	r3, pc, #44	; (adr r3, 800e4c8 <__kernel_sin+0x148>)
 800e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a0:	4606      	mov	r6, r0
 800e4a2:	460f      	mov	r7, r1
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	4649      	mov	r1, r9
 800e4a8:	f7f2 f926 	bl	80006f8 <__aeabi_dmul>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	4639      	mov	r1, r7
 800e4b4:	f7f1 ff6a 	bl	800038c <__adddf3>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	4620      	mov	r0, r4
 800e4be:	4629      	mov	r1, r5
 800e4c0:	f7f1 ff62 	bl	8000388 <__aeabi_dsub>
 800e4c4:	e7c4      	b.n	800e450 <__kernel_sin+0xd0>
 800e4c6:	bf00      	nop
 800e4c8:	55555549 	.word	0x55555549
 800e4cc:	3fc55555 	.word	0x3fc55555
 800e4d0:	3fe00000 	.word	0x3fe00000
 800e4d4:	5acfd57c 	.word	0x5acfd57c
 800e4d8:	3de5d93a 	.word	0x3de5d93a
 800e4dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800e4e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e4e4:	57b1fe7d 	.word	0x57b1fe7d
 800e4e8:	3ec71de3 	.word	0x3ec71de3
 800e4ec:	19c161d5 	.word	0x19c161d5
 800e4f0:	3f2a01a0 	.word	0x3f2a01a0
 800e4f4:	1110f8a6 	.word	0x1110f8a6
 800e4f8:	3f811111 	.word	0x3f811111
 800e4fc:	00000000 	.word	0x00000000

0800e500 <__ieee754_log>:
 800e500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	ec51 0b10 	vmov	r0, r1, d0
 800e508:	ed2d 8b04 	vpush	{d8-d9}
 800e50c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e510:	b083      	sub	sp, #12
 800e512:	460d      	mov	r5, r1
 800e514:	da29      	bge.n	800e56a <__ieee754_log+0x6a>
 800e516:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e51a:	4303      	orrs	r3, r0
 800e51c:	ee10 2a10 	vmov	r2, s0
 800e520:	d10c      	bne.n	800e53c <__ieee754_log+0x3c>
 800e522:	49cf      	ldr	r1, [pc, #828]	; (800e860 <__ieee754_log+0x360>)
 800e524:	2200      	movs	r2, #0
 800e526:	2300      	movs	r3, #0
 800e528:	2000      	movs	r0, #0
 800e52a:	f7f2 fa0f 	bl	800094c <__aeabi_ddiv>
 800e52e:	ec41 0b10 	vmov	d0, r0, r1
 800e532:	b003      	add	sp, #12
 800e534:	ecbd 8b04 	vpop	{d8-d9}
 800e538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53c:	2900      	cmp	r1, #0
 800e53e:	da05      	bge.n	800e54c <__ieee754_log+0x4c>
 800e540:	460b      	mov	r3, r1
 800e542:	f7f1 ff21 	bl	8000388 <__aeabi_dsub>
 800e546:	2200      	movs	r2, #0
 800e548:	2300      	movs	r3, #0
 800e54a:	e7ee      	b.n	800e52a <__ieee754_log+0x2a>
 800e54c:	4bc5      	ldr	r3, [pc, #788]	; (800e864 <__ieee754_log+0x364>)
 800e54e:	2200      	movs	r2, #0
 800e550:	f7f2 f8d2 	bl	80006f8 <__aeabi_dmul>
 800e554:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800e558:	460d      	mov	r5, r1
 800e55a:	4ac3      	ldr	r2, [pc, #780]	; (800e868 <__ieee754_log+0x368>)
 800e55c:	4295      	cmp	r5, r2
 800e55e:	dd06      	ble.n	800e56e <__ieee754_log+0x6e>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	f7f1 ff12 	bl	800038c <__adddf3>
 800e568:	e7e1      	b.n	800e52e <__ieee754_log+0x2e>
 800e56a:	2300      	movs	r3, #0
 800e56c:	e7f5      	b.n	800e55a <__ieee754_log+0x5a>
 800e56e:	152c      	asrs	r4, r5, #20
 800e570:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e574:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e578:	441c      	add	r4, r3
 800e57a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800e57e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e586:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e58a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e58e:	ea42 0105 	orr.w	r1, r2, r5
 800e592:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e596:	2200      	movs	r2, #0
 800e598:	4bb4      	ldr	r3, [pc, #720]	; (800e86c <__ieee754_log+0x36c>)
 800e59a:	f7f1 fef5 	bl	8000388 <__aeabi_dsub>
 800e59e:	1cab      	adds	r3, r5, #2
 800e5a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5a4:	2b02      	cmp	r3, #2
 800e5a6:	4682      	mov	sl, r0
 800e5a8:	468b      	mov	fp, r1
 800e5aa:	f04f 0200 	mov.w	r2, #0
 800e5ae:	dc53      	bgt.n	800e658 <__ieee754_log+0x158>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f7f2 fb09 	bl	8000bc8 <__aeabi_dcmpeq>
 800e5b6:	b1d0      	cbz	r0, 800e5ee <__ieee754_log+0xee>
 800e5b8:	2c00      	cmp	r4, #0
 800e5ba:	f000 8122 	beq.w	800e802 <__ieee754_log+0x302>
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f7f2 f830 	bl	8000624 <__aeabi_i2d>
 800e5c4:	a390      	add	r3, pc, #576	; (adr r3, 800e808 <__ieee754_log+0x308>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	460f      	mov	r7, r1
 800e5ce:	f7f2 f893 	bl	80006f8 <__aeabi_dmul>
 800e5d2:	a38f      	add	r3, pc, #572	; (adr r3, 800e810 <__ieee754_log+0x310>)
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	4604      	mov	r4, r0
 800e5da:	460d      	mov	r5, r1
 800e5dc:	4630      	mov	r0, r6
 800e5de:	4639      	mov	r1, r7
 800e5e0:	f7f2 f88a 	bl	80006f8 <__aeabi_dmul>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	e7ba      	b.n	800e564 <__ieee754_log+0x64>
 800e5ee:	a38a      	add	r3, pc, #552	; (adr r3, 800e818 <__ieee754_log+0x318>)
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	4650      	mov	r0, sl
 800e5f6:	4659      	mov	r1, fp
 800e5f8:	f7f2 f87e 	bl	80006f8 <__aeabi_dmul>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	2000      	movs	r0, #0
 800e602:	499b      	ldr	r1, [pc, #620]	; (800e870 <__ieee754_log+0x370>)
 800e604:	f7f1 fec0 	bl	8000388 <__aeabi_dsub>
 800e608:	4652      	mov	r2, sl
 800e60a:	4606      	mov	r6, r0
 800e60c:	460f      	mov	r7, r1
 800e60e:	465b      	mov	r3, fp
 800e610:	4650      	mov	r0, sl
 800e612:	4659      	mov	r1, fp
 800e614:	f7f2 f870 	bl	80006f8 <__aeabi_dmul>
 800e618:	4602      	mov	r2, r0
 800e61a:	460b      	mov	r3, r1
 800e61c:	4630      	mov	r0, r6
 800e61e:	4639      	mov	r1, r7
 800e620:	f7f2 f86a 	bl	80006f8 <__aeabi_dmul>
 800e624:	4606      	mov	r6, r0
 800e626:	460f      	mov	r7, r1
 800e628:	b914      	cbnz	r4, 800e630 <__ieee754_log+0x130>
 800e62a:	4632      	mov	r2, r6
 800e62c:	463b      	mov	r3, r7
 800e62e:	e0a2      	b.n	800e776 <__ieee754_log+0x276>
 800e630:	4620      	mov	r0, r4
 800e632:	f7f1 fff7 	bl	8000624 <__aeabi_i2d>
 800e636:	a374      	add	r3, pc, #464	; (adr r3, 800e808 <__ieee754_log+0x308>)
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	4680      	mov	r8, r0
 800e63e:	4689      	mov	r9, r1
 800e640:	f7f2 f85a 	bl	80006f8 <__aeabi_dmul>
 800e644:	a372      	add	r3, pc, #456	; (adr r3, 800e810 <__ieee754_log+0x310>)
 800e646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64a:	4604      	mov	r4, r0
 800e64c:	460d      	mov	r5, r1
 800e64e:	4640      	mov	r0, r8
 800e650:	4649      	mov	r1, r9
 800e652:	f7f2 f851 	bl	80006f8 <__aeabi_dmul>
 800e656:	e0a7      	b.n	800e7a8 <__ieee754_log+0x2a8>
 800e658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e65c:	f7f1 fe96 	bl	800038c <__adddf3>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	4650      	mov	r0, sl
 800e666:	4659      	mov	r1, fp
 800e668:	f7f2 f970 	bl	800094c <__aeabi_ddiv>
 800e66c:	ec41 0b18 	vmov	d8, r0, r1
 800e670:	4620      	mov	r0, r4
 800e672:	f7f1 ffd7 	bl	8000624 <__aeabi_i2d>
 800e676:	ec53 2b18 	vmov	r2, r3, d8
 800e67a:	ec41 0b19 	vmov	d9, r0, r1
 800e67e:	ec51 0b18 	vmov	r0, r1, d8
 800e682:	f7f2 f839 	bl	80006f8 <__aeabi_dmul>
 800e686:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e68a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e68e:	9301      	str	r3, [sp, #4]
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	4680      	mov	r8, r0
 800e696:	4689      	mov	r9, r1
 800e698:	f7f2 f82e 	bl	80006f8 <__aeabi_dmul>
 800e69c:	a360      	add	r3, pc, #384	; (adr r3, 800e820 <__ieee754_log+0x320>)
 800e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	460f      	mov	r7, r1
 800e6a6:	f7f2 f827 	bl	80006f8 <__aeabi_dmul>
 800e6aa:	a35f      	add	r3, pc, #380	; (adr r3, 800e828 <__ieee754_log+0x328>)
 800e6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b0:	f7f1 fe6c 	bl	800038c <__adddf3>
 800e6b4:	4632      	mov	r2, r6
 800e6b6:	463b      	mov	r3, r7
 800e6b8:	f7f2 f81e 	bl	80006f8 <__aeabi_dmul>
 800e6bc:	a35c      	add	r3, pc, #368	; (adr r3, 800e830 <__ieee754_log+0x330>)
 800e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c2:	f7f1 fe63 	bl	800038c <__adddf3>
 800e6c6:	4632      	mov	r2, r6
 800e6c8:	463b      	mov	r3, r7
 800e6ca:	f7f2 f815 	bl	80006f8 <__aeabi_dmul>
 800e6ce:	a35a      	add	r3, pc, #360	; (adr r3, 800e838 <__ieee754_log+0x338>)
 800e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d4:	f7f1 fe5a 	bl	800038c <__adddf3>
 800e6d8:	4642      	mov	r2, r8
 800e6da:	464b      	mov	r3, r9
 800e6dc:	f7f2 f80c 	bl	80006f8 <__aeabi_dmul>
 800e6e0:	a357      	add	r3, pc, #348	; (adr r3, 800e840 <__ieee754_log+0x340>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	4680      	mov	r8, r0
 800e6e8:	4689      	mov	r9, r1
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	4639      	mov	r1, r7
 800e6ee:	f7f2 f803 	bl	80006f8 <__aeabi_dmul>
 800e6f2:	a355      	add	r3, pc, #340	; (adr r3, 800e848 <__ieee754_log+0x348>)
 800e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f8:	f7f1 fe48 	bl	800038c <__adddf3>
 800e6fc:	4632      	mov	r2, r6
 800e6fe:	463b      	mov	r3, r7
 800e700:	f7f1 fffa 	bl	80006f8 <__aeabi_dmul>
 800e704:	a352      	add	r3, pc, #328	; (adr r3, 800e850 <__ieee754_log+0x350>)
 800e706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70a:	f7f1 fe3f 	bl	800038c <__adddf3>
 800e70e:	4632      	mov	r2, r6
 800e710:	463b      	mov	r3, r7
 800e712:	f7f1 fff1 	bl	80006f8 <__aeabi_dmul>
 800e716:	460b      	mov	r3, r1
 800e718:	4602      	mov	r2, r0
 800e71a:	4649      	mov	r1, r9
 800e71c:	4640      	mov	r0, r8
 800e71e:	f7f1 fe35 	bl	800038c <__adddf3>
 800e722:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e726:	9b01      	ldr	r3, [sp, #4]
 800e728:	3551      	adds	r5, #81	; 0x51
 800e72a:	431d      	orrs	r5, r3
 800e72c:	2d00      	cmp	r5, #0
 800e72e:	4680      	mov	r8, r0
 800e730:	4689      	mov	r9, r1
 800e732:	dd48      	ble.n	800e7c6 <__ieee754_log+0x2c6>
 800e734:	4b4e      	ldr	r3, [pc, #312]	; (800e870 <__ieee754_log+0x370>)
 800e736:	2200      	movs	r2, #0
 800e738:	4650      	mov	r0, sl
 800e73a:	4659      	mov	r1, fp
 800e73c:	f7f1 ffdc 	bl	80006f8 <__aeabi_dmul>
 800e740:	4652      	mov	r2, sl
 800e742:	465b      	mov	r3, fp
 800e744:	f7f1 ffd8 	bl	80006f8 <__aeabi_dmul>
 800e748:	4602      	mov	r2, r0
 800e74a:	460b      	mov	r3, r1
 800e74c:	4606      	mov	r6, r0
 800e74e:	460f      	mov	r7, r1
 800e750:	4640      	mov	r0, r8
 800e752:	4649      	mov	r1, r9
 800e754:	f7f1 fe1a 	bl	800038c <__adddf3>
 800e758:	ec53 2b18 	vmov	r2, r3, d8
 800e75c:	f7f1 ffcc 	bl	80006f8 <__aeabi_dmul>
 800e760:	4680      	mov	r8, r0
 800e762:	4689      	mov	r9, r1
 800e764:	b964      	cbnz	r4, 800e780 <__ieee754_log+0x280>
 800e766:	4602      	mov	r2, r0
 800e768:	460b      	mov	r3, r1
 800e76a:	4630      	mov	r0, r6
 800e76c:	4639      	mov	r1, r7
 800e76e:	f7f1 fe0b 	bl	8000388 <__aeabi_dsub>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	4650      	mov	r0, sl
 800e778:	4659      	mov	r1, fp
 800e77a:	f7f1 fe05 	bl	8000388 <__aeabi_dsub>
 800e77e:	e6d6      	b.n	800e52e <__ieee754_log+0x2e>
 800e780:	a321      	add	r3, pc, #132	; (adr r3, 800e808 <__ieee754_log+0x308>)
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	ec51 0b19 	vmov	r0, r1, d9
 800e78a:	f7f1 ffb5 	bl	80006f8 <__aeabi_dmul>
 800e78e:	a320      	add	r3, pc, #128	; (adr r3, 800e810 <__ieee754_log+0x310>)
 800e790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e794:	4604      	mov	r4, r0
 800e796:	460d      	mov	r5, r1
 800e798:	ec51 0b19 	vmov	r0, r1, d9
 800e79c:	f7f1 ffac 	bl	80006f8 <__aeabi_dmul>
 800e7a0:	4642      	mov	r2, r8
 800e7a2:	464b      	mov	r3, r9
 800e7a4:	f7f1 fdf2 	bl	800038c <__adddf3>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	4639      	mov	r1, r7
 800e7b0:	f7f1 fdea 	bl	8000388 <__aeabi_dsub>
 800e7b4:	4652      	mov	r2, sl
 800e7b6:	465b      	mov	r3, fp
 800e7b8:	f7f1 fde6 	bl	8000388 <__aeabi_dsub>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	e7d9      	b.n	800e77a <__ieee754_log+0x27a>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	4650      	mov	r0, sl
 800e7cc:	4659      	mov	r1, fp
 800e7ce:	f7f1 fddb 	bl	8000388 <__aeabi_dsub>
 800e7d2:	ec53 2b18 	vmov	r2, r3, d8
 800e7d6:	f7f1 ff8f 	bl	80006f8 <__aeabi_dmul>
 800e7da:	4606      	mov	r6, r0
 800e7dc:	460f      	mov	r7, r1
 800e7de:	2c00      	cmp	r4, #0
 800e7e0:	f43f af23 	beq.w	800e62a <__ieee754_log+0x12a>
 800e7e4:	a308      	add	r3, pc, #32	; (adr r3, 800e808 <__ieee754_log+0x308>)
 800e7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ea:	ec51 0b19 	vmov	r0, r1, d9
 800e7ee:	f7f1 ff83 	bl	80006f8 <__aeabi_dmul>
 800e7f2:	a307      	add	r3, pc, #28	; (adr r3, 800e810 <__ieee754_log+0x310>)
 800e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	ec51 0b19 	vmov	r0, r1, d9
 800e800:	e727      	b.n	800e652 <__ieee754_log+0x152>
 800e802:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e858 <__ieee754_log+0x358>
 800e806:	e694      	b.n	800e532 <__ieee754_log+0x32>
 800e808:	fee00000 	.word	0xfee00000
 800e80c:	3fe62e42 	.word	0x3fe62e42
 800e810:	35793c76 	.word	0x35793c76
 800e814:	3dea39ef 	.word	0x3dea39ef
 800e818:	55555555 	.word	0x55555555
 800e81c:	3fd55555 	.word	0x3fd55555
 800e820:	df3e5244 	.word	0xdf3e5244
 800e824:	3fc2f112 	.word	0x3fc2f112
 800e828:	96cb03de 	.word	0x96cb03de
 800e82c:	3fc74664 	.word	0x3fc74664
 800e830:	94229359 	.word	0x94229359
 800e834:	3fd24924 	.word	0x3fd24924
 800e838:	55555593 	.word	0x55555593
 800e83c:	3fe55555 	.word	0x3fe55555
 800e840:	d078c69f 	.word	0xd078c69f
 800e844:	3fc39a09 	.word	0x3fc39a09
 800e848:	1d8e78af 	.word	0x1d8e78af
 800e84c:	3fcc71c5 	.word	0x3fcc71c5
 800e850:	9997fa04 	.word	0x9997fa04
 800e854:	3fd99999 	.word	0x3fd99999
	...
 800e860:	c3500000 	.word	0xc3500000
 800e864:	43500000 	.word	0x43500000
 800e868:	7fefffff 	.word	0x7fefffff
 800e86c:	3ff00000 	.word	0x3ff00000
 800e870:	3fe00000 	.word	0x3fe00000
 800e874:	00000000 	.word	0x00000000

0800e878 <__ieee754_pow>:
 800e878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87c:	ed2d 8b06 	vpush	{d8-d10}
 800e880:	b089      	sub	sp, #36	; 0x24
 800e882:	ed8d 1b00 	vstr	d1, [sp]
 800e886:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e88a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e88e:	ea58 0102 	orrs.w	r1, r8, r2
 800e892:	ec57 6b10 	vmov	r6, r7, d0
 800e896:	d115      	bne.n	800e8c4 <__ieee754_pow+0x4c>
 800e898:	19b3      	adds	r3, r6, r6
 800e89a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e89e:	4152      	adcs	r2, r2
 800e8a0:	4299      	cmp	r1, r3
 800e8a2:	4b89      	ldr	r3, [pc, #548]	; (800eac8 <__ieee754_pow+0x250>)
 800e8a4:	4193      	sbcs	r3, r2
 800e8a6:	f080 84d1 	bcs.w	800f24c <__ieee754_pow+0x9d4>
 800e8aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	4639      	mov	r1, r7
 800e8b2:	f7f1 fd6b 	bl	800038c <__adddf3>
 800e8b6:	ec41 0b10 	vmov	d0, r0, r1
 800e8ba:	b009      	add	sp, #36	; 0x24
 800e8bc:	ecbd 8b06 	vpop	{d8-d10}
 800e8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c4:	4b81      	ldr	r3, [pc, #516]	; (800eacc <__ieee754_pow+0x254>)
 800e8c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e8ca:	429c      	cmp	r4, r3
 800e8cc:	ee10 aa10 	vmov	sl, s0
 800e8d0:	463d      	mov	r5, r7
 800e8d2:	dc06      	bgt.n	800e8e2 <__ieee754_pow+0x6a>
 800e8d4:	d101      	bne.n	800e8da <__ieee754_pow+0x62>
 800e8d6:	2e00      	cmp	r6, #0
 800e8d8:	d1e7      	bne.n	800e8aa <__ieee754_pow+0x32>
 800e8da:	4598      	cmp	r8, r3
 800e8dc:	dc01      	bgt.n	800e8e2 <__ieee754_pow+0x6a>
 800e8de:	d10f      	bne.n	800e900 <__ieee754_pow+0x88>
 800e8e0:	b172      	cbz	r2, 800e900 <__ieee754_pow+0x88>
 800e8e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e8e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e8ea:	ea55 050a 	orrs.w	r5, r5, sl
 800e8ee:	d1dc      	bne.n	800e8aa <__ieee754_pow+0x32>
 800e8f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e8f4:	18db      	adds	r3, r3, r3
 800e8f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e8fa:	4152      	adcs	r2, r2
 800e8fc:	429d      	cmp	r5, r3
 800e8fe:	e7d0      	b.n	800e8a2 <__ieee754_pow+0x2a>
 800e900:	2d00      	cmp	r5, #0
 800e902:	da3b      	bge.n	800e97c <__ieee754_pow+0x104>
 800e904:	4b72      	ldr	r3, [pc, #456]	; (800ead0 <__ieee754_pow+0x258>)
 800e906:	4598      	cmp	r8, r3
 800e908:	dc51      	bgt.n	800e9ae <__ieee754_pow+0x136>
 800e90a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e90e:	4598      	cmp	r8, r3
 800e910:	f340 84ab 	ble.w	800f26a <__ieee754_pow+0x9f2>
 800e914:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e918:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e91c:	2b14      	cmp	r3, #20
 800e91e:	dd0f      	ble.n	800e940 <__ieee754_pow+0xc8>
 800e920:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e924:	fa22 f103 	lsr.w	r1, r2, r3
 800e928:	fa01 f303 	lsl.w	r3, r1, r3
 800e92c:	4293      	cmp	r3, r2
 800e92e:	f040 849c 	bne.w	800f26a <__ieee754_pow+0x9f2>
 800e932:	f001 0101 	and.w	r1, r1, #1
 800e936:	f1c1 0302 	rsb	r3, r1, #2
 800e93a:	9304      	str	r3, [sp, #16]
 800e93c:	b182      	cbz	r2, 800e960 <__ieee754_pow+0xe8>
 800e93e:	e05f      	b.n	800ea00 <__ieee754_pow+0x188>
 800e940:	2a00      	cmp	r2, #0
 800e942:	d15b      	bne.n	800e9fc <__ieee754_pow+0x184>
 800e944:	f1c3 0314 	rsb	r3, r3, #20
 800e948:	fa48 f103 	asr.w	r1, r8, r3
 800e94c:	fa01 f303 	lsl.w	r3, r1, r3
 800e950:	4543      	cmp	r3, r8
 800e952:	f040 8487 	bne.w	800f264 <__ieee754_pow+0x9ec>
 800e956:	f001 0101 	and.w	r1, r1, #1
 800e95a:	f1c1 0302 	rsb	r3, r1, #2
 800e95e:	9304      	str	r3, [sp, #16]
 800e960:	4b5c      	ldr	r3, [pc, #368]	; (800ead4 <__ieee754_pow+0x25c>)
 800e962:	4598      	cmp	r8, r3
 800e964:	d132      	bne.n	800e9cc <__ieee754_pow+0x154>
 800e966:	f1b9 0f00 	cmp.w	r9, #0
 800e96a:	f280 8477 	bge.w	800f25c <__ieee754_pow+0x9e4>
 800e96e:	4959      	ldr	r1, [pc, #356]	; (800ead4 <__ieee754_pow+0x25c>)
 800e970:	4632      	mov	r2, r6
 800e972:	463b      	mov	r3, r7
 800e974:	2000      	movs	r0, #0
 800e976:	f7f1 ffe9 	bl	800094c <__aeabi_ddiv>
 800e97a:	e79c      	b.n	800e8b6 <__ieee754_pow+0x3e>
 800e97c:	2300      	movs	r3, #0
 800e97e:	9304      	str	r3, [sp, #16]
 800e980:	2a00      	cmp	r2, #0
 800e982:	d13d      	bne.n	800ea00 <__ieee754_pow+0x188>
 800e984:	4b51      	ldr	r3, [pc, #324]	; (800eacc <__ieee754_pow+0x254>)
 800e986:	4598      	cmp	r8, r3
 800e988:	d1ea      	bne.n	800e960 <__ieee754_pow+0xe8>
 800e98a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e98e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e992:	ea53 030a 	orrs.w	r3, r3, sl
 800e996:	f000 8459 	beq.w	800f24c <__ieee754_pow+0x9d4>
 800e99a:	4b4f      	ldr	r3, [pc, #316]	; (800ead8 <__ieee754_pow+0x260>)
 800e99c:	429c      	cmp	r4, r3
 800e99e:	dd08      	ble.n	800e9b2 <__ieee754_pow+0x13a>
 800e9a0:	f1b9 0f00 	cmp.w	r9, #0
 800e9a4:	f2c0 8456 	blt.w	800f254 <__ieee754_pow+0x9dc>
 800e9a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9ac:	e783      	b.n	800e8b6 <__ieee754_pow+0x3e>
 800e9ae:	2302      	movs	r3, #2
 800e9b0:	e7e5      	b.n	800e97e <__ieee754_pow+0x106>
 800e9b2:	f1b9 0f00 	cmp.w	r9, #0
 800e9b6:	f04f 0000 	mov.w	r0, #0
 800e9ba:	f04f 0100 	mov.w	r1, #0
 800e9be:	f6bf af7a 	bge.w	800e8b6 <__ieee754_pow+0x3e>
 800e9c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e9c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e9ca:	e774      	b.n	800e8b6 <__ieee754_pow+0x3e>
 800e9cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e9d0:	d106      	bne.n	800e9e0 <__ieee754_pow+0x168>
 800e9d2:	4632      	mov	r2, r6
 800e9d4:	463b      	mov	r3, r7
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	4639      	mov	r1, r7
 800e9da:	f7f1 fe8d 	bl	80006f8 <__aeabi_dmul>
 800e9de:	e76a      	b.n	800e8b6 <__ieee754_pow+0x3e>
 800e9e0:	4b3e      	ldr	r3, [pc, #248]	; (800eadc <__ieee754_pow+0x264>)
 800e9e2:	4599      	cmp	r9, r3
 800e9e4:	d10c      	bne.n	800ea00 <__ieee754_pow+0x188>
 800e9e6:	2d00      	cmp	r5, #0
 800e9e8:	db0a      	blt.n	800ea00 <__ieee754_pow+0x188>
 800e9ea:	ec47 6b10 	vmov	d0, r6, r7
 800e9ee:	b009      	add	sp, #36	; 0x24
 800e9f0:	ecbd 8b06 	vpop	{d8-d10}
 800e9f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f8:	f000 bfec 	b.w	800f9d4 <__ieee754_sqrt>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	9304      	str	r3, [sp, #16]
 800ea00:	ec47 6b10 	vmov	d0, r6, r7
 800ea04:	f000 fe6a 	bl	800f6dc <fabs>
 800ea08:	ec51 0b10 	vmov	r0, r1, d0
 800ea0c:	f1ba 0f00 	cmp.w	sl, #0
 800ea10:	d129      	bne.n	800ea66 <__ieee754_pow+0x1ee>
 800ea12:	b124      	cbz	r4, 800ea1e <__ieee754_pow+0x1a6>
 800ea14:	4b2f      	ldr	r3, [pc, #188]	; (800ead4 <__ieee754_pow+0x25c>)
 800ea16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d123      	bne.n	800ea66 <__ieee754_pow+0x1ee>
 800ea1e:	f1b9 0f00 	cmp.w	r9, #0
 800ea22:	da05      	bge.n	800ea30 <__ieee754_pow+0x1b8>
 800ea24:	4602      	mov	r2, r0
 800ea26:	460b      	mov	r3, r1
 800ea28:	2000      	movs	r0, #0
 800ea2a:	492a      	ldr	r1, [pc, #168]	; (800ead4 <__ieee754_pow+0x25c>)
 800ea2c:	f7f1 ff8e 	bl	800094c <__aeabi_ddiv>
 800ea30:	2d00      	cmp	r5, #0
 800ea32:	f6bf af40 	bge.w	800e8b6 <__ieee754_pow+0x3e>
 800ea36:	9b04      	ldr	r3, [sp, #16]
 800ea38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ea3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ea40:	431c      	orrs	r4, r3
 800ea42:	d108      	bne.n	800ea56 <__ieee754_pow+0x1de>
 800ea44:	4602      	mov	r2, r0
 800ea46:	460b      	mov	r3, r1
 800ea48:	4610      	mov	r0, r2
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	f7f1 fc9c 	bl	8000388 <__aeabi_dsub>
 800ea50:	4602      	mov	r2, r0
 800ea52:	460b      	mov	r3, r1
 800ea54:	e78f      	b.n	800e976 <__ieee754_pow+0xfe>
 800ea56:	9b04      	ldr	r3, [sp, #16]
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	f47f af2c 	bne.w	800e8b6 <__ieee754_pow+0x3e>
 800ea5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea62:	4619      	mov	r1, r3
 800ea64:	e727      	b.n	800e8b6 <__ieee754_pow+0x3e>
 800ea66:	0feb      	lsrs	r3, r5, #31
 800ea68:	3b01      	subs	r3, #1
 800ea6a:	9306      	str	r3, [sp, #24]
 800ea6c:	9a06      	ldr	r2, [sp, #24]
 800ea6e:	9b04      	ldr	r3, [sp, #16]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	d102      	bne.n	800ea7a <__ieee754_pow+0x202>
 800ea74:	4632      	mov	r2, r6
 800ea76:	463b      	mov	r3, r7
 800ea78:	e7e6      	b.n	800ea48 <__ieee754_pow+0x1d0>
 800ea7a:	4b19      	ldr	r3, [pc, #100]	; (800eae0 <__ieee754_pow+0x268>)
 800ea7c:	4598      	cmp	r8, r3
 800ea7e:	f340 80fb 	ble.w	800ec78 <__ieee754_pow+0x400>
 800ea82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ea86:	4598      	cmp	r8, r3
 800ea88:	4b13      	ldr	r3, [pc, #76]	; (800ead8 <__ieee754_pow+0x260>)
 800ea8a:	dd0c      	ble.n	800eaa6 <__ieee754_pow+0x22e>
 800ea8c:	429c      	cmp	r4, r3
 800ea8e:	dc0f      	bgt.n	800eab0 <__ieee754_pow+0x238>
 800ea90:	f1b9 0f00 	cmp.w	r9, #0
 800ea94:	da0f      	bge.n	800eab6 <__ieee754_pow+0x23e>
 800ea96:	2000      	movs	r0, #0
 800ea98:	b009      	add	sp, #36	; 0x24
 800ea9a:	ecbd 8b06 	vpop	{d8-d10}
 800ea9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa2:	f7ff baec 	b.w	800e07e <__math_oflow>
 800eaa6:	429c      	cmp	r4, r3
 800eaa8:	dbf2      	blt.n	800ea90 <__ieee754_pow+0x218>
 800eaaa:	4b0a      	ldr	r3, [pc, #40]	; (800ead4 <__ieee754_pow+0x25c>)
 800eaac:	429c      	cmp	r4, r3
 800eaae:	dd19      	ble.n	800eae4 <__ieee754_pow+0x26c>
 800eab0:	f1b9 0f00 	cmp.w	r9, #0
 800eab4:	dcef      	bgt.n	800ea96 <__ieee754_pow+0x21e>
 800eab6:	2000      	movs	r0, #0
 800eab8:	b009      	add	sp, #36	; 0x24
 800eaba:	ecbd 8b06 	vpop	{d8-d10}
 800eabe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac2:	f7ff bad3 	b.w	800e06c <__math_uflow>
 800eac6:	bf00      	nop
 800eac8:	fff00000 	.word	0xfff00000
 800eacc:	7ff00000 	.word	0x7ff00000
 800ead0:	433fffff 	.word	0x433fffff
 800ead4:	3ff00000 	.word	0x3ff00000
 800ead8:	3fefffff 	.word	0x3fefffff
 800eadc:	3fe00000 	.word	0x3fe00000
 800eae0:	41e00000 	.word	0x41e00000
 800eae4:	4b60      	ldr	r3, [pc, #384]	; (800ec68 <__ieee754_pow+0x3f0>)
 800eae6:	2200      	movs	r2, #0
 800eae8:	f7f1 fc4e 	bl	8000388 <__aeabi_dsub>
 800eaec:	a354      	add	r3, pc, #336	; (adr r3, 800ec40 <__ieee754_pow+0x3c8>)
 800eaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	f7f1 fdff 	bl	80006f8 <__aeabi_dmul>
 800eafa:	a353      	add	r3, pc, #332	; (adr r3, 800ec48 <__ieee754_pow+0x3d0>)
 800eafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb00:	4606      	mov	r6, r0
 800eb02:	460f      	mov	r7, r1
 800eb04:	4620      	mov	r0, r4
 800eb06:	4629      	mov	r1, r5
 800eb08:	f7f1 fdf6 	bl	80006f8 <__aeabi_dmul>
 800eb0c:	4b57      	ldr	r3, [pc, #348]	; (800ec6c <__ieee754_pow+0x3f4>)
 800eb0e:	4682      	mov	sl, r0
 800eb10:	468b      	mov	fp, r1
 800eb12:	2200      	movs	r2, #0
 800eb14:	4620      	mov	r0, r4
 800eb16:	4629      	mov	r1, r5
 800eb18:	f7f1 fdee 	bl	80006f8 <__aeabi_dmul>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	a14b      	add	r1, pc, #300	; (adr r1, 800ec50 <__ieee754_pow+0x3d8>)
 800eb22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb26:	f7f1 fc2f 	bl	8000388 <__aeabi_dsub>
 800eb2a:	4622      	mov	r2, r4
 800eb2c:	462b      	mov	r3, r5
 800eb2e:	f7f1 fde3 	bl	80006f8 <__aeabi_dmul>
 800eb32:	4602      	mov	r2, r0
 800eb34:	460b      	mov	r3, r1
 800eb36:	2000      	movs	r0, #0
 800eb38:	494d      	ldr	r1, [pc, #308]	; (800ec70 <__ieee754_pow+0x3f8>)
 800eb3a:	f7f1 fc25 	bl	8000388 <__aeabi_dsub>
 800eb3e:	4622      	mov	r2, r4
 800eb40:	4680      	mov	r8, r0
 800eb42:	4689      	mov	r9, r1
 800eb44:	462b      	mov	r3, r5
 800eb46:	4620      	mov	r0, r4
 800eb48:	4629      	mov	r1, r5
 800eb4a:	f7f1 fdd5 	bl	80006f8 <__aeabi_dmul>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	460b      	mov	r3, r1
 800eb52:	4640      	mov	r0, r8
 800eb54:	4649      	mov	r1, r9
 800eb56:	f7f1 fdcf 	bl	80006f8 <__aeabi_dmul>
 800eb5a:	a33f      	add	r3, pc, #252	; (adr r3, 800ec58 <__ieee754_pow+0x3e0>)
 800eb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb60:	f7f1 fdca 	bl	80006f8 <__aeabi_dmul>
 800eb64:	4602      	mov	r2, r0
 800eb66:	460b      	mov	r3, r1
 800eb68:	4650      	mov	r0, sl
 800eb6a:	4659      	mov	r1, fp
 800eb6c:	f7f1 fc0c 	bl	8000388 <__aeabi_dsub>
 800eb70:	4602      	mov	r2, r0
 800eb72:	460b      	mov	r3, r1
 800eb74:	4680      	mov	r8, r0
 800eb76:	4689      	mov	r9, r1
 800eb78:	4630      	mov	r0, r6
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	f7f1 fc06 	bl	800038c <__adddf3>
 800eb80:	2000      	movs	r0, #0
 800eb82:	4632      	mov	r2, r6
 800eb84:	463b      	mov	r3, r7
 800eb86:	4604      	mov	r4, r0
 800eb88:	460d      	mov	r5, r1
 800eb8a:	f7f1 fbfd 	bl	8000388 <__aeabi_dsub>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	4640      	mov	r0, r8
 800eb94:	4649      	mov	r1, r9
 800eb96:	f7f1 fbf7 	bl	8000388 <__aeabi_dsub>
 800eb9a:	9b04      	ldr	r3, [sp, #16]
 800eb9c:	9a06      	ldr	r2, [sp, #24]
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	4313      	orrs	r3, r2
 800eba2:	4682      	mov	sl, r0
 800eba4:	468b      	mov	fp, r1
 800eba6:	f040 81e7 	bne.w	800ef78 <__ieee754_pow+0x700>
 800ebaa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ec60 <__ieee754_pow+0x3e8>
 800ebae:	eeb0 8a47 	vmov.f32	s16, s14
 800ebb2:	eef0 8a67 	vmov.f32	s17, s15
 800ebb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ebba:	2600      	movs	r6, #0
 800ebbc:	4632      	mov	r2, r6
 800ebbe:	463b      	mov	r3, r7
 800ebc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebc4:	f7f1 fbe0 	bl	8000388 <__aeabi_dsub>
 800ebc8:	4622      	mov	r2, r4
 800ebca:	462b      	mov	r3, r5
 800ebcc:	f7f1 fd94 	bl	80006f8 <__aeabi_dmul>
 800ebd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebd4:	4680      	mov	r8, r0
 800ebd6:	4689      	mov	r9, r1
 800ebd8:	4650      	mov	r0, sl
 800ebda:	4659      	mov	r1, fp
 800ebdc:	f7f1 fd8c 	bl	80006f8 <__aeabi_dmul>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	4649      	mov	r1, r9
 800ebe8:	f7f1 fbd0 	bl	800038c <__adddf3>
 800ebec:	4632      	mov	r2, r6
 800ebee:	463b      	mov	r3, r7
 800ebf0:	4680      	mov	r8, r0
 800ebf2:	4689      	mov	r9, r1
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	f7f1 fd7e 	bl	80006f8 <__aeabi_dmul>
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	4604      	mov	r4, r0
 800ec00:	460d      	mov	r5, r1
 800ec02:	4602      	mov	r2, r0
 800ec04:	4649      	mov	r1, r9
 800ec06:	4640      	mov	r0, r8
 800ec08:	f7f1 fbc0 	bl	800038c <__adddf3>
 800ec0c:	4b19      	ldr	r3, [pc, #100]	; (800ec74 <__ieee754_pow+0x3fc>)
 800ec0e:	4299      	cmp	r1, r3
 800ec10:	ec45 4b19 	vmov	d9, r4, r5
 800ec14:	4606      	mov	r6, r0
 800ec16:	460f      	mov	r7, r1
 800ec18:	468b      	mov	fp, r1
 800ec1a:	f340 82f0 	ble.w	800f1fe <__ieee754_pow+0x986>
 800ec1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ec22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ec26:	4303      	orrs	r3, r0
 800ec28:	f000 81e4 	beq.w	800eff4 <__ieee754_pow+0x77c>
 800ec2c:	ec51 0b18 	vmov	r0, r1, d8
 800ec30:	2200      	movs	r2, #0
 800ec32:	2300      	movs	r3, #0
 800ec34:	f7f1 ffd2 	bl	8000bdc <__aeabi_dcmplt>
 800ec38:	3800      	subs	r0, #0
 800ec3a:	bf18      	it	ne
 800ec3c:	2001      	movne	r0, #1
 800ec3e:	e72b      	b.n	800ea98 <__ieee754_pow+0x220>
 800ec40:	60000000 	.word	0x60000000
 800ec44:	3ff71547 	.word	0x3ff71547
 800ec48:	f85ddf44 	.word	0xf85ddf44
 800ec4c:	3e54ae0b 	.word	0x3e54ae0b
 800ec50:	55555555 	.word	0x55555555
 800ec54:	3fd55555 	.word	0x3fd55555
 800ec58:	652b82fe 	.word	0x652b82fe
 800ec5c:	3ff71547 	.word	0x3ff71547
 800ec60:	00000000 	.word	0x00000000
 800ec64:	bff00000 	.word	0xbff00000
 800ec68:	3ff00000 	.word	0x3ff00000
 800ec6c:	3fd00000 	.word	0x3fd00000
 800ec70:	3fe00000 	.word	0x3fe00000
 800ec74:	408fffff 	.word	0x408fffff
 800ec78:	4bd5      	ldr	r3, [pc, #852]	; (800efd0 <__ieee754_pow+0x758>)
 800ec7a:	402b      	ands	r3, r5
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	b92b      	cbnz	r3, 800ec8c <__ieee754_pow+0x414>
 800ec80:	4bd4      	ldr	r3, [pc, #848]	; (800efd4 <__ieee754_pow+0x75c>)
 800ec82:	f7f1 fd39 	bl	80006f8 <__aeabi_dmul>
 800ec86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	1523      	asrs	r3, r4, #20
 800ec8e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ec92:	4413      	add	r3, r2
 800ec94:	9305      	str	r3, [sp, #20]
 800ec96:	4bd0      	ldr	r3, [pc, #832]	; (800efd8 <__ieee754_pow+0x760>)
 800ec98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ec9c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eca0:	429c      	cmp	r4, r3
 800eca2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eca6:	dd08      	ble.n	800ecba <__ieee754_pow+0x442>
 800eca8:	4bcc      	ldr	r3, [pc, #816]	; (800efdc <__ieee754_pow+0x764>)
 800ecaa:	429c      	cmp	r4, r3
 800ecac:	f340 8162 	ble.w	800ef74 <__ieee754_pow+0x6fc>
 800ecb0:	9b05      	ldr	r3, [sp, #20]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	9305      	str	r3, [sp, #20]
 800ecb6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ecba:	2400      	movs	r4, #0
 800ecbc:	00e3      	lsls	r3, r4, #3
 800ecbe:	9307      	str	r3, [sp, #28]
 800ecc0:	4bc7      	ldr	r3, [pc, #796]	; (800efe0 <__ieee754_pow+0x768>)
 800ecc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ecc6:	ed93 7b00 	vldr	d7, [r3]
 800ecca:	4629      	mov	r1, r5
 800eccc:	ec53 2b17 	vmov	r2, r3, d7
 800ecd0:	eeb0 9a47 	vmov.f32	s18, s14
 800ecd4:	eef0 9a67 	vmov.f32	s19, s15
 800ecd8:	4682      	mov	sl, r0
 800ecda:	f7f1 fb55 	bl	8000388 <__aeabi_dsub>
 800ecde:	4652      	mov	r2, sl
 800ece0:	4606      	mov	r6, r0
 800ece2:	460f      	mov	r7, r1
 800ece4:	462b      	mov	r3, r5
 800ece6:	ec51 0b19 	vmov	r0, r1, d9
 800ecea:	f7f1 fb4f 	bl	800038c <__adddf3>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	49bb      	ldr	r1, [pc, #748]	; (800efe4 <__ieee754_pow+0x76c>)
 800ecf6:	f7f1 fe29 	bl	800094c <__aeabi_ddiv>
 800ecfa:	ec41 0b1a 	vmov	d10, r0, r1
 800ecfe:	4602      	mov	r2, r0
 800ed00:	460b      	mov	r3, r1
 800ed02:	4630      	mov	r0, r6
 800ed04:	4639      	mov	r1, r7
 800ed06:	f7f1 fcf7 	bl	80006f8 <__aeabi_dmul>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed10:	9302      	str	r3, [sp, #8]
 800ed12:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ed16:	46ab      	mov	fp, r5
 800ed18:	106d      	asrs	r5, r5, #1
 800ed1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ed1e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ed22:	ec41 0b18 	vmov	d8, r0, r1
 800ed26:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	4640      	mov	r0, r8
 800ed2e:	4649      	mov	r1, r9
 800ed30:	4614      	mov	r4, r2
 800ed32:	461d      	mov	r5, r3
 800ed34:	f7f1 fce0 	bl	80006f8 <__aeabi_dmul>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	4639      	mov	r1, r7
 800ed40:	f7f1 fb22 	bl	8000388 <__aeabi_dsub>
 800ed44:	ec53 2b19 	vmov	r2, r3, d9
 800ed48:	4606      	mov	r6, r0
 800ed4a:	460f      	mov	r7, r1
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	4629      	mov	r1, r5
 800ed50:	f7f1 fb1a 	bl	8000388 <__aeabi_dsub>
 800ed54:	4602      	mov	r2, r0
 800ed56:	460b      	mov	r3, r1
 800ed58:	4650      	mov	r0, sl
 800ed5a:	4659      	mov	r1, fp
 800ed5c:	f7f1 fb14 	bl	8000388 <__aeabi_dsub>
 800ed60:	4642      	mov	r2, r8
 800ed62:	464b      	mov	r3, r9
 800ed64:	f7f1 fcc8 	bl	80006f8 <__aeabi_dmul>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	4639      	mov	r1, r7
 800ed70:	f7f1 fb0a 	bl	8000388 <__aeabi_dsub>
 800ed74:	ec53 2b1a 	vmov	r2, r3, d10
 800ed78:	f7f1 fcbe 	bl	80006f8 <__aeabi_dmul>
 800ed7c:	ec53 2b18 	vmov	r2, r3, d8
 800ed80:	ec41 0b19 	vmov	d9, r0, r1
 800ed84:	ec51 0b18 	vmov	r0, r1, d8
 800ed88:	f7f1 fcb6 	bl	80006f8 <__aeabi_dmul>
 800ed8c:	a37c      	add	r3, pc, #496	; (adr r3, 800ef80 <__ieee754_pow+0x708>)
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	4604      	mov	r4, r0
 800ed94:	460d      	mov	r5, r1
 800ed96:	f7f1 fcaf 	bl	80006f8 <__aeabi_dmul>
 800ed9a:	a37b      	add	r3, pc, #492	; (adr r3, 800ef88 <__ieee754_pow+0x710>)
 800ed9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda0:	f7f1 faf4 	bl	800038c <__adddf3>
 800eda4:	4622      	mov	r2, r4
 800eda6:	462b      	mov	r3, r5
 800eda8:	f7f1 fca6 	bl	80006f8 <__aeabi_dmul>
 800edac:	a378      	add	r3, pc, #480	; (adr r3, 800ef90 <__ieee754_pow+0x718>)
 800edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb2:	f7f1 faeb 	bl	800038c <__adddf3>
 800edb6:	4622      	mov	r2, r4
 800edb8:	462b      	mov	r3, r5
 800edba:	f7f1 fc9d 	bl	80006f8 <__aeabi_dmul>
 800edbe:	a376      	add	r3, pc, #472	; (adr r3, 800ef98 <__ieee754_pow+0x720>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	f7f1 fae2 	bl	800038c <__adddf3>
 800edc8:	4622      	mov	r2, r4
 800edca:	462b      	mov	r3, r5
 800edcc:	f7f1 fc94 	bl	80006f8 <__aeabi_dmul>
 800edd0:	a373      	add	r3, pc, #460	; (adr r3, 800efa0 <__ieee754_pow+0x728>)
 800edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd6:	f7f1 fad9 	bl	800038c <__adddf3>
 800edda:	4622      	mov	r2, r4
 800eddc:	462b      	mov	r3, r5
 800edde:	f7f1 fc8b 	bl	80006f8 <__aeabi_dmul>
 800ede2:	a371      	add	r3, pc, #452	; (adr r3, 800efa8 <__ieee754_pow+0x730>)
 800ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede8:	f7f1 fad0 	bl	800038c <__adddf3>
 800edec:	4622      	mov	r2, r4
 800edee:	4606      	mov	r6, r0
 800edf0:	460f      	mov	r7, r1
 800edf2:	462b      	mov	r3, r5
 800edf4:	4620      	mov	r0, r4
 800edf6:	4629      	mov	r1, r5
 800edf8:	f7f1 fc7e 	bl	80006f8 <__aeabi_dmul>
 800edfc:	4602      	mov	r2, r0
 800edfe:	460b      	mov	r3, r1
 800ee00:	4630      	mov	r0, r6
 800ee02:	4639      	mov	r1, r7
 800ee04:	f7f1 fc78 	bl	80006f8 <__aeabi_dmul>
 800ee08:	4642      	mov	r2, r8
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	460d      	mov	r5, r1
 800ee0e:	464b      	mov	r3, r9
 800ee10:	ec51 0b18 	vmov	r0, r1, d8
 800ee14:	f7f1 faba 	bl	800038c <__adddf3>
 800ee18:	ec53 2b19 	vmov	r2, r3, d9
 800ee1c:	f7f1 fc6c 	bl	80006f8 <__aeabi_dmul>
 800ee20:	4622      	mov	r2, r4
 800ee22:	462b      	mov	r3, r5
 800ee24:	f7f1 fab2 	bl	800038c <__adddf3>
 800ee28:	4642      	mov	r2, r8
 800ee2a:	4682      	mov	sl, r0
 800ee2c:	468b      	mov	fp, r1
 800ee2e:	464b      	mov	r3, r9
 800ee30:	4640      	mov	r0, r8
 800ee32:	4649      	mov	r1, r9
 800ee34:	f7f1 fc60 	bl	80006f8 <__aeabi_dmul>
 800ee38:	4b6b      	ldr	r3, [pc, #428]	; (800efe8 <__ieee754_pow+0x770>)
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	4606      	mov	r6, r0
 800ee3e:	460f      	mov	r7, r1
 800ee40:	f7f1 faa4 	bl	800038c <__adddf3>
 800ee44:	4652      	mov	r2, sl
 800ee46:	465b      	mov	r3, fp
 800ee48:	f7f1 faa0 	bl	800038c <__adddf3>
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	4604      	mov	r4, r0
 800ee50:	460d      	mov	r5, r1
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	4640      	mov	r0, r8
 800ee58:	4649      	mov	r1, r9
 800ee5a:	f7f1 fc4d 	bl	80006f8 <__aeabi_dmul>
 800ee5e:	4b62      	ldr	r3, [pc, #392]	; (800efe8 <__ieee754_pow+0x770>)
 800ee60:	4680      	mov	r8, r0
 800ee62:	4689      	mov	r9, r1
 800ee64:	2200      	movs	r2, #0
 800ee66:	4620      	mov	r0, r4
 800ee68:	4629      	mov	r1, r5
 800ee6a:	f7f1 fa8d 	bl	8000388 <__aeabi_dsub>
 800ee6e:	4632      	mov	r2, r6
 800ee70:	463b      	mov	r3, r7
 800ee72:	f7f1 fa89 	bl	8000388 <__aeabi_dsub>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4650      	mov	r0, sl
 800ee7c:	4659      	mov	r1, fp
 800ee7e:	f7f1 fa83 	bl	8000388 <__aeabi_dsub>
 800ee82:	ec53 2b18 	vmov	r2, r3, d8
 800ee86:	f7f1 fc37 	bl	80006f8 <__aeabi_dmul>
 800ee8a:	4622      	mov	r2, r4
 800ee8c:	4606      	mov	r6, r0
 800ee8e:	460f      	mov	r7, r1
 800ee90:	462b      	mov	r3, r5
 800ee92:	ec51 0b19 	vmov	r0, r1, d9
 800ee96:	f7f1 fc2f 	bl	80006f8 <__aeabi_dmul>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	4630      	mov	r0, r6
 800eea0:	4639      	mov	r1, r7
 800eea2:	f7f1 fa73 	bl	800038c <__adddf3>
 800eea6:	4606      	mov	r6, r0
 800eea8:	460f      	mov	r7, r1
 800eeaa:	4602      	mov	r2, r0
 800eeac:	460b      	mov	r3, r1
 800eeae:	4640      	mov	r0, r8
 800eeb0:	4649      	mov	r1, r9
 800eeb2:	f7f1 fa6b 	bl	800038c <__adddf3>
 800eeb6:	a33e      	add	r3, pc, #248	; (adr r3, 800efb0 <__ieee754_pow+0x738>)
 800eeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebc:	2000      	movs	r0, #0
 800eebe:	4604      	mov	r4, r0
 800eec0:	460d      	mov	r5, r1
 800eec2:	f7f1 fc19 	bl	80006f8 <__aeabi_dmul>
 800eec6:	4642      	mov	r2, r8
 800eec8:	ec41 0b18 	vmov	d8, r0, r1
 800eecc:	464b      	mov	r3, r9
 800eece:	4620      	mov	r0, r4
 800eed0:	4629      	mov	r1, r5
 800eed2:	f7f1 fa59 	bl	8000388 <__aeabi_dsub>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	4630      	mov	r0, r6
 800eedc:	4639      	mov	r1, r7
 800eede:	f7f1 fa53 	bl	8000388 <__aeabi_dsub>
 800eee2:	a335      	add	r3, pc, #212	; (adr r3, 800efb8 <__ieee754_pow+0x740>)
 800eee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee8:	f7f1 fc06 	bl	80006f8 <__aeabi_dmul>
 800eeec:	a334      	add	r3, pc, #208	; (adr r3, 800efc0 <__ieee754_pow+0x748>)
 800eeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef2:	4606      	mov	r6, r0
 800eef4:	460f      	mov	r7, r1
 800eef6:	4620      	mov	r0, r4
 800eef8:	4629      	mov	r1, r5
 800eefa:	f7f1 fbfd 	bl	80006f8 <__aeabi_dmul>
 800eefe:	4602      	mov	r2, r0
 800ef00:	460b      	mov	r3, r1
 800ef02:	4630      	mov	r0, r6
 800ef04:	4639      	mov	r1, r7
 800ef06:	f7f1 fa41 	bl	800038c <__adddf3>
 800ef0a:	9a07      	ldr	r2, [sp, #28]
 800ef0c:	4b37      	ldr	r3, [pc, #220]	; (800efec <__ieee754_pow+0x774>)
 800ef0e:	4413      	add	r3, r2
 800ef10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef14:	f7f1 fa3a 	bl	800038c <__adddf3>
 800ef18:	4682      	mov	sl, r0
 800ef1a:	9805      	ldr	r0, [sp, #20]
 800ef1c:	468b      	mov	fp, r1
 800ef1e:	f7f1 fb81 	bl	8000624 <__aeabi_i2d>
 800ef22:	9a07      	ldr	r2, [sp, #28]
 800ef24:	4b32      	ldr	r3, [pc, #200]	; (800eff0 <__ieee754_pow+0x778>)
 800ef26:	4413      	add	r3, r2
 800ef28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ef2c:	4606      	mov	r6, r0
 800ef2e:	460f      	mov	r7, r1
 800ef30:	4652      	mov	r2, sl
 800ef32:	465b      	mov	r3, fp
 800ef34:	ec51 0b18 	vmov	r0, r1, d8
 800ef38:	f7f1 fa28 	bl	800038c <__adddf3>
 800ef3c:	4642      	mov	r2, r8
 800ef3e:	464b      	mov	r3, r9
 800ef40:	f7f1 fa24 	bl	800038c <__adddf3>
 800ef44:	4632      	mov	r2, r6
 800ef46:	463b      	mov	r3, r7
 800ef48:	f7f1 fa20 	bl	800038c <__adddf3>
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	4632      	mov	r2, r6
 800ef50:	463b      	mov	r3, r7
 800ef52:	4604      	mov	r4, r0
 800ef54:	460d      	mov	r5, r1
 800ef56:	f7f1 fa17 	bl	8000388 <__aeabi_dsub>
 800ef5a:	4642      	mov	r2, r8
 800ef5c:	464b      	mov	r3, r9
 800ef5e:	f7f1 fa13 	bl	8000388 <__aeabi_dsub>
 800ef62:	ec53 2b18 	vmov	r2, r3, d8
 800ef66:	f7f1 fa0f 	bl	8000388 <__aeabi_dsub>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	4650      	mov	r0, sl
 800ef70:	4659      	mov	r1, fp
 800ef72:	e610      	b.n	800eb96 <__ieee754_pow+0x31e>
 800ef74:	2401      	movs	r4, #1
 800ef76:	e6a1      	b.n	800ecbc <__ieee754_pow+0x444>
 800ef78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800efc8 <__ieee754_pow+0x750>
 800ef7c:	e617      	b.n	800ebae <__ieee754_pow+0x336>
 800ef7e:	bf00      	nop
 800ef80:	4a454eef 	.word	0x4a454eef
 800ef84:	3fca7e28 	.word	0x3fca7e28
 800ef88:	93c9db65 	.word	0x93c9db65
 800ef8c:	3fcd864a 	.word	0x3fcd864a
 800ef90:	a91d4101 	.word	0xa91d4101
 800ef94:	3fd17460 	.word	0x3fd17460
 800ef98:	518f264d 	.word	0x518f264d
 800ef9c:	3fd55555 	.word	0x3fd55555
 800efa0:	db6fabff 	.word	0xdb6fabff
 800efa4:	3fdb6db6 	.word	0x3fdb6db6
 800efa8:	33333303 	.word	0x33333303
 800efac:	3fe33333 	.word	0x3fe33333
 800efb0:	e0000000 	.word	0xe0000000
 800efb4:	3feec709 	.word	0x3feec709
 800efb8:	dc3a03fd 	.word	0xdc3a03fd
 800efbc:	3feec709 	.word	0x3feec709
 800efc0:	145b01f5 	.word	0x145b01f5
 800efc4:	be3e2fe0 	.word	0xbe3e2fe0
 800efc8:	00000000 	.word	0x00000000
 800efcc:	3ff00000 	.word	0x3ff00000
 800efd0:	7ff00000 	.word	0x7ff00000
 800efd4:	43400000 	.word	0x43400000
 800efd8:	0003988e 	.word	0x0003988e
 800efdc:	000bb679 	.word	0x000bb679
 800efe0:	0802c590 	.word	0x0802c590
 800efe4:	3ff00000 	.word	0x3ff00000
 800efe8:	40080000 	.word	0x40080000
 800efec:	0802c5b0 	.word	0x0802c5b0
 800eff0:	0802c5a0 	.word	0x0802c5a0
 800eff4:	a3b3      	add	r3, pc, #716	; (adr r3, 800f2c4 <__ieee754_pow+0xa4c>)
 800eff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effa:	4640      	mov	r0, r8
 800effc:	4649      	mov	r1, r9
 800effe:	f7f1 f9c5 	bl	800038c <__adddf3>
 800f002:	4622      	mov	r2, r4
 800f004:	ec41 0b1a 	vmov	d10, r0, r1
 800f008:	462b      	mov	r3, r5
 800f00a:	4630      	mov	r0, r6
 800f00c:	4639      	mov	r1, r7
 800f00e:	f7f1 f9bb 	bl	8000388 <__aeabi_dsub>
 800f012:	4602      	mov	r2, r0
 800f014:	460b      	mov	r3, r1
 800f016:	ec51 0b1a 	vmov	r0, r1, d10
 800f01a:	f7f1 fdfd 	bl	8000c18 <__aeabi_dcmpgt>
 800f01e:	2800      	cmp	r0, #0
 800f020:	f47f ae04 	bne.w	800ec2c <__ieee754_pow+0x3b4>
 800f024:	4aa2      	ldr	r2, [pc, #648]	; (800f2b0 <__ieee754_pow+0xa38>)
 800f026:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f02a:	4293      	cmp	r3, r2
 800f02c:	f340 8107 	ble.w	800f23e <__ieee754_pow+0x9c6>
 800f030:	151b      	asrs	r3, r3, #20
 800f032:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f036:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f03a:	fa4a fa03 	asr.w	sl, sl, r3
 800f03e:	44da      	add	sl, fp
 800f040:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f044:	489b      	ldr	r0, [pc, #620]	; (800f2b4 <__ieee754_pow+0xa3c>)
 800f046:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f04a:	4108      	asrs	r0, r1
 800f04c:	ea00 030a 	and.w	r3, r0, sl
 800f050:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f054:	f1c1 0114 	rsb	r1, r1, #20
 800f058:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f05c:	fa4a fa01 	asr.w	sl, sl, r1
 800f060:	f1bb 0f00 	cmp.w	fp, #0
 800f064:	f04f 0200 	mov.w	r2, #0
 800f068:	4620      	mov	r0, r4
 800f06a:	4629      	mov	r1, r5
 800f06c:	bfb8      	it	lt
 800f06e:	f1ca 0a00 	rsblt	sl, sl, #0
 800f072:	f7f1 f989 	bl	8000388 <__aeabi_dsub>
 800f076:	ec41 0b19 	vmov	d9, r0, r1
 800f07a:	4642      	mov	r2, r8
 800f07c:	464b      	mov	r3, r9
 800f07e:	ec51 0b19 	vmov	r0, r1, d9
 800f082:	f7f1 f983 	bl	800038c <__adddf3>
 800f086:	a37a      	add	r3, pc, #488	; (adr r3, 800f270 <__ieee754_pow+0x9f8>)
 800f088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08c:	2000      	movs	r0, #0
 800f08e:	4604      	mov	r4, r0
 800f090:	460d      	mov	r5, r1
 800f092:	f7f1 fb31 	bl	80006f8 <__aeabi_dmul>
 800f096:	ec53 2b19 	vmov	r2, r3, d9
 800f09a:	4606      	mov	r6, r0
 800f09c:	460f      	mov	r7, r1
 800f09e:	4620      	mov	r0, r4
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	f7f1 f971 	bl	8000388 <__aeabi_dsub>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	4640      	mov	r0, r8
 800f0ac:	4649      	mov	r1, r9
 800f0ae:	f7f1 f96b 	bl	8000388 <__aeabi_dsub>
 800f0b2:	a371      	add	r3, pc, #452	; (adr r3, 800f278 <__ieee754_pow+0xa00>)
 800f0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b8:	f7f1 fb1e 	bl	80006f8 <__aeabi_dmul>
 800f0bc:	a370      	add	r3, pc, #448	; (adr r3, 800f280 <__ieee754_pow+0xa08>)
 800f0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c2:	4680      	mov	r8, r0
 800f0c4:	4689      	mov	r9, r1
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	f7f1 fb15 	bl	80006f8 <__aeabi_dmul>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	4649      	mov	r1, r9
 800f0d6:	f7f1 f959 	bl	800038c <__adddf3>
 800f0da:	4604      	mov	r4, r0
 800f0dc:	460d      	mov	r5, r1
 800f0de:	4602      	mov	r2, r0
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	f7f1 f951 	bl	800038c <__adddf3>
 800f0ea:	4632      	mov	r2, r6
 800f0ec:	463b      	mov	r3, r7
 800f0ee:	4680      	mov	r8, r0
 800f0f0:	4689      	mov	r9, r1
 800f0f2:	f7f1 f949 	bl	8000388 <__aeabi_dsub>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	f7f1 f943 	bl	8000388 <__aeabi_dsub>
 800f102:	4642      	mov	r2, r8
 800f104:	4606      	mov	r6, r0
 800f106:	460f      	mov	r7, r1
 800f108:	464b      	mov	r3, r9
 800f10a:	4640      	mov	r0, r8
 800f10c:	4649      	mov	r1, r9
 800f10e:	f7f1 faf3 	bl	80006f8 <__aeabi_dmul>
 800f112:	a35d      	add	r3, pc, #372	; (adr r3, 800f288 <__ieee754_pow+0xa10>)
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	4604      	mov	r4, r0
 800f11a:	460d      	mov	r5, r1
 800f11c:	f7f1 faec 	bl	80006f8 <__aeabi_dmul>
 800f120:	a35b      	add	r3, pc, #364	; (adr r3, 800f290 <__ieee754_pow+0xa18>)
 800f122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f126:	f7f1 f92f 	bl	8000388 <__aeabi_dsub>
 800f12a:	4622      	mov	r2, r4
 800f12c:	462b      	mov	r3, r5
 800f12e:	f7f1 fae3 	bl	80006f8 <__aeabi_dmul>
 800f132:	a359      	add	r3, pc, #356	; (adr r3, 800f298 <__ieee754_pow+0xa20>)
 800f134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f138:	f7f1 f928 	bl	800038c <__adddf3>
 800f13c:	4622      	mov	r2, r4
 800f13e:	462b      	mov	r3, r5
 800f140:	f7f1 fada 	bl	80006f8 <__aeabi_dmul>
 800f144:	a356      	add	r3, pc, #344	; (adr r3, 800f2a0 <__ieee754_pow+0xa28>)
 800f146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14a:	f7f1 f91d 	bl	8000388 <__aeabi_dsub>
 800f14e:	4622      	mov	r2, r4
 800f150:	462b      	mov	r3, r5
 800f152:	f7f1 fad1 	bl	80006f8 <__aeabi_dmul>
 800f156:	a354      	add	r3, pc, #336	; (adr r3, 800f2a8 <__ieee754_pow+0xa30>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	f7f1 f916 	bl	800038c <__adddf3>
 800f160:	4622      	mov	r2, r4
 800f162:	462b      	mov	r3, r5
 800f164:	f7f1 fac8 	bl	80006f8 <__aeabi_dmul>
 800f168:	4602      	mov	r2, r0
 800f16a:	460b      	mov	r3, r1
 800f16c:	4640      	mov	r0, r8
 800f16e:	4649      	mov	r1, r9
 800f170:	f7f1 f90a 	bl	8000388 <__aeabi_dsub>
 800f174:	4604      	mov	r4, r0
 800f176:	460d      	mov	r5, r1
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4640      	mov	r0, r8
 800f17e:	4649      	mov	r1, r9
 800f180:	f7f1 faba 	bl	80006f8 <__aeabi_dmul>
 800f184:	2200      	movs	r2, #0
 800f186:	ec41 0b19 	vmov	d9, r0, r1
 800f18a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f18e:	4620      	mov	r0, r4
 800f190:	4629      	mov	r1, r5
 800f192:	f7f1 f8f9 	bl	8000388 <__aeabi_dsub>
 800f196:	4602      	mov	r2, r0
 800f198:	460b      	mov	r3, r1
 800f19a:	ec51 0b19 	vmov	r0, r1, d9
 800f19e:	f7f1 fbd5 	bl	800094c <__aeabi_ddiv>
 800f1a2:	4632      	mov	r2, r6
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	460d      	mov	r5, r1
 800f1a8:	463b      	mov	r3, r7
 800f1aa:	4640      	mov	r0, r8
 800f1ac:	4649      	mov	r1, r9
 800f1ae:	f7f1 faa3 	bl	80006f8 <__aeabi_dmul>
 800f1b2:	4632      	mov	r2, r6
 800f1b4:	463b      	mov	r3, r7
 800f1b6:	f7f1 f8e9 	bl	800038c <__adddf3>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	460b      	mov	r3, r1
 800f1be:	4620      	mov	r0, r4
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	f7f1 f8e1 	bl	8000388 <__aeabi_dsub>
 800f1c6:	4642      	mov	r2, r8
 800f1c8:	464b      	mov	r3, r9
 800f1ca:	f7f1 f8dd 	bl	8000388 <__aeabi_dsub>
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	4939      	ldr	r1, [pc, #228]	; (800f2b8 <__ieee754_pow+0xa40>)
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	f7f1 f8d7 	bl	8000388 <__aeabi_dsub>
 800f1da:	ec41 0b10 	vmov	d0, r0, r1
 800f1de:	ee10 3a90 	vmov	r3, s1
 800f1e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f1e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1ea:	da2b      	bge.n	800f244 <__ieee754_pow+0x9cc>
 800f1ec:	4650      	mov	r0, sl
 800f1ee:	f000 fb73 	bl	800f8d8 <scalbn>
 800f1f2:	ec51 0b10 	vmov	r0, r1, d0
 800f1f6:	ec53 2b18 	vmov	r2, r3, d8
 800f1fa:	f7ff bbee 	b.w	800e9da <__ieee754_pow+0x162>
 800f1fe:	4b2f      	ldr	r3, [pc, #188]	; (800f2bc <__ieee754_pow+0xa44>)
 800f200:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f204:	429e      	cmp	r6, r3
 800f206:	f77f af0d 	ble.w	800f024 <__ieee754_pow+0x7ac>
 800f20a:	4b2d      	ldr	r3, [pc, #180]	; (800f2c0 <__ieee754_pow+0xa48>)
 800f20c:	440b      	add	r3, r1
 800f20e:	4303      	orrs	r3, r0
 800f210:	d009      	beq.n	800f226 <__ieee754_pow+0x9ae>
 800f212:	ec51 0b18 	vmov	r0, r1, d8
 800f216:	2200      	movs	r2, #0
 800f218:	2300      	movs	r3, #0
 800f21a:	f7f1 fcdf 	bl	8000bdc <__aeabi_dcmplt>
 800f21e:	3800      	subs	r0, #0
 800f220:	bf18      	it	ne
 800f222:	2001      	movne	r0, #1
 800f224:	e448      	b.n	800eab8 <__ieee754_pow+0x240>
 800f226:	4622      	mov	r2, r4
 800f228:	462b      	mov	r3, r5
 800f22a:	f7f1 f8ad 	bl	8000388 <__aeabi_dsub>
 800f22e:	4642      	mov	r2, r8
 800f230:	464b      	mov	r3, r9
 800f232:	f7f1 fce7 	bl	8000c04 <__aeabi_dcmpge>
 800f236:	2800      	cmp	r0, #0
 800f238:	f43f aef4 	beq.w	800f024 <__ieee754_pow+0x7ac>
 800f23c:	e7e9      	b.n	800f212 <__ieee754_pow+0x99a>
 800f23e:	f04f 0a00 	mov.w	sl, #0
 800f242:	e71a      	b.n	800f07a <__ieee754_pow+0x802>
 800f244:	ec51 0b10 	vmov	r0, r1, d0
 800f248:	4619      	mov	r1, r3
 800f24a:	e7d4      	b.n	800f1f6 <__ieee754_pow+0x97e>
 800f24c:	491a      	ldr	r1, [pc, #104]	; (800f2b8 <__ieee754_pow+0xa40>)
 800f24e:	2000      	movs	r0, #0
 800f250:	f7ff bb31 	b.w	800e8b6 <__ieee754_pow+0x3e>
 800f254:	2000      	movs	r0, #0
 800f256:	2100      	movs	r1, #0
 800f258:	f7ff bb2d 	b.w	800e8b6 <__ieee754_pow+0x3e>
 800f25c:	4630      	mov	r0, r6
 800f25e:	4639      	mov	r1, r7
 800f260:	f7ff bb29 	b.w	800e8b6 <__ieee754_pow+0x3e>
 800f264:	9204      	str	r2, [sp, #16]
 800f266:	f7ff bb7b 	b.w	800e960 <__ieee754_pow+0xe8>
 800f26a:	2300      	movs	r3, #0
 800f26c:	f7ff bb65 	b.w	800e93a <__ieee754_pow+0xc2>
 800f270:	00000000 	.word	0x00000000
 800f274:	3fe62e43 	.word	0x3fe62e43
 800f278:	fefa39ef 	.word	0xfefa39ef
 800f27c:	3fe62e42 	.word	0x3fe62e42
 800f280:	0ca86c39 	.word	0x0ca86c39
 800f284:	be205c61 	.word	0xbe205c61
 800f288:	72bea4d0 	.word	0x72bea4d0
 800f28c:	3e663769 	.word	0x3e663769
 800f290:	c5d26bf1 	.word	0xc5d26bf1
 800f294:	3ebbbd41 	.word	0x3ebbbd41
 800f298:	af25de2c 	.word	0xaf25de2c
 800f29c:	3f11566a 	.word	0x3f11566a
 800f2a0:	16bebd93 	.word	0x16bebd93
 800f2a4:	3f66c16c 	.word	0x3f66c16c
 800f2a8:	5555553e 	.word	0x5555553e
 800f2ac:	3fc55555 	.word	0x3fc55555
 800f2b0:	3fe00000 	.word	0x3fe00000
 800f2b4:	fff00000 	.word	0xfff00000
 800f2b8:	3ff00000 	.word	0x3ff00000
 800f2bc:	4090cbff 	.word	0x4090cbff
 800f2c0:	3f6f3400 	.word	0x3f6f3400
 800f2c4:	652b82fe 	.word	0x652b82fe
 800f2c8:	3c971547 	.word	0x3c971547
 800f2cc:	00000000 	.word	0x00000000

0800f2d0 <__ieee754_rem_pio2>:
 800f2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d4:	ed2d 8b02 	vpush	{d8}
 800f2d8:	ec55 4b10 	vmov	r4, r5, d0
 800f2dc:	4bca      	ldr	r3, [pc, #808]	; (800f608 <__ieee754_rem_pio2+0x338>)
 800f2de:	b08b      	sub	sp, #44	; 0x2c
 800f2e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f2e4:	4598      	cmp	r8, r3
 800f2e6:	4682      	mov	sl, r0
 800f2e8:	9502      	str	r5, [sp, #8]
 800f2ea:	dc08      	bgt.n	800f2fe <__ieee754_rem_pio2+0x2e>
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	ed80 0b00 	vstr	d0, [r0]
 800f2f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f2f8:	f04f 0b00 	mov.w	fp, #0
 800f2fc:	e028      	b.n	800f350 <__ieee754_rem_pio2+0x80>
 800f2fe:	4bc3      	ldr	r3, [pc, #780]	; (800f60c <__ieee754_rem_pio2+0x33c>)
 800f300:	4598      	cmp	r8, r3
 800f302:	dc78      	bgt.n	800f3f6 <__ieee754_rem_pio2+0x126>
 800f304:	9b02      	ldr	r3, [sp, #8]
 800f306:	4ec2      	ldr	r6, [pc, #776]	; (800f610 <__ieee754_rem_pio2+0x340>)
 800f308:	2b00      	cmp	r3, #0
 800f30a:	ee10 0a10 	vmov	r0, s0
 800f30e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f5d0 <__ieee754_rem_pio2+0x300>)
 800f310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f314:	4629      	mov	r1, r5
 800f316:	dd39      	ble.n	800f38c <__ieee754_rem_pio2+0xbc>
 800f318:	f7f1 f836 	bl	8000388 <__aeabi_dsub>
 800f31c:	45b0      	cmp	r8, r6
 800f31e:	4604      	mov	r4, r0
 800f320:	460d      	mov	r5, r1
 800f322:	d01b      	beq.n	800f35c <__ieee754_rem_pio2+0x8c>
 800f324:	a3ac      	add	r3, pc, #688	; (adr r3, 800f5d8 <__ieee754_rem_pio2+0x308>)
 800f326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32a:	f7f1 f82d 	bl	8000388 <__aeabi_dsub>
 800f32e:	4602      	mov	r2, r0
 800f330:	460b      	mov	r3, r1
 800f332:	e9ca 2300 	strd	r2, r3, [sl]
 800f336:	4620      	mov	r0, r4
 800f338:	4629      	mov	r1, r5
 800f33a:	f7f1 f825 	bl	8000388 <__aeabi_dsub>
 800f33e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f5d8 <__ieee754_rem_pio2+0x308>)
 800f340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f344:	f7f1 f820 	bl	8000388 <__aeabi_dsub>
 800f348:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f34c:	f04f 0b01 	mov.w	fp, #1
 800f350:	4658      	mov	r0, fp
 800f352:	b00b      	add	sp, #44	; 0x2c
 800f354:	ecbd 8b02 	vpop	{d8}
 800f358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f5e0 <__ieee754_rem_pio2+0x310>)
 800f35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f362:	f7f1 f811 	bl	8000388 <__aeabi_dsub>
 800f366:	a3a0      	add	r3, pc, #640	; (adr r3, 800f5e8 <__ieee754_rem_pio2+0x318>)
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	4604      	mov	r4, r0
 800f36e:	460d      	mov	r5, r1
 800f370:	f7f1 f80a 	bl	8000388 <__aeabi_dsub>
 800f374:	4602      	mov	r2, r0
 800f376:	460b      	mov	r3, r1
 800f378:	e9ca 2300 	strd	r2, r3, [sl]
 800f37c:	4620      	mov	r0, r4
 800f37e:	4629      	mov	r1, r5
 800f380:	f7f1 f802 	bl	8000388 <__aeabi_dsub>
 800f384:	a398      	add	r3, pc, #608	; (adr r3, 800f5e8 <__ieee754_rem_pio2+0x318>)
 800f386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38a:	e7db      	b.n	800f344 <__ieee754_rem_pio2+0x74>
 800f38c:	f7f0 fffe 	bl	800038c <__adddf3>
 800f390:	45b0      	cmp	r8, r6
 800f392:	4604      	mov	r4, r0
 800f394:	460d      	mov	r5, r1
 800f396:	d016      	beq.n	800f3c6 <__ieee754_rem_pio2+0xf6>
 800f398:	a38f      	add	r3, pc, #572	; (adr r3, 800f5d8 <__ieee754_rem_pio2+0x308>)
 800f39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39e:	f7f0 fff5 	bl	800038c <__adddf3>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	e9ca 2300 	strd	r2, r3, [sl]
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	f7f0 ffeb 	bl	8000388 <__aeabi_dsub>
 800f3b2:	a389      	add	r3, pc, #548	; (adr r3, 800f5d8 <__ieee754_rem_pio2+0x308>)
 800f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b8:	f7f0 ffe8 	bl	800038c <__adddf3>
 800f3bc:	f04f 3bff 	mov.w	fp, #4294967295
 800f3c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f3c4:	e7c4      	b.n	800f350 <__ieee754_rem_pio2+0x80>
 800f3c6:	a386      	add	r3, pc, #536	; (adr r3, 800f5e0 <__ieee754_rem_pio2+0x310>)
 800f3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3cc:	f7f0 ffde 	bl	800038c <__adddf3>
 800f3d0:	a385      	add	r3, pc, #532	; (adr r3, 800f5e8 <__ieee754_rem_pio2+0x318>)
 800f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	460d      	mov	r5, r1
 800f3da:	f7f0 ffd7 	bl	800038c <__adddf3>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	e9ca 2300 	strd	r2, r3, [sl]
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	4629      	mov	r1, r5
 800f3ea:	f7f0 ffcd 	bl	8000388 <__aeabi_dsub>
 800f3ee:	a37e      	add	r3, pc, #504	; (adr r3, 800f5e8 <__ieee754_rem_pio2+0x318>)
 800f3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f4:	e7e0      	b.n	800f3b8 <__ieee754_rem_pio2+0xe8>
 800f3f6:	4b87      	ldr	r3, [pc, #540]	; (800f614 <__ieee754_rem_pio2+0x344>)
 800f3f8:	4598      	cmp	r8, r3
 800f3fa:	f300 80d8 	bgt.w	800f5ae <__ieee754_rem_pio2+0x2de>
 800f3fe:	f000 f96d 	bl	800f6dc <fabs>
 800f402:	ec55 4b10 	vmov	r4, r5, d0
 800f406:	ee10 0a10 	vmov	r0, s0
 800f40a:	a379      	add	r3, pc, #484	; (adr r3, 800f5f0 <__ieee754_rem_pio2+0x320>)
 800f40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f410:	4629      	mov	r1, r5
 800f412:	f7f1 f971 	bl	80006f8 <__aeabi_dmul>
 800f416:	4b80      	ldr	r3, [pc, #512]	; (800f618 <__ieee754_rem_pio2+0x348>)
 800f418:	2200      	movs	r2, #0
 800f41a:	f7f0 ffb7 	bl	800038c <__adddf3>
 800f41e:	f7f1 fc1b 	bl	8000c58 <__aeabi_d2iz>
 800f422:	4683      	mov	fp, r0
 800f424:	f7f1 f8fe 	bl	8000624 <__aeabi_i2d>
 800f428:	4602      	mov	r2, r0
 800f42a:	460b      	mov	r3, r1
 800f42c:	ec43 2b18 	vmov	d8, r2, r3
 800f430:	a367      	add	r3, pc, #412	; (adr r3, 800f5d0 <__ieee754_rem_pio2+0x300>)
 800f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f436:	f7f1 f95f 	bl	80006f8 <__aeabi_dmul>
 800f43a:	4602      	mov	r2, r0
 800f43c:	460b      	mov	r3, r1
 800f43e:	4620      	mov	r0, r4
 800f440:	4629      	mov	r1, r5
 800f442:	f7f0 ffa1 	bl	8000388 <__aeabi_dsub>
 800f446:	a364      	add	r3, pc, #400	; (adr r3, 800f5d8 <__ieee754_rem_pio2+0x308>)
 800f448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44c:	4606      	mov	r6, r0
 800f44e:	460f      	mov	r7, r1
 800f450:	ec51 0b18 	vmov	r0, r1, d8
 800f454:	f7f1 f950 	bl	80006f8 <__aeabi_dmul>
 800f458:	f1bb 0f1f 	cmp.w	fp, #31
 800f45c:	4604      	mov	r4, r0
 800f45e:	460d      	mov	r5, r1
 800f460:	dc0d      	bgt.n	800f47e <__ieee754_rem_pio2+0x1ae>
 800f462:	4b6e      	ldr	r3, [pc, #440]	; (800f61c <__ieee754_rem_pio2+0x34c>)
 800f464:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f46c:	4543      	cmp	r3, r8
 800f46e:	d006      	beq.n	800f47e <__ieee754_rem_pio2+0x1ae>
 800f470:	4622      	mov	r2, r4
 800f472:	462b      	mov	r3, r5
 800f474:	4630      	mov	r0, r6
 800f476:	4639      	mov	r1, r7
 800f478:	f7f0 ff86 	bl	8000388 <__aeabi_dsub>
 800f47c:	e00e      	b.n	800f49c <__ieee754_rem_pio2+0x1cc>
 800f47e:	462b      	mov	r3, r5
 800f480:	4622      	mov	r2, r4
 800f482:	4630      	mov	r0, r6
 800f484:	4639      	mov	r1, r7
 800f486:	f7f0 ff7f 	bl	8000388 <__aeabi_dsub>
 800f48a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f48e:	9303      	str	r3, [sp, #12]
 800f490:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f494:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f498:	2b10      	cmp	r3, #16
 800f49a:	dc02      	bgt.n	800f4a2 <__ieee754_rem_pio2+0x1d2>
 800f49c:	e9ca 0100 	strd	r0, r1, [sl]
 800f4a0:	e039      	b.n	800f516 <__ieee754_rem_pio2+0x246>
 800f4a2:	a34f      	add	r3, pc, #316	; (adr r3, 800f5e0 <__ieee754_rem_pio2+0x310>)
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	ec51 0b18 	vmov	r0, r1, d8
 800f4ac:	f7f1 f924 	bl	80006f8 <__aeabi_dmul>
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	460d      	mov	r5, r1
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	f7f0 ff64 	bl	8000388 <__aeabi_dsub>
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	4680      	mov	r8, r0
 800f4c6:	4689      	mov	r9, r1
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	4639      	mov	r1, r7
 800f4cc:	f7f0 ff5c 	bl	8000388 <__aeabi_dsub>
 800f4d0:	4622      	mov	r2, r4
 800f4d2:	462b      	mov	r3, r5
 800f4d4:	f7f0 ff58 	bl	8000388 <__aeabi_dsub>
 800f4d8:	a343      	add	r3, pc, #268	; (adr r3, 800f5e8 <__ieee754_rem_pio2+0x318>)
 800f4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4de:	4604      	mov	r4, r0
 800f4e0:	460d      	mov	r5, r1
 800f4e2:	ec51 0b18 	vmov	r0, r1, d8
 800f4e6:	f7f1 f907 	bl	80006f8 <__aeabi_dmul>
 800f4ea:	4622      	mov	r2, r4
 800f4ec:	462b      	mov	r3, r5
 800f4ee:	f7f0 ff4b 	bl	8000388 <__aeabi_dsub>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	460d      	mov	r5, r1
 800f4fa:	4640      	mov	r0, r8
 800f4fc:	4649      	mov	r1, r9
 800f4fe:	f7f0 ff43 	bl	8000388 <__aeabi_dsub>
 800f502:	9a03      	ldr	r2, [sp, #12]
 800f504:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f508:	1ad3      	subs	r3, r2, r3
 800f50a:	2b31      	cmp	r3, #49	; 0x31
 800f50c:	dc24      	bgt.n	800f558 <__ieee754_rem_pio2+0x288>
 800f50e:	e9ca 0100 	strd	r0, r1, [sl]
 800f512:	4646      	mov	r6, r8
 800f514:	464f      	mov	r7, r9
 800f516:	e9da 8900 	ldrd	r8, r9, [sl]
 800f51a:	4630      	mov	r0, r6
 800f51c:	4642      	mov	r2, r8
 800f51e:	464b      	mov	r3, r9
 800f520:	4639      	mov	r1, r7
 800f522:	f7f0 ff31 	bl	8000388 <__aeabi_dsub>
 800f526:	462b      	mov	r3, r5
 800f528:	4622      	mov	r2, r4
 800f52a:	f7f0 ff2d 	bl	8000388 <__aeabi_dsub>
 800f52e:	9b02      	ldr	r3, [sp, #8]
 800f530:	2b00      	cmp	r3, #0
 800f532:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f536:	f6bf af0b 	bge.w	800f350 <__ieee754_rem_pio2+0x80>
 800f53a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f53e:	f8ca 3004 	str.w	r3, [sl, #4]
 800f542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f546:	f8ca 8000 	str.w	r8, [sl]
 800f54a:	f8ca 0008 	str.w	r0, [sl, #8]
 800f54e:	f8ca 300c 	str.w	r3, [sl, #12]
 800f552:	f1cb 0b00 	rsb	fp, fp, #0
 800f556:	e6fb      	b.n	800f350 <__ieee754_rem_pio2+0x80>
 800f558:	a327      	add	r3, pc, #156	; (adr r3, 800f5f8 <__ieee754_rem_pio2+0x328>)
 800f55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55e:	ec51 0b18 	vmov	r0, r1, d8
 800f562:	f7f1 f8c9 	bl	80006f8 <__aeabi_dmul>
 800f566:	4604      	mov	r4, r0
 800f568:	460d      	mov	r5, r1
 800f56a:	4602      	mov	r2, r0
 800f56c:	460b      	mov	r3, r1
 800f56e:	4640      	mov	r0, r8
 800f570:	4649      	mov	r1, r9
 800f572:	f7f0 ff09 	bl	8000388 <__aeabi_dsub>
 800f576:	4602      	mov	r2, r0
 800f578:	460b      	mov	r3, r1
 800f57a:	4606      	mov	r6, r0
 800f57c:	460f      	mov	r7, r1
 800f57e:	4640      	mov	r0, r8
 800f580:	4649      	mov	r1, r9
 800f582:	f7f0 ff01 	bl	8000388 <__aeabi_dsub>
 800f586:	4622      	mov	r2, r4
 800f588:	462b      	mov	r3, r5
 800f58a:	f7f0 fefd 	bl	8000388 <__aeabi_dsub>
 800f58e:	a31c      	add	r3, pc, #112	; (adr r3, 800f600 <__ieee754_rem_pio2+0x330>)
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	4604      	mov	r4, r0
 800f596:	460d      	mov	r5, r1
 800f598:	ec51 0b18 	vmov	r0, r1, d8
 800f59c:	f7f1 f8ac 	bl	80006f8 <__aeabi_dmul>
 800f5a0:	4622      	mov	r2, r4
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	f7f0 fef0 	bl	8000388 <__aeabi_dsub>
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	460d      	mov	r5, r1
 800f5ac:	e760      	b.n	800f470 <__ieee754_rem_pio2+0x1a0>
 800f5ae:	4b1c      	ldr	r3, [pc, #112]	; (800f620 <__ieee754_rem_pio2+0x350>)
 800f5b0:	4598      	cmp	r8, r3
 800f5b2:	dd37      	ble.n	800f624 <__ieee754_rem_pio2+0x354>
 800f5b4:	ee10 2a10 	vmov	r2, s0
 800f5b8:	462b      	mov	r3, r5
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	4629      	mov	r1, r5
 800f5be:	f7f0 fee3 	bl	8000388 <__aeabi_dsub>
 800f5c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f5c6:	e9ca 0100 	strd	r0, r1, [sl]
 800f5ca:	e695      	b.n	800f2f8 <__ieee754_rem_pio2+0x28>
 800f5cc:	f3af 8000 	nop.w
 800f5d0:	54400000 	.word	0x54400000
 800f5d4:	3ff921fb 	.word	0x3ff921fb
 800f5d8:	1a626331 	.word	0x1a626331
 800f5dc:	3dd0b461 	.word	0x3dd0b461
 800f5e0:	1a600000 	.word	0x1a600000
 800f5e4:	3dd0b461 	.word	0x3dd0b461
 800f5e8:	2e037073 	.word	0x2e037073
 800f5ec:	3ba3198a 	.word	0x3ba3198a
 800f5f0:	6dc9c883 	.word	0x6dc9c883
 800f5f4:	3fe45f30 	.word	0x3fe45f30
 800f5f8:	2e000000 	.word	0x2e000000
 800f5fc:	3ba3198a 	.word	0x3ba3198a
 800f600:	252049c1 	.word	0x252049c1
 800f604:	397b839a 	.word	0x397b839a
 800f608:	3fe921fb 	.word	0x3fe921fb
 800f60c:	4002d97b 	.word	0x4002d97b
 800f610:	3ff921fb 	.word	0x3ff921fb
 800f614:	413921fb 	.word	0x413921fb
 800f618:	3fe00000 	.word	0x3fe00000
 800f61c:	0802c5c0 	.word	0x0802c5c0
 800f620:	7fefffff 	.word	0x7fefffff
 800f624:	ea4f 5628 	mov.w	r6, r8, asr #20
 800f628:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f62c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f630:	4620      	mov	r0, r4
 800f632:	460d      	mov	r5, r1
 800f634:	f7f1 fb10 	bl	8000c58 <__aeabi_d2iz>
 800f638:	f7f0 fff4 	bl	8000624 <__aeabi_i2d>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	4620      	mov	r0, r4
 800f642:	4629      	mov	r1, r5
 800f644:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f648:	f7f0 fe9e 	bl	8000388 <__aeabi_dsub>
 800f64c:	4b21      	ldr	r3, [pc, #132]	; (800f6d4 <__ieee754_rem_pio2+0x404>)
 800f64e:	2200      	movs	r2, #0
 800f650:	f7f1 f852 	bl	80006f8 <__aeabi_dmul>
 800f654:	460d      	mov	r5, r1
 800f656:	4604      	mov	r4, r0
 800f658:	f7f1 fafe 	bl	8000c58 <__aeabi_d2iz>
 800f65c:	f7f0 ffe2 	bl	8000624 <__aeabi_i2d>
 800f660:	4602      	mov	r2, r0
 800f662:	460b      	mov	r3, r1
 800f664:	4620      	mov	r0, r4
 800f666:	4629      	mov	r1, r5
 800f668:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f66c:	f7f0 fe8c 	bl	8000388 <__aeabi_dsub>
 800f670:	4b18      	ldr	r3, [pc, #96]	; (800f6d4 <__ieee754_rem_pio2+0x404>)
 800f672:	2200      	movs	r2, #0
 800f674:	f7f1 f840 	bl	80006f8 <__aeabi_dmul>
 800f678:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f67c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f680:	2703      	movs	r7, #3
 800f682:	2400      	movs	r4, #0
 800f684:	2500      	movs	r5, #0
 800f686:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800f68a:	4622      	mov	r2, r4
 800f68c:	462b      	mov	r3, r5
 800f68e:	46b9      	mov	r9, r7
 800f690:	3f01      	subs	r7, #1
 800f692:	f7f1 fa99 	bl	8000bc8 <__aeabi_dcmpeq>
 800f696:	2800      	cmp	r0, #0
 800f698:	d1f5      	bne.n	800f686 <__ieee754_rem_pio2+0x3b6>
 800f69a:	4b0f      	ldr	r3, [pc, #60]	; (800f6d8 <__ieee754_rem_pio2+0x408>)
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	2302      	movs	r3, #2
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	4632      	mov	r2, r6
 800f6a4:	464b      	mov	r3, r9
 800f6a6:	4651      	mov	r1, sl
 800f6a8:	a804      	add	r0, sp, #16
 800f6aa:	f000 fa6d 	bl	800fb88 <__kernel_rem_pio2>
 800f6ae:	9b02      	ldr	r3, [sp, #8]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	4683      	mov	fp, r0
 800f6b4:	f6bf ae4c 	bge.w	800f350 <__ieee754_rem_pio2+0x80>
 800f6b8:	e9da 2100 	ldrd	r2, r1, [sl]
 800f6bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6c0:	e9ca 2300 	strd	r2, r3, [sl]
 800f6c4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f6c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6cc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f6d0:	e73f      	b.n	800f552 <__ieee754_rem_pio2+0x282>
 800f6d2:	bf00      	nop
 800f6d4:	41700000 	.word	0x41700000
 800f6d8:	0802c640 	.word	0x0802c640

0800f6dc <fabs>:
 800f6dc:	ec51 0b10 	vmov	r0, r1, d0
 800f6e0:	ee10 2a10 	vmov	r2, s0
 800f6e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f6e8:	ec43 2b10 	vmov	d0, r2, r3
 800f6ec:	4770      	bx	lr
	...

0800f6f0 <__ieee754_logf>:
 800f6f0:	ee10 3a10 	vmov	r3, s0
 800f6f4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f6f8:	d106      	bne.n	800f708 <__ieee754_logf+0x18>
 800f6fa:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800f894 <__ieee754_logf+0x1a4>
 800f6fe:	eddf 7a66 	vldr	s15, [pc, #408]	; 800f898 <__ieee754_logf+0x1a8>
 800f702:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f706:	4770      	bx	lr
 800f708:	2b00      	cmp	r3, #0
 800f70a:	da02      	bge.n	800f712 <__ieee754_logf+0x22>
 800f70c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f710:	e7f5      	b.n	800f6fe <__ieee754_logf+0xe>
 800f712:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f716:	db02      	blt.n	800f71e <__ieee754_logf+0x2e>
 800f718:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f71c:	4770      	bx	lr
 800f71e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f722:	bfb8      	it	lt
 800f724:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 800f89c <__ieee754_logf+0x1ac>
 800f728:	485d      	ldr	r0, [pc, #372]	; (800f8a0 <__ieee754_logf+0x1b0>)
 800f72a:	bfbe      	ittt	lt
 800f72c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f730:	f06f 0118 	mvnlt.w	r1, #24
 800f734:	ee17 3a90 	vmovlt	r3, s15
 800f738:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800f73c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f740:	4418      	add	r0, r3
 800f742:	bfa8      	it	ge
 800f744:	2100      	movge	r1, #0
 800f746:	3a7f      	subs	r2, #127	; 0x7f
 800f748:	440a      	add	r2, r1
 800f74a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800f74e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800f752:	4319      	orrs	r1, r3
 800f754:	ee00 1a10 	vmov	s0, r1
 800f758:	4952      	ldr	r1, [pc, #328]	; (800f8a4 <__ieee754_logf+0x1b4>)
 800f75a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800f75e:	f103 000f 	add.w	r0, r3, #15
 800f762:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f766:	4001      	ands	r1, r0
 800f768:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f76c:	bb89      	cbnz	r1, 800f7d2 <__ieee754_logf+0xe2>
 800f76e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f776:	d10f      	bne.n	800f798 <__ieee754_logf+0xa8>
 800f778:	2a00      	cmp	r2, #0
 800f77a:	f000 8087 	beq.w	800f88c <__ieee754_logf+0x19c>
 800f77e:	ee07 2a90 	vmov	s15, r2
 800f782:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800f8a8 <__ieee754_logf+0x1b8>
 800f786:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f8ac <__ieee754_logf+0x1bc>
 800f78a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f78e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f792:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f796:	4770      	bx	lr
 800f798:	eddf 6a45 	vldr	s13, [pc, #276]	; 800f8b0 <__ieee754_logf+0x1c0>
 800f79c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f7a0:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f7a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f7a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7ac:	b912      	cbnz	r2, 800f7b4 <__ieee754_logf+0xc4>
 800f7ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f7b2:	4770      	bx	lr
 800f7b4:	ee07 2a90 	vmov	s15, r2
 800f7b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f8a8 <__ieee754_logf+0x1b8>
 800f7bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7c0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f7c4:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f7c8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f8ac <__ieee754_logf+0x1bc>
 800f7cc:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f7d0:	4770      	bx	lr
 800f7d2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f7d6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f7da:	eddf 5a36 	vldr	s11, [pc, #216]	; 800f8b4 <__ieee754_logf+0x1c4>
 800f7de:	eddf 4a36 	vldr	s9, [pc, #216]	; 800f8b8 <__ieee754_logf+0x1c8>
 800f7e2:	4936      	ldr	r1, [pc, #216]	; (800f8bc <__ieee754_logf+0x1cc>)
 800f7e4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f7e8:	4419      	add	r1, r3
 800f7ea:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800f7ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f7f2:	430b      	orrs	r3, r1
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	ee07 2a90 	vmov	s15, r2
 800f7fa:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f7fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f802:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f806:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800f8c0 <__ieee754_logf+0x1d0>
 800f80a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f80e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800f8c4 <__ieee754_logf+0x1d4>
 800f812:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f816:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800f8c8 <__ieee754_logf+0x1d8>
 800f81a:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f81e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 800f8cc <__ieee754_logf+0x1dc>
 800f822:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f826:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800f8d0 <__ieee754_logf+0x1e0>
 800f82a:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f82e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f832:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f836:	dd1a      	ble.n	800f86e <__ieee754_logf+0x17e>
 800f838:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f83c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f840:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f844:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f848:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f84c:	b912      	cbnz	r2, 800f854 <__ieee754_logf+0x164>
 800f84e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f852:	e7ac      	b.n	800f7ae <__ieee754_logf+0xbe>
 800f854:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800f8a8 <__ieee754_logf+0x1b8>
 800f858:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f85c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f860:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f864:	eddf 7a11 	vldr	s15, [pc, #68]	; 800f8ac <__ieee754_logf+0x1bc>
 800f868:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f86c:	4770      	bx	lr
 800f86e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f872:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f876:	b912      	cbnz	r2, 800f87e <__ieee754_logf+0x18e>
 800f878:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f87c:	4770      	bx	lr
 800f87e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800f8a8 <__ieee754_logf+0x1b8>
 800f882:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f886:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f88a:	e7eb      	b.n	800f864 <__ieee754_logf+0x174>
 800f88c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f898 <__ieee754_logf+0x1a8>
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	cc000000 	.word	0xcc000000
 800f898:	00000000 	.word	0x00000000
 800f89c:	4c000000 	.word	0x4c000000
 800f8a0:	004afb20 	.word	0x004afb20
 800f8a4:	007ffff0 	.word	0x007ffff0
 800f8a8:	3717f7d1 	.word	0x3717f7d1
 800f8ac:	3f317180 	.word	0x3f317180
 800f8b0:	3eaaaaab 	.word	0x3eaaaaab
 800f8b4:	3e1cd04f 	.word	0x3e1cd04f
 800f8b8:	3e178897 	.word	0x3e178897
 800f8bc:	ffcf5c30 	.word	0xffcf5c30
 800f8c0:	3e638e29 	.word	0x3e638e29
 800f8c4:	3ecccccd 	.word	0x3ecccccd
 800f8c8:	3e3a3325 	.word	0x3e3a3325
 800f8cc:	3e924925 	.word	0x3e924925
 800f8d0:	3f2aaaab 	.word	0x3f2aaaab
 800f8d4:	00000000 	.word	0x00000000

0800f8d8 <scalbn>:
 800f8d8:	b570      	push	{r4, r5, r6, lr}
 800f8da:	ec55 4b10 	vmov	r4, r5, d0
 800f8de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f8e2:	4606      	mov	r6, r0
 800f8e4:	462b      	mov	r3, r5
 800f8e6:	b999      	cbnz	r1, 800f910 <scalbn+0x38>
 800f8e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f8ec:	4323      	orrs	r3, r4
 800f8ee:	d03f      	beq.n	800f970 <scalbn+0x98>
 800f8f0:	4b35      	ldr	r3, [pc, #212]	; (800f9c8 <scalbn+0xf0>)
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	ee10 0a10 	vmov	r0, s0
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f7f0 fefd 	bl	80006f8 <__aeabi_dmul>
 800f8fe:	4b33      	ldr	r3, [pc, #204]	; (800f9cc <scalbn+0xf4>)
 800f900:	429e      	cmp	r6, r3
 800f902:	4604      	mov	r4, r0
 800f904:	460d      	mov	r5, r1
 800f906:	da10      	bge.n	800f92a <scalbn+0x52>
 800f908:	a327      	add	r3, pc, #156	; (adr r3, 800f9a8 <scalbn+0xd0>)
 800f90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90e:	e01f      	b.n	800f950 <scalbn+0x78>
 800f910:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f914:	4291      	cmp	r1, r2
 800f916:	d10c      	bne.n	800f932 <scalbn+0x5a>
 800f918:	ee10 2a10 	vmov	r2, s0
 800f91c:	4620      	mov	r0, r4
 800f91e:	4629      	mov	r1, r5
 800f920:	f7f0 fd34 	bl	800038c <__adddf3>
 800f924:	4604      	mov	r4, r0
 800f926:	460d      	mov	r5, r1
 800f928:	e022      	b.n	800f970 <scalbn+0x98>
 800f92a:	460b      	mov	r3, r1
 800f92c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f930:	3936      	subs	r1, #54	; 0x36
 800f932:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f936:	4296      	cmp	r6, r2
 800f938:	dd0d      	ble.n	800f956 <scalbn+0x7e>
 800f93a:	2d00      	cmp	r5, #0
 800f93c:	a11c      	add	r1, pc, #112	; (adr r1, 800f9b0 <scalbn+0xd8>)
 800f93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f942:	da02      	bge.n	800f94a <scalbn+0x72>
 800f944:	a11c      	add	r1, pc, #112	; (adr r1, 800f9b8 <scalbn+0xe0>)
 800f946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f94a:	a319      	add	r3, pc, #100	; (adr r3, 800f9b0 <scalbn+0xd8>)
 800f94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f950:	f7f0 fed2 	bl	80006f8 <__aeabi_dmul>
 800f954:	e7e6      	b.n	800f924 <scalbn+0x4c>
 800f956:	1872      	adds	r2, r6, r1
 800f958:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f95c:	428a      	cmp	r2, r1
 800f95e:	dcec      	bgt.n	800f93a <scalbn+0x62>
 800f960:	2a00      	cmp	r2, #0
 800f962:	dd08      	ble.n	800f976 <scalbn+0x9e>
 800f964:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f968:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f96c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f970:	ec45 4b10 	vmov	d0, r4, r5
 800f974:	bd70      	pop	{r4, r5, r6, pc}
 800f976:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f97a:	da08      	bge.n	800f98e <scalbn+0xb6>
 800f97c:	2d00      	cmp	r5, #0
 800f97e:	a10a      	add	r1, pc, #40	; (adr r1, 800f9a8 <scalbn+0xd0>)
 800f980:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f984:	dac0      	bge.n	800f908 <scalbn+0x30>
 800f986:	a10e      	add	r1, pc, #56	; (adr r1, 800f9c0 <scalbn+0xe8>)
 800f988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f98c:	e7bc      	b.n	800f908 <scalbn+0x30>
 800f98e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f992:	3236      	adds	r2, #54	; 0x36
 800f994:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f998:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f99c:	4620      	mov	r0, r4
 800f99e:	4b0c      	ldr	r3, [pc, #48]	; (800f9d0 <scalbn+0xf8>)
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	e7d5      	b.n	800f950 <scalbn+0x78>
 800f9a4:	f3af 8000 	nop.w
 800f9a8:	c2f8f359 	.word	0xc2f8f359
 800f9ac:	01a56e1f 	.word	0x01a56e1f
 800f9b0:	8800759c 	.word	0x8800759c
 800f9b4:	7e37e43c 	.word	0x7e37e43c
 800f9b8:	8800759c 	.word	0x8800759c
 800f9bc:	fe37e43c 	.word	0xfe37e43c
 800f9c0:	c2f8f359 	.word	0xc2f8f359
 800f9c4:	81a56e1f 	.word	0x81a56e1f
 800f9c8:	43500000 	.word	0x43500000
 800f9cc:	ffff3cb0 	.word	0xffff3cb0
 800f9d0:	3c900000 	.word	0x3c900000

0800f9d4 <__ieee754_sqrt>:
 800f9d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d8:	ec55 4b10 	vmov	r4, r5, d0
 800f9dc:	4e67      	ldr	r6, [pc, #412]	; (800fb7c <__ieee754_sqrt+0x1a8>)
 800f9de:	43ae      	bics	r6, r5
 800f9e0:	ee10 0a10 	vmov	r0, s0
 800f9e4:	ee10 2a10 	vmov	r2, s0
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	462b      	mov	r3, r5
 800f9ec:	d10d      	bne.n	800fa0a <__ieee754_sqrt+0x36>
 800f9ee:	f7f0 fe83 	bl	80006f8 <__aeabi_dmul>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	f7f0 fcc7 	bl	800038c <__adddf3>
 800f9fe:	4604      	mov	r4, r0
 800fa00:	460d      	mov	r5, r1
 800fa02:	ec45 4b10 	vmov	d0, r4, r5
 800fa06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa0a:	2d00      	cmp	r5, #0
 800fa0c:	dc0b      	bgt.n	800fa26 <__ieee754_sqrt+0x52>
 800fa0e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fa12:	4326      	orrs	r6, r4
 800fa14:	d0f5      	beq.n	800fa02 <__ieee754_sqrt+0x2e>
 800fa16:	b135      	cbz	r5, 800fa26 <__ieee754_sqrt+0x52>
 800fa18:	f7f0 fcb6 	bl	8000388 <__aeabi_dsub>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	460b      	mov	r3, r1
 800fa20:	f7f0 ff94 	bl	800094c <__aeabi_ddiv>
 800fa24:	e7eb      	b.n	800f9fe <__ieee754_sqrt+0x2a>
 800fa26:	1509      	asrs	r1, r1, #20
 800fa28:	f000 808d 	beq.w	800fb46 <__ieee754_sqrt+0x172>
 800fa2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa30:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fa34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa38:	07c9      	lsls	r1, r1, #31
 800fa3a:	bf5c      	itt	pl
 800fa3c:	005b      	lslpl	r3, r3, #1
 800fa3e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fa42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa46:	bf58      	it	pl
 800fa48:	0052      	lslpl	r2, r2, #1
 800fa4a:	2500      	movs	r5, #0
 800fa4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fa50:	1076      	asrs	r6, r6, #1
 800fa52:	0052      	lsls	r2, r2, #1
 800fa54:	f04f 0e16 	mov.w	lr, #22
 800fa58:	46ac      	mov	ip, r5
 800fa5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa5e:	eb0c 0001 	add.w	r0, ip, r1
 800fa62:	4298      	cmp	r0, r3
 800fa64:	bfde      	ittt	le
 800fa66:	1a1b      	suble	r3, r3, r0
 800fa68:	eb00 0c01 	addle.w	ip, r0, r1
 800fa6c:	186d      	addle	r5, r5, r1
 800fa6e:	005b      	lsls	r3, r3, #1
 800fa70:	f1be 0e01 	subs.w	lr, lr, #1
 800fa74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fa78:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fa7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fa80:	d1ed      	bne.n	800fa5e <__ieee754_sqrt+0x8a>
 800fa82:	4674      	mov	r4, lr
 800fa84:	2720      	movs	r7, #32
 800fa86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fa8a:	4563      	cmp	r3, ip
 800fa8c:	eb01 000e 	add.w	r0, r1, lr
 800fa90:	dc02      	bgt.n	800fa98 <__ieee754_sqrt+0xc4>
 800fa92:	d113      	bne.n	800fabc <__ieee754_sqrt+0xe8>
 800fa94:	4290      	cmp	r0, r2
 800fa96:	d811      	bhi.n	800fabc <__ieee754_sqrt+0xe8>
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	eb00 0e01 	add.w	lr, r0, r1
 800fa9e:	da57      	bge.n	800fb50 <__ieee754_sqrt+0x17c>
 800faa0:	f1be 0f00 	cmp.w	lr, #0
 800faa4:	db54      	blt.n	800fb50 <__ieee754_sqrt+0x17c>
 800faa6:	f10c 0801 	add.w	r8, ip, #1
 800faaa:	eba3 030c 	sub.w	r3, r3, ip
 800faae:	4290      	cmp	r0, r2
 800fab0:	bf88      	it	hi
 800fab2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fab6:	1a12      	subs	r2, r2, r0
 800fab8:	440c      	add	r4, r1
 800faba:	46c4      	mov	ip, r8
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	3f01      	subs	r7, #1
 800fac0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fac4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fac8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800facc:	d1dd      	bne.n	800fa8a <__ieee754_sqrt+0xb6>
 800face:	4313      	orrs	r3, r2
 800fad0:	d01b      	beq.n	800fb0a <__ieee754_sqrt+0x136>
 800fad2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fb80 <__ieee754_sqrt+0x1ac>
 800fad6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fb84 <__ieee754_sqrt+0x1b0>
 800fada:	e9da 0100 	ldrd	r0, r1, [sl]
 800fade:	e9db 2300 	ldrd	r2, r3, [fp]
 800fae2:	f7f0 fc51 	bl	8000388 <__aeabi_dsub>
 800fae6:	e9da 8900 	ldrd	r8, r9, [sl]
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	4640      	mov	r0, r8
 800faf0:	4649      	mov	r1, r9
 800faf2:	f7f1 f87d 	bl	8000bf0 <__aeabi_dcmple>
 800faf6:	b140      	cbz	r0, 800fb0a <__ieee754_sqrt+0x136>
 800faf8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fafc:	e9da 0100 	ldrd	r0, r1, [sl]
 800fb00:	e9db 2300 	ldrd	r2, r3, [fp]
 800fb04:	d126      	bne.n	800fb54 <__ieee754_sqrt+0x180>
 800fb06:	3501      	adds	r5, #1
 800fb08:	463c      	mov	r4, r7
 800fb0a:	106a      	asrs	r2, r5, #1
 800fb0c:	0863      	lsrs	r3, r4, #1
 800fb0e:	07e9      	lsls	r1, r5, #31
 800fb10:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fb14:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fb18:	bf48      	it	mi
 800fb1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fb1e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fb22:	461c      	mov	r4, r3
 800fb24:	e76d      	b.n	800fa02 <__ieee754_sqrt+0x2e>
 800fb26:	0ad3      	lsrs	r3, r2, #11
 800fb28:	3815      	subs	r0, #21
 800fb2a:	0552      	lsls	r2, r2, #21
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d0fa      	beq.n	800fb26 <__ieee754_sqrt+0x152>
 800fb30:	02dc      	lsls	r4, r3, #11
 800fb32:	d50a      	bpl.n	800fb4a <__ieee754_sqrt+0x176>
 800fb34:	f1c1 0420 	rsb	r4, r1, #32
 800fb38:	fa22 f404 	lsr.w	r4, r2, r4
 800fb3c:	1e4d      	subs	r5, r1, #1
 800fb3e:	408a      	lsls	r2, r1
 800fb40:	4323      	orrs	r3, r4
 800fb42:	1b41      	subs	r1, r0, r5
 800fb44:	e772      	b.n	800fa2c <__ieee754_sqrt+0x58>
 800fb46:	4608      	mov	r0, r1
 800fb48:	e7f0      	b.n	800fb2c <__ieee754_sqrt+0x158>
 800fb4a:	005b      	lsls	r3, r3, #1
 800fb4c:	3101      	adds	r1, #1
 800fb4e:	e7ef      	b.n	800fb30 <__ieee754_sqrt+0x15c>
 800fb50:	46e0      	mov	r8, ip
 800fb52:	e7aa      	b.n	800faaa <__ieee754_sqrt+0xd6>
 800fb54:	f7f0 fc1a 	bl	800038c <__adddf3>
 800fb58:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	460b      	mov	r3, r1
 800fb60:	4640      	mov	r0, r8
 800fb62:	4649      	mov	r1, r9
 800fb64:	f7f1 f83a 	bl	8000bdc <__aeabi_dcmplt>
 800fb68:	b120      	cbz	r0, 800fb74 <__ieee754_sqrt+0x1a0>
 800fb6a:	1ca0      	adds	r0, r4, #2
 800fb6c:	bf08      	it	eq
 800fb6e:	3501      	addeq	r5, #1
 800fb70:	3402      	adds	r4, #2
 800fb72:	e7ca      	b.n	800fb0a <__ieee754_sqrt+0x136>
 800fb74:	3401      	adds	r4, #1
 800fb76:	f024 0401 	bic.w	r4, r4, #1
 800fb7a:	e7c6      	b.n	800fb0a <__ieee754_sqrt+0x136>
 800fb7c:	7ff00000 	.word	0x7ff00000
 800fb80:	20000968 	.word	0x20000968
 800fb84:	20000970 	.word	0x20000970

0800fb88 <__kernel_rem_pio2>:
 800fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8c:	ed2d 8b02 	vpush	{d8}
 800fb90:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fb94:	f112 0f14 	cmn.w	r2, #20
 800fb98:	9306      	str	r3, [sp, #24]
 800fb9a:	9104      	str	r1, [sp, #16]
 800fb9c:	4bc2      	ldr	r3, [pc, #776]	; (800fea8 <__kernel_rem_pio2+0x320>)
 800fb9e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800fba0:	9009      	str	r0, [sp, #36]	; 0x24
 800fba2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	9b06      	ldr	r3, [sp, #24]
 800fbaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800fbae:	bfa8      	it	ge
 800fbb0:	1ed4      	subge	r4, r2, #3
 800fbb2:	9305      	str	r3, [sp, #20]
 800fbb4:	bfb2      	itee	lt
 800fbb6:	2400      	movlt	r4, #0
 800fbb8:	2318      	movge	r3, #24
 800fbba:	fb94 f4f3 	sdivge	r4, r4, r3
 800fbbe:	f06f 0317 	mvn.w	r3, #23
 800fbc2:	fb04 3303 	mla	r3, r4, r3, r3
 800fbc6:	eb03 0a02 	add.w	sl, r3, r2
 800fbca:	9b00      	ldr	r3, [sp, #0]
 800fbcc:	9a05      	ldr	r2, [sp, #20]
 800fbce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800fe98 <__kernel_rem_pio2+0x310>
 800fbd2:	eb03 0802 	add.w	r8, r3, r2
 800fbd6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800fbd8:	1aa7      	subs	r7, r4, r2
 800fbda:	ae20      	add	r6, sp, #128	; 0x80
 800fbdc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fbe0:	2500      	movs	r5, #0
 800fbe2:	4545      	cmp	r5, r8
 800fbe4:	dd13      	ble.n	800fc0e <__kernel_rem_pio2+0x86>
 800fbe6:	9b06      	ldr	r3, [sp, #24]
 800fbe8:	aa20      	add	r2, sp, #128	; 0x80
 800fbea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fbee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800fbf2:	f04f 0800 	mov.w	r8, #0
 800fbf6:	9b00      	ldr	r3, [sp, #0]
 800fbf8:	4598      	cmp	r8, r3
 800fbfa:	dc31      	bgt.n	800fc60 <__kernel_rem_pio2+0xd8>
 800fbfc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800fe98 <__kernel_rem_pio2+0x310>
 800fc00:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fc04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc08:	462f      	mov	r7, r5
 800fc0a:	2600      	movs	r6, #0
 800fc0c:	e01b      	b.n	800fc46 <__kernel_rem_pio2+0xbe>
 800fc0e:	42ef      	cmn	r7, r5
 800fc10:	d407      	bmi.n	800fc22 <__kernel_rem_pio2+0x9a>
 800fc12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fc16:	f7f0 fd05 	bl	8000624 <__aeabi_i2d>
 800fc1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fc1e:	3501      	adds	r5, #1
 800fc20:	e7df      	b.n	800fbe2 <__kernel_rem_pio2+0x5a>
 800fc22:	ec51 0b18 	vmov	r0, r1, d8
 800fc26:	e7f8      	b.n	800fc1a <__kernel_rem_pio2+0x92>
 800fc28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fc30:	f7f0 fd62 	bl	80006f8 <__aeabi_dmul>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc3c:	f7f0 fba6 	bl	800038c <__adddf3>
 800fc40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc44:	3601      	adds	r6, #1
 800fc46:	9b05      	ldr	r3, [sp, #20]
 800fc48:	429e      	cmp	r6, r3
 800fc4a:	f1a7 0708 	sub.w	r7, r7, #8
 800fc4e:	ddeb      	ble.n	800fc28 <__kernel_rem_pio2+0xa0>
 800fc50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc54:	f108 0801 	add.w	r8, r8, #1
 800fc58:	ecab 7b02 	vstmia	fp!, {d7}
 800fc5c:	3508      	adds	r5, #8
 800fc5e:	e7ca      	b.n	800fbf6 <__kernel_rem_pio2+0x6e>
 800fc60:	9b00      	ldr	r3, [sp, #0]
 800fc62:	aa0c      	add	r2, sp, #48	; 0x30
 800fc64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc68:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc6a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800fc6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fc70:	9c00      	ldr	r4, [sp, #0]
 800fc72:	930a      	str	r3, [sp, #40]	; 0x28
 800fc74:	00e3      	lsls	r3, r4, #3
 800fc76:	9308      	str	r3, [sp, #32]
 800fc78:	ab98      	add	r3, sp, #608	; 0x260
 800fc7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc7e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fc82:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800fc86:	ab70      	add	r3, sp, #448	; 0x1c0
 800fc88:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fc8c:	46c3      	mov	fp, r8
 800fc8e:	46a1      	mov	r9, r4
 800fc90:	f1b9 0f00 	cmp.w	r9, #0
 800fc94:	f1a5 0508 	sub.w	r5, r5, #8
 800fc98:	dc77      	bgt.n	800fd8a <__kernel_rem_pio2+0x202>
 800fc9a:	ec47 6b10 	vmov	d0, r6, r7
 800fc9e:	4650      	mov	r0, sl
 800fca0:	f7ff fe1a 	bl	800f8d8 <scalbn>
 800fca4:	ec57 6b10 	vmov	r6, r7, d0
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fcae:	ee10 0a10 	vmov	r0, s0
 800fcb2:	4639      	mov	r1, r7
 800fcb4:	f7f0 fd20 	bl	80006f8 <__aeabi_dmul>
 800fcb8:	ec41 0b10 	vmov	d0, r0, r1
 800fcbc:	f000 fab4 	bl	8010228 <floor>
 800fcc0:	4b7a      	ldr	r3, [pc, #488]	; (800feac <__kernel_rem_pio2+0x324>)
 800fcc2:	ec51 0b10 	vmov	r0, r1, d0
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f7f0 fd16 	bl	80006f8 <__aeabi_dmul>
 800fccc:	4602      	mov	r2, r0
 800fcce:	460b      	mov	r3, r1
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	4639      	mov	r1, r7
 800fcd4:	f7f0 fb58 	bl	8000388 <__aeabi_dsub>
 800fcd8:	460f      	mov	r7, r1
 800fcda:	4606      	mov	r6, r0
 800fcdc:	f7f0 ffbc 	bl	8000c58 <__aeabi_d2iz>
 800fce0:	9002      	str	r0, [sp, #8]
 800fce2:	f7f0 fc9f 	bl	8000624 <__aeabi_i2d>
 800fce6:	4602      	mov	r2, r0
 800fce8:	460b      	mov	r3, r1
 800fcea:	4630      	mov	r0, r6
 800fcec:	4639      	mov	r1, r7
 800fcee:	f7f0 fb4b 	bl	8000388 <__aeabi_dsub>
 800fcf2:	f1ba 0f00 	cmp.w	sl, #0
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	460f      	mov	r7, r1
 800fcfa:	dd6d      	ble.n	800fdd8 <__kernel_rem_pio2+0x250>
 800fcfc:	1e61      	subs	r1, r4, #1
 800fcfe:	ab0c      	add	r3, sp, #48	; 0x30
 800fd00:	9d02      	ldr	r5, [sp, #8]
 800fd02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd06:	f1ca 0018 	rsb	r0, sl, #24
 800fd0a:	fa43 f200 	asr.w	r2, r3, r0
 800fd0e:	4415      	add	r5, r2
 800fd10:	4082      	lsls	r2, r0
 800fd12:	1a9b      	subs	r3, r3, r2
 800fd14:	aa0c      	add	r2, sp, #48	; 0x30
 800fd16:	9502      	str	r5, [sp, #8]
 800fd18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fd1c:	f1ca 0217 	rsb	r2, sl, #23
 800fd20:	fa43 fb02 	asr.w	fp, r3, r2
 800fd24:	f1bb 0f00 	cmp.w	fp, #0
 800fd28:	dd65      	ble.n	800fdf6 <__kernel_rem_pio2+0x26e>
 800fd2a:	9b02      	ldr	r3, [sp, #8]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	3301      	adds	r3, #1
 800fd30:	9302      	str	r3, [sp, #8]
 800fd32:	4615      	mov	r5, r2
 800fd34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fd38:	4294      	cmp	r4, r2
 800fd3a:	f300 809f 	bgt.w	800fe7c <__kernel_rem_pio2+0x2f4>
 800fd3e:	f1ba 0f00 	cmp.w	sl, #0
 800fd42:	dd07      	ble.n	800fd54 <__kernel_rem_pio2+0x1cc>
 800fd44:	f1ba 0f01 	cmp.w	sl, #1
 800fd48:	f000 80c1 	beq.w	800fece <__kernel_rem_pio2+0x346>
 800fd4c:	f1ba 0f02 	cmp.w	sl, #2
 800fd50:	f000 80c7 	beq.w	800fee2 <__kernel_rem_pio2+0x35a>
 800fd54:	f1bb 0f02 	cmp.w	fp, #2
 800fd58:	d14d      	bne.n	800fdf6 <__kernel_rem_pio2+0x26e>
 800fd5a:	4632      	mov	r2, r6
 800fd5c:	463b      	mov	r3, r7
 800fd5e:	4954      	ldr	r1, [pc, #336]	; (800feb0 <__kernel_rem_pio2+0x328>)
 800fd60:	2000      	movs	r0, #0
 800fd62:	f7f0 fb11 	bl	8000388 <__aeabi_dsub>
 800fd66:	4606      	mov	r6, r0
 800fd68:	460f      	mov	r7, r1
 800fd6a:	2d00      	cmp	r5, #0
 800fd6c:	d043      	beq.n	800fdf6 <__kernel_rem_pio2+0x26e>
 800fd6e:	4650      	mov	r0, sl
 800fd70:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800fea0 <__kernel_rem_pio2+0x318>
 800fd74:	f7ff fdb0 	bl	800f8d8 <scalbn>
 800fd78:	4630      	mov	r0, r6
 800fd7a:	4639      	mov	r1, r7
 800fd7c:	ec53 2b10 	vmov	r2, r3, d0
 800fd80:	f7f0 fb02 	bl	8000388 <__aeabi_dsub>
 800fd84:	4606      	mov	r6, r0
 800fd86:	460f      	mov	r7, r1
 800fd88:	e035      	b.n	800fdf6 <__kernel_rem_pio2+0x26e>
 800fd8a:	4b4a      	ldr	r3, [pc, #296]	; (800feb4 <__kernel_rem_pio2+0x32c>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	4630      	mov	r0, r6
 800fd90:	4639      	mov	r1, r7
 800fd92:	f7f0 fcb1 	bl	80006f8 <__aeabi_dmul>
 800fd96:	f7f0 ff5f 	bl	8000c58 <__aeabi_d2iz>
 800fd9a:	f7f0 fc43 	bl	8000624 <__aeabi_i2d>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	460b      	mov	r3, r1
 800fda2:	ec43 2b18 	vmov	d8, r2, r3
 800fda6:	4b44      	ldr	r3, [pc, #272]	; (800feb8 <__kernel_rem_pio2+0x330>)
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f7f0 fca5 	bl	80006f8 <__aeabi_dmul>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	4639      	mov	r1, r7
 800fdb6:	f7f0 fae7 	bl	8000388 <__aeabi_dsub>
 800fdba:	f7f0 ff4d 	bl	8000c58 <__aeabi_d2iz>
 800fdbe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fdc2:	f84b 0b04 	str.w	r0, [fp], #4
 800fdc6:	ec51 0b18 	vmov	r0, r1, d8
 800fdca:	f7f0 fadf 	bl	800038c <__adddf3>
 800fdce:	f109 39ff 	add.w	r9, r9, #4294967295
 800fdd2:	4606      	mov	r6, r0
 800fdd4:	460f      	mov	r7, r1
 800fdd6:	e75b      	b.n	800fc90 <__kernel_rem_pio2+0x108>
 800fdd8:	d106      	bne.n	800fde8 <__kernel_rem_pio2+0x260>
 800fdda:	1e63      	subs	r3, r4, #1
 800fddc:	aa0c      	add	r2, sp, #48	; 0x30
 800fdde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fde2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800fde6:	e79d      	b.n	800fd24 <__kernel_rem_pio2+0x19c>
 800fde8:	4b34      	ldr	r3, [pc, #208]	; (800febc <__kernel_rem_pio2+0x334>)
 800fdea:	2200      	movs	r2, #0
 800fdec:	f7f0 ff0a 	bl	8000c04 <__aeabi_dcmpge>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	d140      	bne.n	800fe76 <__kernel_rem_pio2+0x2ee>
 800fdf4:	4683      	mov	fp, r0
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	4639      	mov	r1, r7
 800fdfe:	f7f0 fee3 	bl	8000bc8 <__aeabi_dcmpeq>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	f000 80c1 	beq.w	800ff8a <__kernel_rem_pio2+0x402>
 800fe08:	1e65      	subs	r5, r4, #1
 800fe0a:	462b      	mov	r3, r5
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	9900      	ldr	r1, [sp, #0]
 800fe10:	428b      	cmp	r3, r1
 800fe12:	da6d      	bge.n	800fef0 <__kernel_rem_pio2+0x368>
 800fe14:	2a00      	cmp	r2, #0
 800fe16:	f000 808a 	beq.w	800ff2e <__kernel_rem_pio2+0x3a6>
 800fe1a:	ab0c      	add	r3, sp, #48	; 0x30
 800fe1c:	f1aa 0a18 	sub.w	sl, sl, #24
 800fe20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f000 80ae 	beq.w	800ff86 <__kernel_rem_pio2+0x3fe>
 800fe2a:	4650      	mov	r0, sl
 800fe2c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800fea0 <__kernel_rem_pio2+0x318>
 800fe30:	f7ff fd52 	bl	800f8d8 <scalbn>
 800fe34:	1c6b      	adds	r3, r5, #1
 800fe36:	00da      	lsls	r2, r3, #3
 800fe38:	9205      	str	r2, [sp, #20]
 800fe3a:	ec57 6b10 	vmov	r6, r7, d0
 800fe3e:	aa70      	add	r2, sp, #448	; 0x1c0
 800fe40:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800feb4 <__kernel_rem_pio2+0x32c>
 800fe44:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800fe48:	462c      	mov	r4, r5
 800fe4a:	f04f 0800 	mov.w	r8, #0
 800fe4e:	2c00      	cmp	r4, #0
 800fe50:	f280 80d4 	bge.w	800fffc <__kernel_rem_pio2+0x474>
 800fe54:	462c      	mov	r4, r5
 800fe56:	2c00      	cmp	r4, #0
 800fe58:	f2c0 8102 	blt.w	8010060 <__kernel_rem_pio2+0x4d8>
 800fe5c:	4b18      	ldr	r3, [pc, #96]	; (800fec0 <__kernel_rem_pio2+0x338>)
 800fe5e:	461e      	mov	r6, r3
 800fe60:	ab70      	add	r3, sp, #448	; 0x1c0
 800fe62:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800fe66:	1b2b      	subs	r3, r5, r4
 800fe68:	f04f 0900 	mov.w	r9, #0
 800fe6c:	f04f 0a00 	mov.w	sl, #0
 800fe70:	2700      	movs	r7, #0
 800fe72:	9306      	str	r3, [sp, #24]
 800fe74:	e0e6      	b.n	8010044 <__kernel_rem_pio2+0x4bc>
 800fe76:	f04f 0b02 	mov.w	fp, #2
 800fe7a:	e756      	b.n	800fd2a <__kernel_rem_pio2+0x1a2>
 800fe7c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe80:	bb05      	cbnz	r5, 800fec4 <__kernel_rem_pio2+0x33c>
 800fe82:	b123      	cbz	r3, 800fe8e <__kernel_rem_pio2+0x306>
 800fe84:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fe88:	f8c8 3000 	str.w	r3, [r8]
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	3201      	adds	r2, #1
 800fe90:	f108 0804 	add.w	r8, r8, #4
 800fe94:	461d      	mov	r5, r3
 800fe96:	e74f      	b.n	800fd38 <__kernel_rem_pio2+0x1b0>
	...
 800fea4:	3ff00000 	.word	0x3ff00000
 800fea8:	0802c788 	.word	0x0802c788
 800feac:	40200000 	.word	0x40200000
 800feb0:	3ff00000 	.word	0x3ff00000
 800feb4:	3e700000 	.word	0x3e700000
 800feb8:	41700000 	.word	0x41700000
 800febc:	3fe00000 	.word	0x3fe00000
 800fec0:	0802c748 	.word	0x0802c748
 800fec4:	1acb      	subs	r3, r1, r3
 800fec6:	f8c8 3000 	str.w	r3, [r8]
 800feca:	462b      	mov	r3, r5
 800fecc:	e7df      	b.n	800fe8e <__kernel_rem_pio2+0x306>
 800fece:	1e62      	subs	r2, r4, #1
 800fed0:	ab0c      	add	r3, sp, #48	; 0x30
 800fed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fed6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800feda:	a90c      	add	r1, sp, #48	; 0x30
 800fedc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fee0:	e738      	b.n	800fd54 <__kernel_rem_pio2+0x1cc>
 800fee2:	1e62      	subs	r2, r4, #1
 800fee4:	ab0c      	add	r3, sp, #48	; 0x30
 800fee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800feee:	e7f4      	b.n	800feda <__kernel_rem_pio2+0x352>
 800fef0:	a90c      	add	r1, sp, #48	; 0x30
 800fef2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fef6:	3b01      	subs	r3, #1
 800fef8:	430a      	orrs	r2, r1
 800fefa:	e788      	b.n	800fe0e <__kernel_rem_pio2+0x286>
 800fefc:	3301      	adds	r3, #1
 800fefe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ff02:	2900      	cmp	r1, #0
 800ff04:	d0fa      	beq.n	800fefc <__kernel_rem_pio2+0x374>
 800ff06:	9a08      	ldr	r2, [sp, #32]
 800ff08:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ff0c:	446a      	add	r2, sp
 800ff0e:	3a98      	subs	r2, #152	; 0x98
 800ff10:	9208      	str	r2, [sp, #32]
 800ff12:	9a06      	ldr	r2, [sp, #24]
 800ff14:	a920      	add	r1, sp, #128	; 0x80
 800ff16:	18a2      	adds	r2, r4, r2
 800ff18:	18e3      	adds	r3, r4, r3
 800ff1a:	f104 0801 	add.w	r8, r4, #1
 800ff1e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ff22:	9302      	str	r3, [sp, #8]
 800ff24:	9b02      	ldr	r3, [sp, #8]
 800ff26:	4543      	cmp	r3, r8
 800ff28:	da04      	bge.n	800ff34 <__kernel_rem_pio2+0x3ac>
 800ff2a:	461c      	mov	r4, r3
 800ff2c:	e6a2      	b.n	800fc74 <__kernel_rem_pio2+0xec>
 800ff2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff30:	2301      	movs	r3, #1
 800ff32:	e7e4      	b.n	800fefe <__kernel_rem_pio2+0x376>
 800ff34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff36:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ff3a:	f7f0 fb73 	bl	8000624 <__aeabi_i2d>
 800ff3e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ff42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff44:	46ab      	mov	fp, r5
 800ff46:	461c      	mov	r4, r3
 800ff48:	f04f 0900 	mov.w	r9, #0
 800ff4c:	2600      	movs	r6, #0
 800ff4e:	2700      	movs	r7, #0
 800ff50:	9b05      	ldr	r3, [sp, #20]
 800ff52:	4599      	cmp	r9, r3
 800ff54:	dd06      	ble.n	800ff64 <__kernel_rem_pio2+0x3dc>
 800ff56:	9b08      	ldr	r3, [sp, #32]
 800ff58:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ff5c:	f108 0801 	add.w	r8, r8, #1
 800ff60:	9308      	str	r3, [sp, #32]
 800ff62:	e7df      	b.n	800ff24 <__kernel_rem_pio2+0x39c>
 800ff64:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ff68:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ff6c:	f7f0 fbc4 	bl	80006f8 <__aeabi_dmul>
 800ff70:	4602      	mov	r2, r0
 800ff72:	460b      	mov	r3, r1
 800ff74:	4630      	mov	r0, r6
 800ff76:	4639      	mov	r1, r7
 800ff78:	f7f0 fa08 	bl	800038c <__adddf3>
 800ff7c:	f109 0901 	add.w	r9, r9, #1
 800ff80:	4606      	mov	r6, r0
 800ff82:	460f      	mov	r7, r1
 800ff84:	e7e4      	b.n	800ff50 <__kernel_rem_pio2+0x3c8>
 800ff86:	3d01      	subs	r5, #1
 800ff88:	e747      	b.n	800fe1a <__kernel_rem_pio2+0x292>
 800ff8a:	ec47 6b10 	vmov	d0, r6, r7
 800ff8e:	f1ca 0000 	rsb	r0, sl, #0
 800ff92:	f7ff fca1 	bl	800f8d8 <scalbn>
 800ff96:	ec57 6b10 	vmov	r6, r7, d0
 800ff9a:	4ba0      	ldr	r3, [pc, #640]	; (801021c <__kernel_rem_pio2+0x694>)
 800ff9c:	ee10 0a10 	vmov	r0, s0
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	4639      	mov	r1, r7
 800ffa4:	f7f0 fe2e 	bl	8000c04 <__aeabi_dcmpge>
 800ffa8:	b1f8      	cbz	r0, 800ffea <__kernel_rem_pio2+0x462>
 800ffaa:	4b9d      	ldr	r3, [pc, #628]	; (8010220 <__kernel_rem_pio2+0x698>)
 800ffac:	2200      	movs	r2, #0
 800ffae:	4630      	mov	r0, r6
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	f7f0 fba1 	bl	80006f8 <__aeabi_dmul>
 800ffb6:	f7f0 fe4f 	bl	8000c58 <__aeabi_d2iz>
 800ffba:	4680      	mov	r8, r0
 800ffbc:	f7f0 fb32 	bl	8000624 <__aeabi_i2d>
 800ffc0:	4b96      	ldr	r3, [pc, #600]	; (801021c <__kernel_rem_pio2+0x694>)
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f7f0 fb98 	bl	80006f8 <__aeabi_dmul>
 800ffc8:	460b      	mov	r3, r1
 800ffca:	4602      	mov	r2, r0
 800ffcc:	4639      	mov	r1, r7
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f7f0 f9da 	bl	8000388 <__aeabi_dsub>
 800ffd4:	f7f0 fe40 	bl	8000c58 <__aeabi_d2iz>
 800ffd8:	1c65      	adds	r5, r4, #1
 800ffda:	ab0c      	add	r3, sp, #48	; 0x30
 800ffdc:	f10a 0a18 	add.w	sl, sl, #24
 800ffe0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ffe4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ffe8:	e71f      	b.n	800fe2a <__kernel_rem_pio2+0x2a2>
 800ffea:	4630      	mov	r0, r6
 800ffec:	4639      	mov	r1, r7
 800ffee:	f7f0 fe33 	bl	8000c58 <__aeabi_d2iz>
 800fff2:	ab0c      	add	r3, sp, #48	; 0x30
 800fff4:	4625      	mov	r5, r4
 800fff6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fffa:	e716      	b.n	800fe2a <__kernel_rem_pio2+0x2a2>
 800fffc:	ab0c      	add	r3, sp, #48	; 0x30
 800fffe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010002:	f7f0 fb0f 	bl	8000624 <__aeabi_i2d>
 8010006:	4632      	mov	r2, r6
 8010008:	463b      	mov	r3, r7
 801000a:	f7f0 fb75 	bl	80006f8 <__aeabi_dmul>
 801000e:	4642      	mov	r2, r8
 8010010:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010014:	464b      	mov	r3, r9
 8010016:	4630      	mov	r0, r6
 8010018:	4639      	mov	r1, r7
 801001a:	f7f0 fb6d 	bl	80006f8 <__aeabi_dmul>
 801001e:	3c01      	subs	r4, #1
 8010020:	4606      	mov	r6, r0
 8010022:	460f      	mov	r7, r1
 8010024:	e713      	b.n	800fe4e <__kernel_rem_pio2+0x2c6>
 8010026:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801002a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801002e:	f7f0 fb63 	bl	80006f8 <__aeabi_dmul>
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	4648      	mov	r0, r9
 8010038:	4651      	mov	r1, sl
 801003a:	f7f0 f9a7 	bl	800038c <__adddf3>
 801003e:	3701      	adds	r7, #1
 8010040:	4681      	mov	r9, r0
 8010042:	468a      	mov	sl, r1
 8010044:	9b00      	ldr	r3, [sp, #0]
 8010046:	429f      	cmp	r7, r3
 8010048:	dc02      	bgt.n	8010050 <__kernel_rem_pio2+0x4c8>
 801004a:	9b06      	ldr	r3, [sp, #24]
 801004c:	429f      	cmp	r7, r3
 801004e:	ddea      	ble.n	8010026 <__kernel_rem_pio2+0x49e>
 8010050:	9a06      	ldr	r2, [sp, #24]
 8010052:	ab48      	add	r3, sp, #288	; 0x120
 8010054:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010058:	e9c6 9a00 	strd	r9, sl, [r6]
 801005c:	3c01      	subs	r4, #1
 801005e:	e6fa      	b.n	800fe56 <__kernel_rem_pio2+0x2ce>
 8010060:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010062:	2b02      	cmp	r3, #2
 8010064:	dc0b      	bgt.n	801007e <__kernel_rem_pio2+0x4f6>
 8010066:	2b00      	cmp	r3, #0
 8010068:	dc39      	bgt.n	80100de <__kernel_rem_pio2+0x556>
 801006a:	d05d      	beq.n	8010128 <__kernel_rem_pio2+0x5a0>
 801006c:	9b02      	ldr	r3, [sp, #8]
 801006e:	f003 0007 	and.w	r0, r3, #7
 8010072:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010076:	ecbd 8b02 	vpop	{d8}
 801007a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801007e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010080:	2b03      	cmp	r3, #3
 8010082:	d1f3      	bne.n	801006c <__kernel_rem_pio2+0x4e4>
 8010084:	9b05      	ldr	r3, [sp, #20]
 8010086:	9500      	str	r5, [sp, #0]
 8010088:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801008c:	eb0d 0403 	add.w	r4, sp, r3
 8010090:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010094:	46a2      	mov	sl, r4
 8010096:	9b00      	ldr	r3, [sp, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	f1aa 0a08 	sub.w	sl, sl, #8
 801009e:	dc69      	bgt.n	8010174 <__kernel_rem_pio2+0x5ec>
 80100a0:	46aa      	mov	sl, r5
 80100a2:	f1ba 0f01 	cmp.w	sl, #1
 80100a6:	f1a4 0408 	sub.w	r4, r4, #8
 80100aa:	f300 8083 	bgt.w	80101b4 <__kernel_rem_pio2+0x62c>
 80100ae:	9c05      	ldr	r4, [sp, #20]
 80100b0:	ab48      	add	r3, sp, #288	; 0x120
 80100b2:	441c      	add	r4, r3
 80100b4:	2000      	movs	r0, #0
 80100b6:	2100      	movs	r1, #0
 80100b8:	2d01      	cmp	r5, #1
 80100ba:	f300 809a 	bgt.w	80101f2 <__kernel_rem_pio2+0x66a>
 80100be:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80100c2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80100c6:	f1bb 0f00 	cmp.w	fp, #0
 80100ca:	f040 8098 	bne.w	80101fe <__kernel_rem_pio2+0x676>
 80100ce:	9b04      	ldr	r3, [sp, #16]
 80100d0:	e9c3 7800 	strd	r7, r8, [r3]
 80100d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80100d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80100dc:	e7c6      	b.n	801006c <__kernel_rem_pio2+0x4e4>
 80100de:	9e05      	ldr	r6, [sp, #20]
 80100e0:	ab48      	add	r3, sp, #288	; 0x120
 80100e2:	441e      	add	r6, r3
 80100e4:	462c      	mov	r4, r5
 80100e6:	2000      	movs	r0, #0
 80100e8:	2100      	movs	r1, #0
 80100ea:	2c00      	cmp	r4, #0
 80100ec:	da33      	bge.n	8010156 <__kernel_rem_pio2+0x5ce>
 80100ee:	f1bb 0f00 	cmp.w	fp, #0
 80100f2:	d036      	beq.n	8010162 <__kernel_rem_pio2+0x5da>
 80100f4:	4602      	mov	r2, r0
 80100f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100fa:	9c04      	ldr	r4, [sp, #16]
 80100fc:	e9c4 2300 	strd	r2, r3, [r4]
 8010100:	4602      	mov	r2, r0
 8010102:	460b      	mov	r3, r1
 8010104:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010108:	f7f0 f93e 	bl	8000388 <__aeabi_dsub>
 801010c:	ae4a      	add	r6, sp, #296	; 0x128
 801010e:	2401      	movs	r4, #1
 8010110:	42a5      	cmp	r5, r4
 8010112:	da29      	bge.n	8010168 <__kernel_rem_pio2+0x5e0>
 8010114:	f1bb 0f00 	cmp.w	fp, #0
 8010118:	d002      	beq.n	8010120 <__kernel_rem_pio2+0x598>
 801011a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801011e:	4619      	mov	r1, r3
 8010120:	9b04      	ldr	r3, [sp, #16]
 8010122:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010126:	e7a1      	b.n	801006c <__kernel_rem_pio2+0x4e4>
 8010128:	9c05      	ldr	r4, [sp, #20]
 801012a:	ab48      	add	r3, sp, #288	; 0x120
 801012c:	441c      	add	r4, r3
 801012e:	2000      	movs	r0, #0
 8010130:	2100      	movs	r1, #0
 8010132:	2d00      	cmp	r5, #0
 8010134:	da09      	bge.n	801014a <__kernel_rem_pio2+0x5c2>
 8010136:	f1bb 0f00 	cmp.w	fp, #0
 801013a:	d002      	beq.n	8010142 <__kernel_rem_pio2+0x5ba>
 801013c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010140:	4619      	mov	r1, r3
 8010142:	9b04      	ldr	r3, [sp, #16]
 8010144:	e9c3 0100 	strd	r0, r1, [r3]
 8010148:	e790      	b.n	801006c <__kernel_rem_pio2+0x4e4>
 801014a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801014e:	f7f0 f91d 	bl	800038c <__adddf3>
 8010152:	3d01      	subs	r5, #1
 8010154:	e7ed      	b.n	8010132 <__kernel_rem_pio2+0x5aa>
 8010156:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801015a:	f7f0 f917 	bl	800038c <__adddf3>
 801015e:	3c01      	subs	r4, #1
 8010160:	e7c3      	b.n	80100ea <__kernel_rem_pio2+0x562>
 8010162:	4602      	mov	r2, r0
 8010164:	460b      	mov	r3, r1
 8010166:	e7c8      	b.n	80100fa <__kernel_rem_pio2+0x572>
 8010168:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801016c:	f7f0 f90e 	bl	800038c <__adddf3>
 8010170:	3401      	adds	r4, #1
 8010172:	e7cd      	b.n	8010110 <__kernel_rem_pio2+0x588>
 8010174:	e9da 8900 	ldrd	r8, r9, [sl]
 8010178:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801017c:	9b00      	ldr	r3, [sp, #0]
 801017e:	3b01      	subs	r3, #1
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	4632      	mov	r2, r6
 8010184:	463b      	mov	r3, r7
 8010186:	4640      	mov	r0, r8
 8010188:	4649      	mov	r1, r9
 801018a:	f7f0 f8ff 	bl	800038c <__adddf3>
 801018e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010192:	4602      	mov	r2, r0
 8010194:	460b      	mov	r3, r1
 8010196:	4640      	mov	r0, r8
 8010198:	4649      	mov	r1, r9
 801019a:	f7f0 f8f5 	bl	8000388 <__aeabi_dsub>
 801019e:	4632      	mov	r2, r6
 80101a0:	463b      	mov	r3, r7
 80101a2:	f7f0 f8f3 	bl	800038c <__adddf3>
 80101a6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80101aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80101ae:	ed8a 7b00 	vstr	d7, [sl]
 80101b2:	e770      	b.n	8010096 <__kernel_rem_pio2+0x50e>
 80101b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80101b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80101bc:	4640      	mov	r0, r8
 80101be:	4632      	mov	r2, r6
 80101c0:	463b      	mov	r3, r7
 80101c2:	4649      	mov	r1, r9
 80101c4:	f7f0 f8e2 	bl	800038c <__adddf3>
 80101c8:	e9cd 0100 	strd	r0, r1, [sp]
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4640      	mov	r0, r8
 80101d2:	4649      	mov	r1, r9
 80101d4:	f7f0 f8d8 	bl	8000388 <__aeabi_dsub>
 80101d8:	4632      	mov	r2, r6
 80101da:	463b      	mov	r3, r7
 80101dc:	f7f0 f8d6 	bl	800038c <__adddf3>
 80101e0:	ed9d 7b00 	vldr	d7, [sp]
 80101e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80101e8:	ed84 7b00 	vstr	d7, [r4]
 80101ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101f0:	e757      	b.n	80100a2 <__kernel_rem_pio2+0x51a>
 80101f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80101f6:	f7f0 f8c9 	bl	800038c <__adddf3>
 80101fa:	3d01      	subs	r5, #1
 80101fc:	e75c      	b.n	80100b8 <__kernel_rem_pio2+0x530>
 80101fe:	9b04      	ldr	r3, [sp, #16]
 8010200:	9a04      	ldr	r2, [sp, #16]
 8010202:	601f      	str	r7, [r3, #0]
 8010204:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010208:	605c      	str	r4, [r3, #4]
 801020a:	609d      	str	r5, [r3, #8]
 801020c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010210:	60d3      	str	r3, [r2, #12]
 8010212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010216:	6110      	str	r0, [r2, #16]
 8010218:	6153      	str	r3, [r2, #20]
 801021a:	e727      	b.n	801006c <__kernel_rem_pio2+0x4e4>
 801021c:	41700000 	.word	0x41700000
 8010220:	3e700000 	.word	0x3e700000
 8010224:	00000000 	.word	0x00000000

08010228 <floor>:
 8010228:	ec51 0b10 	vmov	r0, r1, d0
 801022c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010234:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8010238:	2e13      	cmp	r6, #19
 801023a:	ee10 5a10 	vmov	r5, s0
 801023e:	ee10 8a10 	vmov	r8, s0
 8010242:	460c      	mov	r4, r1
 8010244:	dc31      	bgt.n	80102aa <floor+0x82>
 8010246:	2e00      	cmp	r6, #0
 8010248:	da14      	bge.n	8010274 <floor+0x4c>
 801024a:	a333      	add	r3, pc, #204	; (adr r3, 8010318 <floor+0xf0>)
 801024c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010250:	f7f0 f89c 	bl	800038c <__adddf3>
 8010254:	2200      	movs	r2, #0
 8010256:	2300      	movs	r3, #0
 8010258:	f7f0 fcde 	bl	8000c18 <__aeabi_dcmpgt>
 801025c:	b138      	cbz	r0, 801026e <floor+0x46>
 801025e:	2c00      	cmp	r4, #0
 8010260:	da53      	bge.n	801030a <floor+0xe2>
 8010262:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010266:	4325      	orrs	r5, r4
 8010268:	d052      	beq.n	8010310 <floor+0xe8>
 801026a:	4c2d      	ldr	r4, [pc, #180]	; (8010320 <floor+0xf8>)
 801026c:	2500      	movs	r5, #0
 801026e:	4621      	mov	r1, r4
 8010270:	4628      	mov	r0, r5
 8010272:	e024      	b.n	80102be <floor+0x96>
 8010274:	4f2b      	ldr	r7, [pc, #172]	; (8010324 <floor+0xfc>)
 8010276:	4137      	asrs	r7, r6
 8010278:	ea01 0307 	and.w	r3, r1, r7
 801027c:	4303      	orrs	r3, r0
 801027e:	d01e      	beq.n	80102be <floor+0x96>
 8010280:	a325      	add	r3, pc, #148	; (adr r3, 8010318 <floor+0xf0>)
 8010282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010286:	f7f0 f881 	bl	800038c <__adddf3>
 801028a:	2200      	movs	r2, #0
 801028c:	2300      	movs	r3, #0
 801028e:	f7f0 fcc3 	bl	8000c18 <__aeabi_dcmpgt>
 8010292:	2800      	cmp	r0, #0
 8010294:	d0eb      	beq.n	801026e <floor+0x46>
 8010296:	2c00      	cmp	r4, #0
 8010298:	bfbe      	ittt	lt
 801029a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801029e:	4133      	asrlt	r3, r6
 80102a0:	18e4      	addlt	r4, r4, r3
 80102a2:	ea24 0407 	bic.w	r4, r4, r7
 80102a6:	2500      	movs	r5, #0
 80102a8:	e7e1      	b.n	801026e <floor+0x46>
 80102aa:	2e33      	cmp	r6, #51	; 0x33
 80102ac:	dd0b      	ble.n	80102c6 <floor+0x9e>
 80102ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80102b2:	d104      	bne.n	80102be <floor+0x96>
 80102b4:	ee10 2a10 	vmov	r2, s0
 80102b8:	460b      	mov	r3, r1
 80102ba:	f7f0 f867 	bl	800038c <__adddf3>
 80102be:	ec41 0b10 	vmov	d0, r0, r1
 80102c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80102ca:	f04f 37ff 	mov.w	r7, #4294967295
 80102ce:	40df      	lsrs	r7, r3
 80102d0:	4238      	tst	r0, r7
 80102d2:	d0f4      	beq.n	80102be <floor+0x96>
 80102d4:	a310      	add	r3, pc, #64	; (adr r3, 8010318 <floor+0xf0>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	f7f0 f857 	bl	800038c <__adddf3>
 80102de:	2200      	movs	r2, #0
 80102e0:	2300      	movs	r3, #0
 80102e2:	f7f0 fc99 	bl	8000c18 <__aeabi_dcmpgt>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	d0c1      	beq.n	801026e <floor+0x46>
 80102ea:	2c00      	cmp	r4, #0
 80102ec:	da0a      	bge.n	8010304 <floor+0xdc>
 80102ee:	2e14      	cmp	r6, #20
 80102f0:	d101      	bne.n	80102f6 <floor+0xce>
 80102f2:	3401      	adds	r4, #1
 80102f4:	e006      	b.n	8010304 <floor+0xdc>
 80102f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80102fa:	2301      	movs	r3, #1
 80102fc:	40b3      	lsls	r3, r6
 80102fe:	441d      	add	r5, r3
 8010300:	45a8      	cmp	r8, r5
 8010302:	d8f6      	bhi.n	80102f2 <floor+0xca>
 8010304:	ea25 0507 	bic.w	r5, r5, r7
 8010308:	e7b1      	b.n	801026e <floor+0x46>
 801030a:	2500      	movs	r5, #0
 801030c:	462c      	mov	r4, r5
 801030e:	e7ae      	b.n	801026e <floor+0x46>
 8010310:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010314:	e7ab      	b.n	801026e <floor+0x46>
 8010316:	bf00      	nop
 8010318:	8800759c 	.word	0x8800759c
 801031c:	7e37e43c 	.word	0x7e37e43c
 8010320:	bff00000 	.word	0xbff00000
 8010324:	000fffff 	.word	0x000fffff

08010328 <abort>:
 8010328:	b508      	push	{r3, lr}
 801032a:	2006      	movs	r0, #6
 801032c:	f000 ff88 	bl	8011240 <raise>
 8010330:	2001      	movs	r0, #1
 8010332:	f002 fd57 	bl	8012de4 <_exit>
	...

08010338 <malloc>:
 8010338:	4b02      	ldr	r3, [pc, #8]	; (8010344 <malloc+0xc>)
 801033a:	4601      	mov	r1, r0
 801033c:	6818      	ldr	r0, [r3, #0]
 801033e:	f000 b82b 	b.w	8010398 <_malloc_r>
 8010342:	bf00      	nop
 8010344:	200009d0 	.word	0x200009d0

08010348 <free>:
 8010348:	4b02      	ldr	r3, [pc, #8]	; (8010354 <free+0xc>)
 801034a:	4601      	mov	r1, r0
 801034c:	6818      	ldr	r0, [r3, #0]
 801034e:	f001 bea5 	b.w	801209c <_free_r>
 8010352:	bf00      	nop
 8010354:	200009d0 	.word	0x200009d0

08010358 <sbrk_aligned>:
 8010358:	b570      	push	{r4, r5, r6, lr}
 801035a:	4e0e      	ldr	r6, [pc, #56]	; (8010394 <sbrk_aligned+0x3c>)
 801035c:	460c      	mov	r4, r1
 801035e:	6831      	ldr	r1, [r6, #0]
 8010360:	4605      	mov	r5, r0
 8010362:	b911      	cbnz	r1, 801036a <sbrk_aligned+0x12>
 8010364:	f000 ffc0 	bl	80112e8 <_sbrk_r>
 8010368:	6030      	str	r0, [r6, #0]
 801036a:	4621      	mov	r1, r4
 801036c:	4628      	mov	r0, r5
 801036e:	f000 ffbb 	bl	80112e8 <_sbrk_r>
 8010372:	1c43      	adds	r3, r0, #1
 8010374:	d00a      	beq.n	801038c <sbrk_aligned+0x34>
 8010376:	1cc4      	adds	r4, r0, #3
 8010378:	f024 0403 	bic.w	r4, r4, #3
 801037c:	42a0      	cmp	r0, r4
 801037e:	d007      	beq.n	8010390 <sbrk_aligned+0x38>
 8010380:	1a21      	subs	r1, r4, r0
 8010382:	4628      	mov	r0, r5
 8010384:	f000 ffb0 	bl	80112e8 <_sbrk_r>
 8010388:	3001      	adds	r0, #1
 801038a:	d101      	bne.n	8010390 <sbrk_aligned+0x38>
 801038c:	f04f 34ff 	mov.w	r4, #4294967295
 8010390:	4620      	mov	r0, r4
 8010392:	bd70      	pop	{r4, r5, r6, pc}
 8010394:	20016180 	.word	0x20016180

08010398 <_malloc_r>:
 8010398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801039c:	1ccd      	adds	r5, r1, #3
 801039e:	f025 0503 	bic.w	r5, r5, #3
 80103a2:	3508      	adds	r5, #8
 80103a4:	2d0c      	cmp	r5, #12
 80103a6:	bf38      	it	cc
 80103a8:	250c      	movcc	r5, #12
 80103aa:	2d00      	cmp	r5, #0
 80103ac:	4607      	mov	r7, r0
 80103ae:	db01      	blt.n	80103b4 <_malloc_r+0x1c>
 80103b0:	42a9      	cmp	r1, r5
 80103b2:	d905      	bls.n	80103c0 <_malloc_r+0x28>
 80103b4:	230c      	movs	r3, #12
 80103b6:	603b      	str	r3, [r7, #0]
 80103b8:	2600      	movs	r6, #0
 80103ba:	4630      	mov	r0, r6
 80103bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010494 <_malloc_r+0xfc>
 80103c4:	f000 f868 	bl	8010498 <__malloc_lock>
 80103c8:	f8d8 3000 	ldr.w	r3, [r8]
 80103cc:	461c      	mov	r4, r3
 80103ce:	bb5c      	cbnz	r4, 8010428 <_malloc_r+0x90>
 80103d0:	4629      	mov	r1, r5
 80103d2:	4638      	mov	r0, r7
 80103d4:	f7ff ffc0 	bl	8010358 <sbrk_aligned>
 80103d8:	1c43      	adds	r3, r0, #1
 80103da:	4604      	mov	r4, r0
 80103dc:	d155      	bne.n	801048a <_malloc_r+0xf2>
 80103de:	f8d8 4000 	ldr.w	r4, [r8]
 80103e2:	4626      	mov	r6, r4
 80103e4:	2e00      	cmp	r6, #0
 80103e6:	d145      	bne.n	8010474 <_malloc_r+0xdc>
 80103e8:	2c00      	cmp	r4, #0
 80103ea:	d048      	beq.n	801047e <_malloc_r+0xe6>
 80103ec:	6823      	ldr	r3, [r4, #0]
 80103ee:	4631      	mov	r1, r6
 80103f0:	4638      	mov	r0, r7
 80103f2:	eb04 0903 	add.w	r9, r4, r3
 80103f6:	f000 ff77 	bl	80112e8 <_sbrk_r>
 80103fa:	4581      	cmp	r9, r0
 80103fc:	d13f      	bne.n	801047e <_malloc_r+0xe6>
 80103fe:	6821      	ldr	r1, [r4, #0]
 8010400:	1a6d      	subs	r5, r5, r1
 8010402:	4629      	mov	r1, r5
 8010404:	4638      	mov	r0, r7
 8010406:	f7ff ffa7 	bl	8010358 <sbrk_aligned>
 801040a:	3001      	adds	r0, #1
 801040c:	d037      	beq.n	801047e <_malloc_r+0xe6>
 801040e:	6823      	ldr	r3, [r4, #0]
 8010410:	442b      	add	r3, r5
 8010412:	6023      	str	r3, [r4, #0]
 8010414:	f8d8 3000 	ldr.w	r3, [r8]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d038      	beq.n	801048e <_malloc_r+0xf6>
 801041c:	685a      	ldr	r2, [r3, #4]
 801041e:	42a2      	cmp	r2, r4
 8010420:	d12b      	bne.n	801047a <_malloc_r+0xe2>
 8010422:	2200      	movs	r2, #0
 8010424:	605a      	str	r2, [r3, #4]
 8010426:	e00f      	b.n	8010448 <_malloc_r+0xb0>
 8010428:	6822      	ldr	r2, [r4, #0]
 801042a:	1b52      	subs	r2, r2, r5
 801042c:	d41f      	bmi.n	801046e <_malloc_r+0xd6>
 801042e:	2a0b      	cmp	r2, #11
 8010430:	d917      	bls.n	8010462 <_malloc_r+0xca>
 8010432:	1961      	adds	r1, r4, r5
 8010434:	42a3      	cmp	r3, r4
 8010436:	6025      	str	r5, [r4, #0]
 8010438:	bf18      	it	ne
 801043a:	6059      	strne	r1, [r3, #4]
 801043c:	6863      	ldr	r3, [r4, #4]
 801043e:	bf08      	it	eq
 8010440:	f8c8 1000 	streq.w	r1, [r8]
 8010444:	5162      	str	r2, [r4, r5]
 8010446:	604b      	str	r3, [r1, #4]
 8010448:	4638      	mov	r0, r7
 801044a:	f104 060b 	add.w	r6, r4, #11
 801044e:	f000 f829 	bl	80104a4 <__malloc_unlock>
 8010452:	f026 0607 	bic.w	r6, r6, #7
 8010456:	1d23      	adds	r3, r4, #4
 8010458:	1af2      	subs	r2, r6, r3
 801045a:	d0ae      	beq.n	80103ba <_malloc_r+0x22>
 801045c:	1b9b      	subs	r3, r3, r6
 801045e:	50a3      	str	r3, [r4, r2]
 8010460:	e7ab      	b.n	80103ba <_malloc_r+0x22>
 8010462:	42a3      	cmp	r3, r4
 8010464:	6862      	ldr	r2, [r4, #4]
 8010466:	d1dd      	bne.n	8010424 <_malloc_r+0x8c>
 8010468:	f8c8 2000 	str.w	r2, [r8]
 801046c:	e7ec      	b.n	8010448 <_malloc_r+0xb0>
 801046e:	4623      	mov	r3, r4
 8010470:	6864      	ldr	r4, [r4, #4]
 8010472:	e7ac      	b.n	80103ce <_malloc_r+0x36>
 8010474:	4634      	mov	r4, r6
 8010476:	6876      	ldr	r6, [r6, #4]
 8010478:	e7b4      	b.n	80103e4 <_malloc_r+0x4c>
 801047a:	4613      	mov	r3, r2
 801047c:	e7cc      	b.n	8010418 <_malloc_r+0x80>
 801047e:	230c      	movs	r3, #12
 8010480:	603b      	str	r3, [r7, #0]
 8010482:	4638      	mov	r0, r7
 8010484:	f000 f80e 	bl	80104a4 <__malloc_unlock>
 8010488:	e797      	b.n	80103ba <_malloc_r+0x22>
 801048a:	6025      	str	r5, [r4, #0]
 801048c:	e7dc      	b.n	8010448 <_malloc_r+0xb0>
 801048e:	605b      	str	r3, [r3, #4]
 8010490:	deff      	udf	#255	; 0xff
 8010492:	bf00      	nop
 8010494:	2001617c 	.word	0x2001617c

08010498 <__malloc_lock>:
 8010498:	4801      	ldr	r0, [pc, #4]	; (80104a0 <__malloc_lock+0x8>)
 801049a:	f000 bf72 	b.w	8011382 <__retarget_lock_acquire_recursive>
 801049e:	bf00      	nop
 80104a0:	200162c4 	.word	0x200162c4

080104a4 <__malloc_unlock>:
 80104a4:	4801      	ldr	r0, [pc, #4]	; (80104ac <__malloc_unlock+0x8>)
 80104a6:	f000 bf6d 	b.w	8011384 <__retarget_lock_release_recursive>
 80104aa:	bf00      	nop
 80104ac:	200162c4 	.word	0x200162c4

080104b0 <__cvt>:
 80104b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104b4:	ec55 4b10 	vmov	r4, r5, d0
 80104b8:	2d00      	cmp	r5, #0
 80104ba:	460e      	mov	r6, r1
 80104bc:	4619      	mov	r1, r3
 80104be:	462b      	mov	r3, r5
 80104c0:	bfbb      	ittet	lt
 80104c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80104c6:	461d      	movlt	r5, r3
 80104c8:	2300      	movge	r3, #0
 80104ca:	232d      	movlt	r3, #45	; 0x2d
 80104cc:	700b      	strb	r3, [r1, #0]
 80104ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80104d4:	4691      	mov	r9, r2
 80104d6:	f023 0820 	bic.w	r8, r3, #32
 80104da:	bfbc      	itt	lt
 80104dc:	4622      	movlt	r2, r4
 80104de:	4614      	movlt	r4, r2
 80104e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80104e4:	d005      	beq.n	80104f2 <__cvt+0x42>
 80104e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80104ea:	d100      	bne.n	80104ee <__cvt+0x3e>
 80104ec:	3601      	adds	r6, #1
 80104ee:	2102      	movs	r1, #2
 80104f0:	e000      	b.n	80104f4 <__cvt+0x44>
 80104f2:	2103      	movs	r1, #3
 80104f4:	ab03      	add	r3, sp, #12
 80104f6:	9301      	str	r3, [sp, #4]
 80104f8:	ab02      	add	r3, sp, #8
 80104fa:	9300      	str	r3, [sp, #0]
 80104fc:	ec45 4b10 	vmov	d0, r4, r5
 8010500:	4653      	mov	r3, sl
 8010502:	4632      	mov	r2, r6
 8010504:	f000 ffd8 	bl	80114b8 <_dtoa_r>
 8010508:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801050c:	4607      	mov	r7, r0
 801050e:	d102      	bne.n	8010516 <__cvt+0x66>
 8010510:	f019 0f01 	tst.w	r9, #1
 8010514:	d022      	beq.n	801055c <__cvt+0xac>
 8010516:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801051a:	eb07 0906 	add.w	r9, r7, r6
 801051e:	d110      	bne.n	8010542 <__cvt+0x92>
 8010520:	783b      	ldrb	r3, [r7, #0]
 8010522:	2b30      	cmp	r3, #48	; 0x30
 8010524:	d10a      	bne.n	801053c <__cvt+0x8c>
 8010526:	2200      	movs	r2, #0
 8010528:	2300      	movs	r3, #0
 801052a:	4620      	mov	r0, r4
 801052c:	4629      	mov	r1, r5
 801052e:	f7f0 fb4b 	bl	8000bc8 <__aeabi_dcmpeq>
 8010532:	b918      	cbnz	r0, 801053c <__cvt+0x8c>
 8010534:	f1c6 0601 	rsb	r6, r6, #1
 8010538:	f8ca 6000 	str.w	r6, [sl]
 801053c:	f8da 3000 	ldr.w	r3, [sl]
 8010540:	4499      	add	r9, r3
 8010542:	2200      	movs	r2, #0
 8010544:	2300      	movs	r3, #0
 8010546:	4620      	mov	r0, r4
 8010548:	4629      	mov	r1, r5
 801054a:	f7f0 fb3d 	bl	8000bc8 <__aeabi_dcmpeq>
 801054e:	b108      	cbz	r0, 8010554 <__cvt+0xa4>
 8010550:	f8cd 900c 	str.w	r9, [sp, #12]
 8010554:	2230      	movs	r2, #48	; 0x30
 8010556:	9b03      	ldr	r3, [sp, #12]
 8010558:	454b      	cmp	r3, r9
 801055a:	d307      	bcc.n	801056c <__cvt+0xbc>
 801055c:	9b03      	ldr	r3, [sp, #12]
 801055e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010560:	1bdb      	subs	r3, r3, r7
 8010562:	4638      	mov	r0, r7
 8010564:	6013      	str	r3, [r2, #0]
 8010566:	b004      	add	sp, #16
 8010568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801056c:	1c59      	adds	r1, r3, #1
 801056e:	9103      	str	r1, [sp, #12]
 8010570:	701a      	strb	r2, [r3, #0]
 8010572:	e7f0      	b.n	8010556 <__cvt+0xa6>

08010574 <__exponent>:
 8010574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010576:	4603      	mov	r3, r0
 8010578:	2900      	cmp	r1, #0
 801057a:	bfb8      	it	lt
 801057c:	4249      	neglt	r1, r1
 801057e:	f803 2b02 	strb.w	r2, [r3], #2
 8010582:	bfb4      	ite	lt
 8010584:	222d      	movlt	r2, #45	; 0x2d
 8010586:	222b      	movge	r2, #43	; 0x2b
 8010588:	2909      	cmp	r1, #9
 801058a:	7042      	strb	r2, [r0, #1]
 801058c:	dd2a      	ble.n	80105e4 <__exponent+0x70>
 801058e:	f10d 0207 	add.w	r2, sp, #7
 8010592:	4617      	mov	r7, r2
 8010594:	260a      	movs	r6, #10
 8010596:	4694      	mov	ip, r2
 8010598:	fb91 f5f6 	sdiv	r5, r1, r6
 801059c:	fb06 1415 	mls	r4, r6, r5, r1
 80105a0:	3430      	adds	r4, #48	; 0x30
 80105a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80105a6:	460c      	mov	r4, r1
 80105a8:	2c63      	cmp	r4, #99	; 0x63
 80105aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80105ae:	4629      	mov	r1, r5
 80105b0:	dcf1      	bgt.n	8010596 <__exponent+0x22>
 80105b2:	3130      	adds	r1, #48	; 0x30
 80105b4:	f1ac 0402 	sub.w	r4, ip, #2
 80105b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80105bc:	1c41      	adds	r1, r0, #1
 80105be:	4622      	mov	r2, r4
 80105c0:	42ba      	cmp	r2, r7
 80105c2:	d30a      	bcc.n	80105da <__exponent+0x66>
 80105c4:	f10d 0209 	add.w	r2, sp, #9
 80105c8:	eba2 020c 	sub.w	r2, r2, ip
 80105cc:	42bc      	cmp	r4, r7
 80105ce:	bf88      	it	hi
 80105d0:	2200      	movhi	r2, #0
 80105d2:	4413      	add	r3, r2
 80105d4:	1a18      	subs	r0, r3, r0
 80105d6:	b003      	add	sp, #12
 80105d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80105de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80105e2:	e7ed      	b.n	80105c0 <__exponent+0x4c>
 80105e4:	2330      	movs	r3, #48	; 0x30
 80105e6:	3130      	adds	r1, #48	; 0x30
 80105e8:	7083      	strb	r3, [r0, #2]
 80105ea:	70c1      	strb	r1, [r0, #3]
 80105ec:	1d03      	adds	r3, r0, #4
 80105ee:	e7f1      	b.n	80105d4 <__exponent+0x60>

080105f0 <_printf_float>:
 80105f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f4:	ed2d 8b02 	vpush	{d8}
 80105f8:	b08d      	sub	sp, #52	; 0x34
 80105fa:	460c      	mov	r4, r1
 80105fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010600:	4616      	mov	r6, r2
 8010602:	461f      	mov	r7, r3
 8010604:	4605      	mov	r5, r0
 8010606:	f000 fe23 	bl	8011250 <_localeconv_r>
 801060a:	f8d0 a000 	ldr.w	sl, [r0]
 801060e:	4650      	mov	r0, sl
 8010610:	f7ef feae 	bl	8000370 <strlen>
 8010614:	2300      	movs	r3, #0
 8010616:	930a      	str	r3, [sp, #40]	; 0x28
 8010618:	6823      	ldr	r3, [r4, #0]
 801061a:	9305      	str	r3, [sp, #20]
 801061c:	f8d8 3000 	ldr.w	r3, [r8]
 8010620:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010624:	3307      	adds	r3, #7
 8010626:	f023 0307 	bic.w	r3, r3, #7
 801062a:	f103 0208 	add.w	r2, r3, #8
 801062e:	f8c8 2000 	str.w	r2, [r8]
 8010632:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010636:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801063a:	9307      	str	r3, [sp, #28]
 801063c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010640:	ee08 0a10 	vmov	s16, r0
 8010644:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010648:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801064c:	4b9e      	ldr	r3, [pc, #632]	; (80108c8 <_printf_float+0x2d8>)
 801064e:	f04f 32ff 	mov.w	r2, #4294967295
 8010652:	f7f0 faeb 	bl	8000c2c <__aeabi_dcmpun>
 8010656:	bb88      	cbnz	r0, 80106bc <_printf_float+0xcc>
 8010658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801065c:	4b9a      	ldr	r3, [pc, #616]	; (80108c8 <_printf_float+0x2d8>)
 801065e:	f04f 32ff 	mov.w	r2, #4294967295
 8010662:	f7f0 fac5 	bl	8000bf0 <__aeabi_dcmple>
 8010666:	bb48      	cbnz	r0, 80106bc <_printf_float+0xcc>
 8010668:	2200      	movs	r2, #0
 801066a:	2300      	movs	r3, #0
 801066c:	4640      	mov	r0, r8
 801066e:	4649      	mov	r1, r9
 8010670:	f7f0 fab4 	bl	8000bdc <__aeabi_dcmplt>
 8010674:	b110      	cbz	r0, 801067c <_printf_float+0x8c>
 8010676:	232d      	movs	r3, #45	; 0x2d
 8010678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801067c:	4a93      	ldr	r2, [pc, #588]	; (80108cc <_printf_float+0x2dc>)
 801067e:	4b94      	ldr	r3, [pc, #592]	; (80108d0 <_printf_float+0x2e0>)
 8010680:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010684:	bf94      	ite	ls
 8010686:	4690      	movls	r8, r2
 8010688:	4698      	movhi	r8, r3
 801068a:	2303      	movs	r3, #3
 801068c:	6123      	str	r3, [r4, #16]
 801068e:	9b05      	ldr	r3, [sp, #20]
 8010690:	f023 0304 	bic.w	r3, r3, #4
 8010694:	6023      	str	r3, [r4, #0]
 8010696:	f04f 0900 	mov.w	r9, #0
 801069a:	9700      	str	r7, [sp, #0]
 801069c:	4633      	mov	r3, r6
 801069e:	aa0b      	add	r2, sp, #44	; 0x2c
 80106a0:	4621      	mov	r1, r4
 80106a2:	4628      	mov	r0, r5
 80106a4:	f000 f9da 	bl	8010a5c <_printf_common>
 80106a8:	3001      	adds	r0, #1
 80106aa:	f040 8090 	bne.w	80107ce <_printf_float+0x1de>
 80106ae:	f04f 30ff 	mov.w	r0, #4294967295
 80106b2:	b00d      	add	sp, #52	; 0x34
 80106b4:	ecbd 8b02 	vpop	{d8}
 80106b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106bc:	4642      	mov	r2, r8
 80106be:	464b      	mov	r3, r9
 80106c0:	4640      	mov	r0, r8
 80106c2:	4649      	mov	r1, r9
 80106c4:	f7f0 fab2 	bl	8000c2c <__aeabi_dcmpun>
 80106c8:	b140      	cbz	r0, 80106dc <_printf_float+0xec>
 80106ca:	464b      	mov	r3, r9
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	bfbc      	itt	lt
 80106d0:	232d      	movlt	r3, #45	; 0x2d
 80106d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80106d6:	4a7f      	ldr	r2, [pc, #508]	; (80108d4 <_printf_float+0x2e4>)
 80106d8:	4b7f      	ldr	r3, [pc, #508]	; (80108d8 <_printf_float+0x2e8>)
 80106da:	e7d1      	b.n	8010680 <_printf_float+0x90>
 80106dc:	6863      	ldr	r3, [r4, #4]
 80106de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80106e2:	9206      	str	r2, [sp, #24]
 80106e4:	1c5a      	adds	r2, r3, #1
 80106e6:	d13f      	bne.n	8010768 <_printf_float+0x178>
 80106e8:	2306      	movs	r3, #6
 80106ea:	6063      	str	r3, [r4, #4]
 80106ec:	9b05      	ldr	r3, [sp, #20]
 80106ee:	6861      	ldr	r1, [r4, #4]
 80106f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80106f4:	2300      	movs	r3, #0
 80106f6:	9303      	str	r3, [sp, #12]
 80106f8:	ab0a      	add	r3, sp, #40	; 0x28
 80106fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80106fe:	ab09      	add	r3, sp, #36	; 0x24
 8010700:	ec49 8b10 	vmov	d0, r8, r9
 8010704:	9300      	str	r3, [sp, #0]
 8010706:	6022      	str	r2, [r4, #0]
 8010708:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801070c:	4628      	mov	r0, r5
 801070e:	f7ff fecf 	bl	80104b0 <__cvt>
 8010712:	9b06      	ldr	r3, [sp, #24]
 8010714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010716:	2b47      	cmp	r3, #71	; 0x47
 8010718:	4680      	mov	r8, r0
 801071a:	d108      	bne.n	801072e <_printf_float+0x13e>
 801071c:	1cc8      	adds	r0, r1, #3
 801071e:	db02      	blt.n	8010726 <_printf_float+0x136>
 8010720:	6863      	ldr	r3, [r4, #4]
 8010722:	4299      	cmp	r1, r3
 8010724:	dd41      	ble.n	80107aa <_printf_float+0x1ba>
 8010726:	f1ab 0302 	sub.w	r3, fp, #2
 801072a:	fa5f fb83 	uxtb.w	fp, r3
 801072e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010732:	d820      	bhi.n	8010776 <_printf_float+0x186>
 8010734:	3901      	subs	r1, #1
 8010736:	465a      	mov	r2, fp
 8010738:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801073c:	9109      	str	r1, [sp, #36]	; 0x24
 801073e:	f7ff ff19 	bl	8010574 <__exponent>
 8010742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010744:	1813      	adds	r3, r2, r0
 8010746:	2a01      	cmp	r2, #1
 8010748:	4681      	mov	r9, r0
 801074a:	6123      	str	r3, [r4, #16]
 801074c:	dc02      	bgt.n	8010754 <_printf_float+0x164>
 801074e:	6822      	ldr	r2, [r4, #0]
 8010750:	07d2      	lsls	r2, r2, #31
 8010752:	d501      	bpl.n	8010758 <_printf_float+0x168>
 8010754:	3301      	adds	r3, #1
 8010756:	6123      	str	r3, [r4, #16]
 8010758:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801075c:	2b00      	cmp	r3, #0
 801075e:	d09c      	beq.n	801069a <_printf_float+0xaa>
 8010760:	232d      	movs	r3, #45	; 0x2d
 8010762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010766:	e798      	b.n	801069a <_printf_float+0xaa>
 8010768:	9a06      	ldr	r2, [sp, #24]
 801076a:	2a47      	cmp	r2, #71	; 0x47
 801076c:	d1be      	bne.n	80106ec <_printf_float+0xfc>
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1bc      	bne.n	80106ec <_printf_float+0xfc>
 8010772:	2301      	movs	r3, #1
 8010774:	e7b9      	b.n	80106ea <_printf_float+0xfa>
 8010776:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801077a:	d118      	bne.n	80107ae <_printf_float+0x1be>
 801077c:	2900      	cmp	r1, #0
 801077e:	6863      	ldr	r3, [r4, #4]
 8010780:	dd0b      	ble.n	801079a <_printf_float+0x1aa>
 8010782:	6121      	str	r1, [r4, #16]
 8010784:	b913      	cbnz	r3, 801078c <_printf_float+0x19c>
 8010786:	6822      	ldr	r2, [r4, #0]
 8010788:	07d0      	lsls	r0, r2, #31
 801078a:	d502      	bpl.n	8010792 <_printf_float+0x1a2>
 801078c:	3301      	adds	r3, #1
 801078e:	440b      	add	r3, r1
 8010790:	6123      	str	r3, [r4, #16]
 8010792:	65a1      	str	r1, [r4, #88]	; 0x58
 8010794:	f04f 0900 	mov.w	r9, #0
 8010798:	e7de      	b.n	8010758 <_printf_float+0x168>
 801079a:	b913      	cbnz	r3, 80107a2 <_printf_float+0x1b2>
 801079c:	6822      	ldr	r2, [r4, #0]
 801079e:	07d2      	lsls	r2, r2, #31
 80107a0:	d501      	bpl.n	80107a6 <_printf_float+0x1b6>
 80107a2:	3302      	adds	r3, #2
 80107a4:	e7f4      	b.n	8010790 <_printf_float+0x1a0>
 80107a6:	2301      	movs	r3, #1
 80107a8:	e7f2      	b.n	8010790 <_printf_float+0x1a0>
 80107aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80107ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107b0:	4299      	cmp	r1, r3
 80107b2:	db05      	blt.n	80107c0 <_printf_float+0x1d0>
 80107b4:	6823      	ldr	r3, [r4, #0]
 80107b6:	6121      	str	r1, [r4, #16]
 80107b8:	07d8      	lsls	r0, r3, #31
 80107ba:	d5ea      	bpl.n	8010792 <_printf_float+0x1a2>
 80107bc:	1c4b      	adds	r3, r1, #1
 80107be:	e7e7      	b.n	8010790 <_printf_float+0x1a0>
 80107c0:	2900      	cmp	r1, #0
 80107c2:	bfd4      	ite	le
 80107c4:	f1c1 0202 	rsble	r2, r1, #2
 80107c8:	2201      	movgt	r2, #1
 80107ca:	4413      	add	r3, r2
 80107cc:	e7e0      	b.n	8010790 <_printf_float+0x1a0>
 80107ce:	6823      	ldr	r3, [r4, #0]
 80107d0:	055a      	lsls	r2, r3, #21
 80107d2:	d407      	bmi.n	80107e4 <_printf_float+0x1f4>
 80107d4:	6923      	ldr	r3, [r4, #16]
 80107d6:	4642      	mov	r2, r8
 80107d8:	4631      	mov	r1, r6
 80107da:	4628      	mov	r0, r5
 80107dc:	47b8      	blx	r7
 80107de:	3001      	adds	r0, #1
 80107e0:	d12c      	bne.n	801083c <_printf_float+0x24c>
 80107e2:	e764      	b.n	80106ae <_printf_float+0xbe>
 80107e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80107e8:	f240 80e0 	bls.w	80109ac <_printf_float+0x3bc>
 80107ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80107f0:	2200      	movs	r2, #0
 80107f2:	2300      	movs	r3, #0
 80107f4:	f7f0 f9e8 	bl	8000bc8 <__aeabi_dcmpeq>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	d034      	beq.n	8010866 <_printf_float+0x276>
 80107fc:	4a37      	ldr	r2, [pc, #220]	; (80108dc <_printf_float+0x2ec>)
 80107fe:	2301      	movs	r3, #1
 8010800:	4631      	mov	r1, r6
 8010802:	4628      	mov	r0, r5
 8010804:	47b8      	blx	r7
 8010806:	3001      	adds	r0, #1
 8010808:	f43f af51 	beq.w	80106ae <_printf_float+0xbe>
 801080c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010810:	429a      	cmp	r2, r3
 8010812:	db02      	blt.n	801081a <_printf_float+0x22a>
 8010814:	6823      	ldr	r3, [r4, #0]
 8010816:	07d8      	lsls	r0, r3, #31
 8010818:	d510      	bpl.n	801083c <_printf_float+0x24c>
 801081a:	ee18 3a10 	vmov	r3, s16
 801081e:	4652      	mov	r2, sl
 8010820:	4631      	mov	r1, r6
 8010822:	4628      	mov	r0, r5
 8010824:	47b8      	blx	r7
 8010826:	3001      	adds	r0, #1
 8010828:	f43f af41 	beq.w	80106ae <_printf_float+0xbe>
 801082c:	f04f 0800 	mov.w	r8, #0
 8010830:	f104 091a 	add.w	r9, r4, #26
 8010834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010836:	3b01      	subs	r3, #1
 8010838:	4543      	cmp	r3, r8
 801083a:	dc09      	bgt.n	8010850 <_printf_float+0x260>
 801083c:	6823      	ldr	r3, [r4, #0]
 801083e:	079b      	lsls	r3, r3, #30
 8010840:	f100 8107 	bmi.w	8010a52 <_printf_float+0x462>
 8010844:	68e0      	ldr	r0, [r4, #12]
 8010846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010848:	4298      	cmp	r0, r3
 801084a:	bfb8      	it	lt
 801084c:	4618      	movlt	r0, r3
 801084e:	e730      	b.n	80106b2 <_printf_float+0xc2>
 8010850:	2301      	movs	r3, #1
 8010852:	464a      	mov	r2, r9
 8010854:	4631      	mov	r1, r6
 8010856:	4628      	mov	r0, r5
 8010858:	47b8      	blx	r7
 801085a:	3001      	adds	r0, #1
 801085c:	f43f af27 	beq.w	80106ae <_printf_float+0xbe>
 8010860:	f108 0801 	add.w	r8, r8, #1
 8010864:	e7e6      	b.n	8010834 <_printf_float+0x244>
 8010866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010868:	2b00      	cmp	r3, #0
 801086a:	dc39      	bgt.n	80108e0 <_printf_float+0x2f0>
 801086c:	4a1b      	ldr	r2, [pc, #108]	; (80108dc <_printf_float+0x2ec>)
 801086e:	2301      	movs	r3, #1
 8010870:	4631      	mov	r1, r6
 8010872:	4628      	mov	r0, r5
 8010874:	47b8      	blx	r7
 8010876:	3001      	adds	r0, #1
 8010878:	f43f af19 	beq.w	80106ae <_printf_float+0xbe>
 801087c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010880:	4313      	orrs	r3, r2
 8010882:	d102      	bne.n	801088a <_printf_float+0x29a>
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	07d9      	lsls	r1, r3, #31
 8010888:	d5d8      	bpl.n	801083c <_printf_float+0x24c>
 801088a:	ee18 3a10 	vmov	r3, s16
 801088e:	4652      	mov	r2, sl
 8010890:	4631      	mov	r1, r6
 8010892:	4628      	mov	r0, r5
 8010894:	47b8      	blx	r7
 8010896:	3001      	adds	r0, #1
 8010898:	f43f af09 	beq.w	80106ae <_printf_float+0xbe>
 801089c:	f04f 0900 	mov.w	r9, #0
 80108a0:	f104 0a1a 	add.w	sl, r4, #26
 80108a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108a6:	425b      	negs	r3, r3
 80108a8:	454b      	cmp	r3, r9
 80108aa:	dc01      	bgt.n	80108b0 <_printf_float+0x2c0>
 80108ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108ae:	e792      	b.n	80107d6 <_printf_float+0x1e6>
 80108b0:	2301      	movs	r3, #1
 80108b2:	4652      	mov	r2, sl
 80108b4:	4631      	mov	r1, r6
 80108b6:	4628      	mov	r0, r5
 80108b8:	47b8      	blx	r7
 80108ba:	3001      	adds	r0, #1
 80108bc:	f43f aef7 	beq.w	80106ae <_printf_float+0xbe>
 80108c0:	f109 0901 	add.w	r9, r9, #1
 80108c4:	e7ee      	b.n	80108a4 <_printf_float+0x2b4>
 80108c6:	bf00      	nop
 80108c8:	7fefffff 	.word	0x7fefffff
 80108cc:	0802c798 	.word	0x0802c798
 80108d0:	0802c79c 	.word	0x0802c79c
 80108d4:	0802c7a0 	.word	0x0802c7a0
 80108d8:	0802c7a4 	.word	0x0802c7a4
 80108dc:	0802c7a8 	.word	0x0802c7a8
 80108e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80108e4:	429a      	cmp	r2, r3
 80108e6:	bfa8      	it	ge
 80108e8:	461a      	movge	r2, r3
 80108ea:	2a00      	cmp	r2, #0
 80108ec:	4691      	mov	r9, r2
 80108ee:	dc37      	bgt.n	8010960 <_printf_float+0x370>
 80108f0:	f04f 0b00 	mov.w	fp, #0
 80108f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80108f8:	f104 021a 	add.w	r2, r4, #26
 80108fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80108fe:	9305      	str	r3, [sp, #20]
 8010900:	eba3 0309 	sub.w	r3, r3, r9
 8010904:	455b      	cmp	r3, fp
 8010906:	dc33      	bgt.n	8010970 <_printf_float+0x380>
 8010908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801090c:	429a      	cmp	r2, r3
 801090e:	db3b      	blt.n	8010988 <_printf_float+0x398>
 8010910:	6823      	ldr	r3, [r4, #0]
 8010912:	07da      	lsls	r2, r3, #31
 8010914:	d438      	bmi.n	8010988 <_printf_float+0x398>
 8010916:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801091a:	eba2 0903 	sub.w	r9, r2, r3
 801091e:	9b05      	ldr	r3, [sp, #20]
 8010920:	1ad2      	subs	r2, r2, r3
 8010922:	4591      	cmp	r9, r2
 8010924:	bfa8      	it	ge
 8010926:	4691      	movge	r9, r2
 8010928:	f1b9 0f00 	cmp.w	r9, #0
 801092c:	dc35      	bgt.n	801099a <_printf_float+0x3aa>
 801092e:	f04f 0800 	mov.w	r8, #0
 8010932:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010936:	f104 0a1a 	add.w	sl, r4, #26
 801093a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801093e:	1a9b      	subs	r3, r3, r2
 8010940:	eba3 0309 	sub.w	r3, r3, r9
 8010944:	4543      	cmp	r3, r8
 8010946:	f77f af79 	ble.w	801083c <_printf_float+0x24c>
 801094a:	2301      	movs	r3, #1
 801094c:	4652      	mov	r2, sl
 801094e:	4631      	mov	r1, r6
 8010950:	4628      	mov	r0, r5
 8010952:	47b8      	blx	r7
 8010954:	3001      	adds	r0, #1
 8010956:	f43f aeaa 	beq.w	80106ae <_printf_float+0xbe>
 801095a:	f108 0801 	add.w	r8, r8, #1
 801095e:	e7ec      	b.n	801093a <_printf_float+0x34a>
 8010960:	4613      	mov	r3, r2
 8010962:	4631      	mov	r1, r6
 8010964:	4642      	mov	r2, r8
 8010966:	4628      	mov	r0, r5
 8010968:	47b8      	blx	r7
 801096a:	3001      	adds	r0, #1
 801096c:	d1c0      	bne.n	80108f0 <_printf_float+0x300>
 801096e:	e69e      	b.n	80106ae <_printf_float+0xbe>
 8010970:	2301      	movs	r3, #1
 8010972:	4631      	mov	r1, r6
 8010974:	4628      	mov	r0, r5
 8010976:	9205      	str	r2, [sp, #20]
 8010978:	47b8      	blx	r7
 801097a:	3001      	adds	r0, #1
 801097c:	f43f ae97 	beq.w	80106ae <_printf_float+0xbe>
 8010980:	9a05      	ldr	r2, [sp, #20]
 8010982:	f10b 0b01 	add.w	fp, fp, #1
 8010986:	e7b9      	b.n	80108fc <_printf_float+0x30c>
 8010988:	ee18 3a10 	vmov	r3, s16
 801098c:	4652      	mov	r2, sl
 801098e:	4631      	mov	r1, r6
 8010990:	4628      	mov	r0, r5
 8010992:	47b8      	blx	r7
 8010994:	3001      	adds	r0, #1
 8010996:	d1be      	bne.n	8010916 <_printf_float+0x326>
 8010998:	e689      	b.n	80106ae <_printf_float+0xbe>
 801099a:	9a05      	ldr	r2, [sp, #20]
 801099c:	464b      	mov	r3, r9
 801099e:	4442      	add	r2, r8
 80109a0:	4631      	mov	r1, r6
 80109a2:	4628      	mov	r0, r5
 80109a4:	47b8      	blx	r7
 80109a6:	3001      	adds	r0, #1
 80109a8:	d1c1      	bne.n	801092e <_printf_float+0x33e>
 80109aa:	e680      	b.n	80106ae <_printf_float+0xbe>
 80109ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109ae:	2a01      	cmp	r2, #1
 80109b0:	dc01      	bgt.n	80109b6 <_printf_float+0x3c6>
 80109b2:	07db      	lsls	r3, r3, #31
 80109b4:	d53a      	bpl.n	8010a2c <_printf_float+0x43c>
 80109b6:	2301      	movs	r3, #1
 80109b8:	4642      	mov	r2, r8
 80109ba:	4631      	mov	r1, r6
 80109bc:	4628      	mov	r0, r5
 80109be:	47b8      	blx	r7
 80109c0:	3001      	adds	r0, #1
 80109c2:	f43f ae74 	beq.w	80106ae <_printf_float+0xbe>
 80109c6:	ee18 3a10 	vmov	r3, s16
 80109ca:	4652      	mov	r2, sl
 80109cc:	4631      	mov	r1, r6
 80109ce:	4628      	mov	r0, r5
 80109d0:	47b8      	blx	r7
 80109d2:	3001      	adds	r0, #1
 80109d4:	f43f ae6b 	beq.w	80106ae <_printf_float+0xbe>
 80109d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80109dc:	2200      	movs	r2, #0
 80109de:	2300      	movs	r3, #0
 80109e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80109e4:	f7f0 f8f0 	bl	8000bc8 <__aeabi_dcmpeq>
 80109e8:	b9d8      	cbnz	r0, 8010a22 <_printf_float+0x432>
 80109ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80109ee:	f108 0201 	add.w	r2, r8, #1
 80109f2:	4631      	mov	r1, r6
 80109f4:	4628      	mov	r0, r5
 80109f6:	47b8      	blx	r7
 80109f8:	3001      	adds	r0, #1
 80109fa:	d10e      	bne.n	8010a1a <_printf_float+0x42a>
 80109fc:	e657      	b.n	80106ae <_printf_float+0xbe>
 80109fe:	2301      	movs	r3, #1
 8010a00:	4652      	mov	r2, sl
 8010a02:	4631      	mov	r1, r6
 8010a04:	4628      	mov	r0, r5
 8010a06:	47b8      	blx	r7
 8010a08:	3001      	adds	r0, #1
 8010a0a:	f43f ae50 	beq.w	80106ae <_printf_float+0xbe>
 8010a0e:	f108 0801 	add.w	r8, r8, #1
 8010a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a14:	3b01      	subs	r3, #1
 8010a16:	4543      	cmp	r3, r8
 8010a18:	dcf1      	bgt.n	80109fe <_printf_float+0x40e>
 8010a1a:	464b      	mov	r3, r9
 8010a1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010a20:	e6da      	b.n	80107d8 <_printf_float+0x1e8>
 8010a22:	f04f 0800 	mov.w	r8, #0
 8010a26:	f104 0a1a 	add.w	sl, r4, #26
 8010a2a:	e7f2      	b.n	8010a12 <_printf_float+0x422>
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	4642      	mov	r2, r8
 8010a30:	e7df      	b.n	80109f2 <_printf_float+0x402>
 8010a32:	2301      	movs	r3, #1
 8010a34:	464a      	mov	r2, r9
 8010a36:	4631      	mov	r1, r6
 8010a38:	4628      	mov	r0, r5
 8010a3a:	47b8      	blx	r7
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	f43f ae36 	beq.w	80106ae <_printf_float+0xbe>
 8010a42:	f108 0801 	add.w	r8, r8, #1
 8010a46:	68e3      	ldr	r3, [r4, #12]
 8010a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a4a:	1a5b      	subs	r3, r3, r1
 8010a4c:	4543      	cmp	r3, r8
 8010a4e:	dcf0      	bgt.n	8010a32 <_printf_float+0x442>
 8010a50:	e6f8      	b.n	8010844 <_printf_float+0x254>
 8010a52:	f04f 0800 	mov.w	r8, #0
 8010a56:	f104 0919 	add.w	r9, r4, #25
 8010a5a:	e7f4      	b.n	8010a46 <_printf_float+0x456>

08010a5c <_printf_common>:
 8010a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a60:	4616      	mov	r6, r2
 8010a62:	4699      	mov	r9, r3
 8010a64:	688a      	ldr	r2, [r1, #8]
 8010a66:	690b      	ldr	r3, [r1, #16]
 8010a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	bfb8      	it	lt
 8010a70:	4613      	movlt	r3, r2
 8010a72:	6033      	str	r3, [r6, #0]
 8010a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a78:	4607      	mov	r7, r0
 8010a7a:	460c      	mov	r4, r1
 8010a7c:	b10a      	cbz	r2, 8010a82 <_printf_common+0x26>
 8010a7e:	3301      	adds	r3, #1
 8010a80:	6033      	str	r3, [r6, #0]
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	0699      	lsls	r1, r3, #26
 8010a86:	bf42      	ittt	mi
 8010a88:	6833      	ldrmi	r3, [r6, #0]
 8010a8a:	3302      	addmi	r3, #2
 8010a8c:	6033      	strmi	r3, [r6, #0]
 8010a8e:	6825      	ldr	r5, [r4, #0]
 8010a90:	f015 0506 	ands.w	r5, r5, #6
 8010a94:	d106      	bne.n	8010aa4 <_printf_common+0x48>
 8010a96:	f104 0a19 	add.w	sl, r4, #25
 8010a9a:	68e3      	ldr	r3, [r4, #12]
 8010a9c:	6832      	ldr	r2, [r6, #0]
 8010a9e:	1a9b      	subs	r3, r3, r2
 8010aa0:	42ab      	cmp	r3, r5
 8010aa2:	dc26      	bgt.n	8010af2 <_printf_common+0x96>
 8010aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010aa8:	1e13      	subs	r3, r2, #0
 8010aaa:	6822      	ldr	r2, [r4, #0]
 8010aac:	bf18      	it	ne
 8010aae:	2301      	movne	r3, #1
 8010ab0:	0692      	lsls	r2, r2, #26
 8010ab2:	d42b      	bmi.n	8010b0c <_printf_common+0xb0>
 8010ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ab8:	4649      	mov	r1, r9
 8010aba:	4638      	mov	r0, r7
 8010abc:	47c0      	blx	r8
 8010abe:	3001      	adds	r0, #1
 8010ac0:	d01e      	beq.n	8010b00 <_printf_common+0xa4>
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	6922      	ldr	r2, [r4, #16]
 8010ac6:	f003 0306 	and.w	r3, r3, #6
 8010aca:	2b04      	cmp	r3, #4
 8010acc:	bf02      	ittt	eq
 8010ace:	68e5      	ldreq	r5, [r4, #12]
 8010ad0:	6833      	ldreq	r3, [r6, #0]
 8010ad2:	1aed      	subeq	r5, r5, r3
 8010ad4:	68a3      	ldr	r3, [r4, #8]
 8010ad6:	bf0c      	ite	eq
 8010ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010adc:	2500      	movne	r5, #0
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	bfc4      	itt	gt
 8010ae2:	1a9b      	subgt	r3, r3, r2
 8010ae4:	18ed      	addgt	r5, r5, r3
 8010ae6:	2600      	movs	r6, #0
 8010ae8:	341a      	adds	r4, #26
 8010aea:	42b5      	cmp	r5, r6
 8010aec:	d11a      	bne.n	8010b24 <_printf_common+0xc8>
 8010aee:	2000      	movs	r0, #0
 8010af0:	e008      	b.n	8010b04 <_printf_common+0xa8>
 8010af2:	2301      	movs	r3, #1
 8010af4:	4652      	mov	r2, sl
 8010af6:	4649      	mov	r1, r9
 8010af8:	4638      	mov	r0, r7
 8010afa:	47c0      	blx	r8
 8010afc:	3001      	adds	r0, #1
 8010afe:	d103      	bne.n	8010b08 <_printf_common+0xac>
 8010b00:	f04f 30ff 	mov.w	r0, #4294967295
 8010b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b08:	3501      	adds	r5, #1
 8010b0a:	e7c6      	b.n	8010a9a <_printf_common+0x3e>
 8010b0c:	18e1      	adds	r1, r4, r3
 8010b0e:	1c5a      	adds	r2, r3, #1
 8010b10:	2030      	movs	r0, #48	; 0x30
 8010b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010b16:	4422      	add	r2, r4
 8010b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b20:	3302      	adds	r3, #2
 8010b22:	e7c7      	b.n	8010ab4 <_printf_common+0x58>
 8010b24:	2301      	movs	r3, #1
 8010b26:	4622      	mov	r2, r4
 8010b28:	4649      	mov	r1, r9
 8010b2a:	4638      	mov	r0, r7
 8010b2c:	47c0      	blx	r8
 8010b2e:	3001      	adds	r0, #1
 8010b30:	d0e6      	beq.n	8010b00 <_printf_common+0xa4>
 8010b32:	3601      	adds	r6, #1
 8010b34:	e7d9      	b.n	8010aea <_printf_common+0x8e>
	...

08010b38 <_printf_i>:
 8010b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b3c:	7e0f      	ldrb	r7, [r1, #24]
 8010b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010b40:	2f78      	cmp	r7, #120	; 0x78
 8010b42:	4691      	mov	r9, r2
 8010b44:	4680      	mov	r8, r0
 8010b46:	460c      	mov	r4, r1
 8010b48:	469a      	mov	sl, r3
 8010b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010b4e:	d807      	bhi.n	8010b60 <_printf_i+0x28>
 8010b50:	2f62      	cmp	r7, #98	; 0x62
 8010b52:	d80a      	bhi.n	8010b6a <_printf_i+0x32>
 8010b54:	2f00      	cmp	r7, #0
 8010b56:	f000 80d4 	beq.w	8010d02 <_printf_i+0x1ca>
 8010b5a:	2f58      	cmp	r7, #88	; 0x58
 8010b5c:	f000 80c0 	beq.w	8010ce0 <_printf_i+0x1a8>
 8010b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b68:	e03a      	b.n	8010be0 <_printf_i+0xa8>
 8010b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b6e:	2b15      	cmp	r3, #21
 8010b70:	d8f6      	bhi.n	8010b60 <_printf_i+0x28>
 8010b72:	a101      	add	r1, pc, #4	; (adr r1, 8010b78 <_printf_i+0x40>)
 8010b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b78:	08010bd1 	.word	0x08010bd1
 8010b7c:	08010be5 	.word	0x08010be5
 8010b80:	08010b61 	.word	0x08010b61
 8010b84:	08010b61 	.word	0x08010b61
 8010b88:	08010b61 	.word	0x08010b61
 8010b8c:	08010b61 	.word	0x08010b61
 8010b90:	08010be5 	.word	0x08010be5
 8010b94:	08010b61 	.word	0x08010b61
 8010b98:	08010b61 	.word	0x08010b61
 8010b9c:	08010b61 	.word	0x08010b61
 8010ba0:	08010b61 	.word	0x08010b61
 8010ba4:	08010ce9 	.word	0x08010ce9
 8010ba8:	08010c11 	.word	0x08010c11
 8010bac:	08010ca3 	.word	0x08010ca3
 8010bb0:	08010b61 	.word	0x08010b61
 8010bb4:	08010b61 	.word	0x08010b61
 8010bb8:	08010d0b 	.word	0x08010d0b
 8010bbc:	08010b61 	.word	0x08010b61
 8010bc0:	08010c11 	.word	0x08010c11
 8010bc4:	08010b61 	.word	0x08010b61
 8010bc8:	08010b61 	.word	0x08010b61
 8010bcc:	08010cab 	.word	0x08010cab
 8010bd0:	682b      	ldr	r3, [r5, #0]
 8010bd2:	1d1a      	adds	r2, r3, #4
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	602a      	str	r2, [r5, #0]
 8010bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010be0:	2301      	movs	r3, #1
 8010be2:	e09f      	b.n	8010d24 <_printf_i+0x1ec>
 8010be4:	6820      	ldr	r0, [r4, #0]
 8010be6:	682b      	ldr	r3, [r5, #0]
 8010be8:	0607      	lsls	r7, r0, #24
 8010bea:	f103 0104 	add.w	r1, r3, #4
 8010bee:	6029      	str	r1, [r5, #0]
 8010bf0:	d501      	bpl.n	8010bf6 <_printf_i+0xbe>
 8010bf2:	681e      	ldr	r6, [r3, #0]
 8010bf4:	e003      	b.n	8010bfe <_printf_i+0xc6>
 8010bf6:	0646      	lsls	r6, r0, #25
 8010bf8:	d5fb      	bpl.n	8010bf2 <_printf_i+0xba>
 8010bfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010bfe:	2e00      	cmp	r6, #0
 8010c00:	da03      	bge.n	8010c0a <_printf_i+0xd2>
 8010c02:	232d      	movs	r3, #45	; 0x2d
 8010c04:	4276      	negs	r6, r6
 8010c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c0a:	485a      	ldr	r0, [pc, #360]	; (8010d74 <_printf_i+0x23c>)
 8010c0c:	230a      	movs	r3, #10
 8010c0e:	e012      	b.n	8010c36 <_printf_i+0xfe>
 8010c10:	682b      	ldr	r3, [r5, #0]
 8010c12:	6820      	ldr	r0, [r4, #0]
 8010c14:	1d19      	adds	r1, r3, #4
 8010c16:	6029      	str	r1, [r5, #0]
 8010c18:	0605      	lsls	r5, r0, #24
 8010c1a:	d501      	bpl.n	8010c20 <_printf_i+0xe8>
 8010c1c:	681e      	ldr	r6, [r3, #0]
 8010c1e:	e002      	b.n	8010c26 <_printf_i+0xee>
 8010c20:	0641      	lsls	r1, r0, #25
 8010c22:	d5fb      	bpl.n	8010c1c <_printf_i+0xe4>
 8010c24:	881e      	ldrh	r6, [r3, #0]
 8010c26:	4853      	ldr	r0, [pc, #332]	; (8010d74 <_printf_i+0x23c>)
 8010c28:	2f6f      	cmp	r7, #111	; 0x6f
 8010c2a:	bf0c      	ite	eq
 8010c2c:	2308      	moveq	r3, #8
 8010c2e:	230a      	movne	r3, #10
 8010c30:	2100      	movs	r1, #0
 8010c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c36:	6865      	ldr	r5, [r4, #4]
 8010c38:	60a5      	str	r5, [r4, #8]
 8010c3a:	2d00      	cmp	r5, #0
 8010c3c:	bfa2      	ittt	ge
 8010c3e:	6821      	ldrge	r1, [r4, #0]
 8010c40:	f021 0104 	bicge.w	r1, r1, #4
 8010c44:	6021      	strge	r1, [r4, #0]
 8010c46:	b90e      	cbnz	r6, 8010c4c <_printf_i+0x114>
 8010c48:	2d00      	cmp	r5, #0
 8010c4a:	d04b      	beq.n	8010ce4 <_printf_i+0x1ac>
 8010c4c:	4615      	mov	r5, r2
 8010c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010c52:	fb03 6711 	mls	r7, r3, r1, r6
 8010c56:	5dc7      	ldrb	r7, [r0, r7]
 8010c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010c5c:	4637      	mov	r7, r6
 8010c5e:	42bb      	cmp	r3, r7
 8010c60:	460e      	mov	r6, r1
 8010c62:	d9f4      	bls.n	8010c4e <_printf_i+0x116>
 8010c64:	2b08      	cmp	r3, #8
 8010c66:	d10b      	bne.n	8010c80 <_printf_i+0x148>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	07de      	lsls	r6, r3, #31
 8010c6c:	d508      	bpl.n	8010c80 <_printf_i+0x148>
 8010c6e:	6923      	ldr	r3, [r4, #16]
 8010c70:	6861      	ldr	r1, [r4, #4]
 8010c72:	4299      	cmp	r1, r3
 8010c74:	bfde      	ittt	le
 8010c76:	2330      	movle	r3, #48	; 0x30
 8010c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010c80:	1b52      	subs	r2, r2, r5
 8010c82:	6122      	str	r2, [r4, #16]
 8010c84:	f8cd a000 	str.w	sl, [sp]
 8010c88:	464b      	mov	r3, r9
 8010c8a:	aa03      	add	r2, sp, #12
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	4640      	mov	r0, r8
 8010c90:	f7ff fee4 	bl	8010a5c <_printf_common>
 8010c94:	3001      	adds	r0, #1
 8010c96:	d14a      	bne.n	8010d2e <_printf_i+0x1f6>
 8010c98:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9c:	b004      	add	sp, #16
 8010c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ca2:	6823      	ldr	r3, [r4, #0]
 8010ca4:	f043 0320 	orr.w	r3, r3, #32
 8010ca8:	6023      	str	r3, [r4, #0]
 8010caa:	4833      	ldr	r0, [pc, #204]	; (8010d78 <_printf_i+0x240>)
 8010cac:	2778      	movs	r7, #120	; 0x78
 8010cae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010cb2:	6823      	ldr	r3, [r4, #0]
 8010cb4:	6829      	ldr	r1, [r5, #0]
 8010cb6:	061f      	lsls	r7, r3, #24
 8010cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8010cbc:	d402      	bmi.n	8010cc4 <_printf_i+0x18c>
 8010cbe:	065f      	lsls	r7, r3, #25
 8010cc0:	bf48      	it	mi
 8010cc2:	b2b6      	uxthmi	r6, r6
 8010cc4:	07df      	lsls	r7, r3, #31
 8010cc6:	bf48      	it	mi
 8010cc8:	f043 0320 	orrmi.w	r3, r3, #32
 8010ccc:	6029      	str	r1, [r5, #0]
 8010cce:	bf48      	it	mi
 8010cd0:	6023      	strmi	r3, [r4, #0]
 8010cd2:	b91e      	cbnz	r6, 8010cdc <_printf_i+0x1a4>
 8010cd4:	6823      	ldr	r3, [r4, #0]
 8010cd6:	f023 0320 	bic.w	r3, r3, #32
 8010cda:	6023      	str	r3, [r4, #0]
 8010cdc:	2310      	movs	r3, #16
 8010cde:	e7a7      	b.n	8010c30 <_printf_i+0xf8>
 8010ce0:	4824      	ldr	r0, [pc, #144]	; (8010d74 <_printf_i+0x23c>)
 8010ce2:	e7e4      	b.n	8010cae <_printf_i+0x176>
 8010ce4:	4615      	mov	r5, r2
 8010ce6:	e7bd      	b.n	8010c64 <_printf_i+0x12c>
 8010ce8:	682b      	ldr	r3, [r5, #0]
 8010cea:	6826      	ldr	r6, [r4, #0]
 8010cec:	6961      	ldr	r1, [r4, #20]
 8010cee:	1d18      	adds	r0, r3, #4
 8010cf0:	6028      	str	r0, [r5, #0]
 8010cf2:	0635      	lsls	r5, r6, #24
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	d501      	bpl.n	8010cfc <_printf_i+0x1c4>
 8010cf8:	6019      	str	r1, [r3, #0]
 8010cfa:	e002      	b.n	8010d02 <_printf_i+0x1ca>
 8010cfc:	0670      	lsls	r0, r6, #25
 8010cfe:	d5fb      	bpl.n	8010cf8 <_printf_i+0x1c0>
 8010d00:	8019      	strh	r1, [r3, #0]
 8010d02:	2300      	movs	r3, #0
 8010d04:	6123      	str	r3, [r4, #16]
 8010d06:	4615      	mov	r5, r2
 8010d08:	e7bc      	b.n	8010c84 <_printf_i+0x14c>
 8010d0a:	682b      	ldr	r3, [r5, #0]
 8010d0c:	1d1a      	adds	r2, r3, #4
 8010d0e:	602a      	str	r2, [r5, #0]
 8010d10:	681d      	ldr	r5, [r3, #0]
 8010d12:	6862      	ldr	r2, [r4, #4]
 8010d14:	2100      	movs	r1, #0
 8010d16:	4628      	mov	r0, r5
 8010d18:	f7ef fada 	bl	80002d0 <memchr>
 8010d1c:	b108      	cbz	r0, 8010d22 <_printf_i+0x1ea>
 8010d1e:	1b40      	subs	r0, r0, r5
 8010d20:	6060      	str	r0, [r4, #4]
 8010d22:	6863      	ldr	r3, [r4, #4]
 8010d24:	6123      	str	r3, [r4, #16]
 8010d26:	2300      	movs	r3, #0
 8010d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d2c:	e7aa      	b.n	8010c84 <_printf_i+0x14c>
 8010d2e:	6923      	ldr	r3, [r4, #16]
 8010d30:	462a      	mov	r2, r5
 8010d32:	4649      	mov	r1, r9
 8010d34:	4640      	mov	r0, r8
 8010d36:	47d0      	blx	sl
 8010d38:	3001      	adds	r0, #1
 8010d3a:	d0ad      	beq.n	8010c98 <_printf_i+0x160>
 8010d3c:	6823      	ldr	r3, [r4, #0]
 8010d3e:	079b      	lsls	r3, r3, #30
 8010d40:	d413      	bmi.n	8010d6a <_printf_i+0x232>
 8010d42:	68e0      	ldr	r0, [r4, #12]
 8010d44:	9b03      	ldr	r3, [sp, #12]
 8010d46:	4298      	cmp	r0, r3
 8010d48:	bfb8      	it	lt
 8010d4a:	4618      	movlt	r0, r3
 8010d4c:	e7a6      	b.n	8010c9c <_printf_i+0x164>
 8010d4e:	2301      	movs	r3, #1
 8010d50:	4632      	mov	r2, r6
 8010d52:	4649      	mov	r1, r9
 8010d54:	4640      	mov	r0, r8
 8010d56:	47d0      	blx	sl
 8010d58:	3001      	adds	r0, #1
 8010d5a:	d09d      	beq.n	8010c98 <_printf_i+0x160>
 8010d5c:	3501      	adds	r5, #1
 8010d5e:	68e3      	ldr	r3, [r4, #12]
 8010d60:	9903      	ldr	r1, [sp, #12]
 8010d62:	1a5b      	subs	r3, r3, r1
 8010d64:	42ab      	cmp	r3, r5
 8010d66:	dcf2      	bgt.n	8010d4e <_printf_i+0x216>
 8010d68:	e7eb      	b.n	8010d42 <_printf_i+0x20a>
 8010d6a:	2500      	movs	r5, #0
 8010d6c:	f104 0619 	add.w	r6, r4, #25
 8010d70:	e7f5      	b.n	8010d5e <_printf_i+0x226>
 8010d72:	bf00      	nop
 8010d74:	0802c7aa 	.word	0x0802c7aa
 8010d78:	0802c7bb 	.word	0x0802c7bb

08010d7c <std>:
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	b510      	push	{r4, lr}
 8010d80:	4604      	mov	r4, r0
 8010d82:	e9c0 3300 	strd	r3, r3, [r0]
 8010d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d8a:	6083      	str	r3, [r0, #8]
 8010d8c:	8181      	strh	r1, [r0, #12]
 8010d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8010d90:	81c2      	strh	r2, [r0, #14]
 8010d92:	6183      	str	r3, [r0, #24]
 8010d94:	4619      	mov	r1, r3
 8010d96:	2208      	movs	r2, #8
 8010d98:	305c      	adds	r0, #92	; 0x5c
 8010d9a:	f000 fa21 	bl	80111e0 <memset>
 8010d9e:	4b0d      	ldr	r3, [pc, #52]	; (8010dd4 <std+0x58>)
 8010da0:	6263      	str	r3, [r4, #36]	; 0x24
 8010da2:	4b0d      	ldr	r3, [pc, #52]	; (8010dd8 <std+0x5c>)
 8010da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010da6:	4b0d      	ldr	r3, [pc, #52]	; (8010ddc <std+0x60>)
 8010da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010daa:	4b0d      	ldr	r3, [pc, #52]	; (8010de0 <std+0x64>)
 8010dac:	6323      	str	r3, [r4, #48]	; 0x30
 8010dae:	4b0d      	ldr	r3, [pc, #52]	; (8010de4 <std+0x68>)
 8010db0:	6224      	str	r4, [r4, #32]
 8010db2:	429c      	cmp	r4, r3
 8010db4:	d006      	beq.n	8010dc4 <std+0x48>
 8010db6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010dba:	4294      	cmp	r4, r2
 8010dbc:	d002      	beq.n	8010dc4 <std+0x48>
 8010dbe:	33d0      	adds	r3, #208	; 0xd0
 8010dc0:	429c      	cmp	r4, r3
 8010dc2:	d105      	bne.n	8010dd0 <std+0x54>
 8010dc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dcc:	f000 bad8 	b.w	8011380 <__retarget_lock_init_recursive>
 8010dd0:	bd10      	pop	{r4, pc}
 8010dd2:	bf00      	nop
 8010dd4:	08010fdd 	.word	0x08010fdd
 8010dd8:	08010fff 	.word	0x08010fff
 8010ddc:	08011037 	.word	0x08011037
 8010de0:	0801105b 	.word	0x0801105b
 8010de4:	20016184 	.word	0x20016184

08010de8 <stdio_exit_handler>:
 8010de8:	4a02      	ldr	r2, [pc, #8]	; (8010df4 <stdio_exit_handler+0xc>)
 8010dea:	4903      	ldr	r1, [pc, #12]	; (8010df8 <stdio_exit_handler+0x10>)
 8010dec:	4803      	ldr	r0, [pc, #12]	; (8010dfc <stdio_exit_handler+0x14>)
 8010dee:	f000 b869 	b.w	8010ec4 <_fwalk_sglue>
 8010df2:	bf00      	nop
 8010df4:	20000978 	.word	0x20000978
 8010df8:	08012bc1 	.word	0x08012bc1
 8010dfc:	20000984 	.word	0x20000984

08010e00 <cleanup_stdio>:
 8010e00:	6841      	ldr	r1, [r0, #4]
 8010e02:	4b0c      	ldr	r3, [pc, #48]	; (8010e34 <cleanup_stdio+0x34>)
 8010e04:	4299      	cmp	r1, r3
 8010e06:	b510      	push	{r4, lr}
 8010e08:	4604      	mov	r4, r0
 8010e0a:	d001      	beq.n	8010e10 <cleanup_stdio+0x10>
 8010e0c:	f001 fed8 	bl	8012bc0 <_fflush_r>
 8010e10:	68a1      	ldr	r1, [r4, #8]
 8010e12:	4b09      	ldr	r3, [pc, #36]	; (8010e38 <cleanup_stdio+0x38>)
 8010e14:	4299      	cmp	r1, r3
 8010e16:	d002      	beq.n	8010e1e <cleanup_stdio+0x1e>
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f001 fed1 	bl	8012bc0 <_fflush_r>
 8010e1e:	68e1      	ldr	r1, [r4, #12]
 8010e20:	4b06      	ldr	r3, [pc, #24]	; (8010e3c <cleanup_stdio+0x3c>)
 8010e22:	4299      	cmp	r1, r3
 8010e24:	d004      	beq.n	8010e30 <cleanup_stdio+0x30>
 8010e26:	4620      	mov	r0, r4
 8010e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e2c:	f001 bec8 	b.w	8012bc0 <_fflush_r>
 8010e30:	bd10      	pop	{r4, pc}
 8010e32:	bf00      	nop
 8010e34:	20016184 	.word	0x20016184
 8010e38:	200161ec 	.word	0x200161ec
 8010e3c:	20016254 	.word	0x20016254

08010e40 <global_stdio_init.part.0>:
 8010e40:	b510      	push	{r4, lr}
 8010e42:	4b0b      	ldr	r3, [pc, #44]	; (8010e70 <global_stdio_init.part.0+0x30>)
 8010e44:	4c0b      	ldr	r4, [pc, #44]	; (8010e74 <global_stdio_init.part.0+0x34>)
 8010e46:	4a0c      	ldr	r2, [pc, #48]	; (8010e78 <global_stdio_init.part.0+0x38>)
 8010e48:	601a      	str	r2, [r3, #0]
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	2104      	movs	r1, #4
 8010e50:	f7ff ff94 	bl	8010d7c <std>
 8010e54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010e58:	2201      	movs	r2, #1
 8010e5a:	2109      	movs	r1, #9
 8010e5c:	f7ff ff8e 	bl	8010d7c <std>
 8010e60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010e64:	2202      	movs	r2, #2
 8010e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e6a:	2112      	movs	r1, #18
 8010e6c:	f7ff bf86 	b.w	8010d7c <std>
 8010e70:	200162bc 	.word	0x200162bc
 8010e74:	20016184 	.word	0x20016184
 8010e78:	08010de9 	.word	0x08010de9

08010e7c <__sfp_lock_acquire>:
 8010e7c:	4801      	ldr	r0, [pc, #4]	; (8010e84 <__sfp_lock_acquire+0x8>)
 8010e7e:	f000 ba80 	b.w	8011382 <__retarget_lock_acquire_recursive>
 8010e82:	bf00      	nop
 8010e84:	200162c5 	.word	0x200162c5

08010e88 <__sfp_lock_release>:
 8010e88:	4801      	ldr	r0, [pc, #4]	; (8010e90 <__sfp_lock_release+0x8>)
 8010e8a:	f000 ba7b 	b.w	8011384 <__retarget_lock_release_recursive>
 8010e8e:	bf00      	nop
 8010e90:	200162c5 	.word	0x200162c5

08010e94 <__sinit>:
 8010e94:	b510      	push	{r4, lr}
 8010e96:	4604      	mov	r4, r0
 8010e98:	f7ff fff0 	bl	8010e7c <__sfp_lock_acquire>
 8010e9c:	6a23      	ldr	r3, [r4, #32]
 8010e9e:	b11b      	cbz	r3, 8010ea8 <__sinit+0x14>
 8010ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ea4:	f7ff bff0 	b.w	8010e88 <__sfp_lock_release>
 8010ea8:	4b04      	ldr	r3, [pc, #16]	; (8010ebc <__sinit+0x28>)
 8010eaa:	6223      	str	r3, [r4, #32]
 8010eac:	4b04      	ldr	r3, [pc, #16]	; (8010ec0 <__sinit+0x2c>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1f5      	bne.n	8010ea0 <__sinit+0xc>
 8010eb4:	f7ff ffc4 	bl	8010e40 <global_stdio_init.part.0>
 8010eb8:	e7f2      	b.n	8010ea0 <__sinit+0xc>
 8010eba:	bf00      	nop
 8010ebc:	08010e01 	.word	0x08010e01
 8010ec0:	200162bc 	.word	0x200162bc

08010ec4 <_fwalk_sglue>:
 8010ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ec8:	4607      	mov	r7, r0
 8010eca:	4688      	mov	r8, r1
 8010ecc:	4614      	mov	r4, r2
 8010ece:	2600      	movs	r6, #0
 8010ed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ed4:	f1b9 0901 	subs.w	r9, r9, #1
 8010ed8:	d505      	bpl.n	8010ee6 <_fwalk_sglue+0x22>
 8010eda:	6824      	ldr	r4, [r4, #0]
 8010edc:	2c00      	cmp	r4, #0
 8010ede:	d1f7      	bne.n	8010ed0 <_fwalk_sglue+0xc>
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ee6:	89ab      	ldrh	r3, [r5, #12]
 8010ee8:	2b01      	cmp	r3, #1
 8010eea:	d907      	bls.n	8010efc <_fwalk_sglue+0x38>
 8010eec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	d003      	beq.n	8010efc <_fwalk_sglue+0x38>
 8010ef4:	4629      	mov	r1, r5
 8010ef6:	4638      	mov	r0, r7
 8010ef8:	47c0      	blx	r8
 8010efa:	4306      	orrs	r6, r0
 8010efc:	3568      	adds	r5, #104	; 0x68
 8010efe:	e7e9      	b.n	8010ed4 <_fwalk_sglue+0x10>

08010f00 <iprintf>:
 8010f00:	b40f      	push	{r0, r1, r2, r3}
 8010f02:	b507      	push	{r0, r1, r2, lr}
 8010f04:	4906      	ldr	r1, [pc, #24]	; (8010f20 <iprintf+0x20>)
 8010f06:	ab04      	add	r3, sp, #16
 8010f08:	6808      	ldr	r0, [r1, #0]
 8010f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f0e:	6881      	ldr	r1, [r0, #8]
 8010f10:	9301      	str	r3, [sp, #4]
 8010f12:	f001 fcb5 	bl	8012880 <_vfiprintf_r>
 8010f16:	b003      	add	sp, #12
 8010f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f1c:	b004      	add	sp, #16
 8010f1e:	4770      	bx	lr
 8010f20:	200009d0 	.word	0x200009d0

08010f24 <_puts_r>:
 8010f24:	6a03      	ldr	r3, [r0, #32]
 8010f26:	b570      	push	{r4, r5, r6, lr}
 8010f28:	6884      	ldr	r4, [r0, #8]
 8010f2a:	4605      	mov	r5, r0
 8010f2c:	460e      	mov	r6, r1
 8010f2e:	b90b      	cbnz	r3, 8010f34 <_puts_r+0x10>
 8010f30:	f7ff ffb0 	bl	8010e94 <__sinit>
 8010f34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f36:	07db      	lsls	r3, r3, #31
 8010f38:	d405      	bmi.n	8010f46 <_puts_r+0x22>
 8010f3a:	89a3      	ldrh	r3, [r4, #12]
 8010f3c:	0598      	lsls	r0, r3, #22
 8010f3e:	d402      	bmi.n	8010f46 <_puts_r+0x22>
 8010f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f42:	f000 fa1e 	bl	8011382 <__retarget_lock_acquire_recursive>
 8010f46:	89a3      	ldrh	r3, [r4, #12]
 8010f48:	0719      	lsls	r1, r3, #28
 8010f4a:	d513      	bpl.n	8010f74 <_puts_r+0x50>
 8010f4c:	6923      	ldr	r3, [r4, #16]
 8010f4e:	b18b      	cbz	r3, 8010f74 <_puts_r+0x50>
 8010f50:	3e01      	subs	r6, #1
 8010f52:	68a3      	ldr	r3, [r4, #8]
 8010f54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010f58:	3b01      	subs	r3, #1
 8010f5a:	60a3      	str	r3, [r4, #8]
 8010f5c:	b9e9      	cbnz	r1, 8010f9a <_puts_r+0x76>
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	da2e      	bge.n	8010fc0 <_puts_r+0x9c>
 8010f62:	4622      	mov	r2, r4
 8010f64:	210a      	movs	r1, #10
 8010f66:	4628      	mov	r0, r5
 8010f68:	f000 f87b 	bl	8011062 <__swbuf_r>
 8010f6c:	3001      	adds	r0, #1
 8010f6e:	d007      	beq.n	8010f80 <_puts_r+0x5c>
 8010f70:	250a      	movs	r5, #10
 8010f72:	e007      	b.n	8010f84 <_puts_r+0x60>
 8010f74:	4621      	mov	r1, r4
 8010f76:	4628      	mov	r0, r5
 8010f78:	f000 f8b0 	bl	80110dc <__swsetup_r>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	d0e7      	beq.n	8010f50 <_puts_r+0x2c>
 8010f80:	f04f 35ff 	mov.w	r5, #4294967295
 8010f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f86:	07da      	lsls	r2, r3, #31
 8010f88:	d405      	bmi.n	8010f96 <_puts_r+0x72>
 8010f8a:	89a3      	ldrh	r3, [r4, #12]
 8010f8c:	059b      	lsls	r3, r3, #22
 8010f8e:	d402      	bmi.n	8010f96 <_puts_r+0x72>
 8010f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f92:	f000 f9f7 	bl	8011384 <__retarget_lock_release_recursive>
 8010f96:	4628      	mov	r0, r5
 8010f98:	bd70      	pop	{r4, r5, r6, pc}
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	da04      	bge.n	8010fa8 <_puts_r+0x84>
 8010f9e:	69a2      	ldr	r2, [r4, #24]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	dc06      	bgt.n	8010fb2 <_puts_r+0x8e>
 8010fa4:	290a      	cmp	r1, #10
 8010fa6:	d004      	beq.n	8010fb2 <_puts_r+0x8e>
 8010fa8:	6823      	ldr	r3, [r4, #0]
 8010faa:	1c5a      	adds	r2, r3, #1
 8010fac:	6022      	str	r2, [r4, #0]
 8010fae:	7019      	strb	r1, [r3, #0]
 8010fb0:	e7cf      	b.n	8010f52 <_puts_r+0x2e>
 8010fb2:	4622      	mov	r2, r4
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	f000 f854 	bl	8011062 <__swbuf_r>
 8010fba:	3001      	adds	r0, #1
 8010fbc:	d1c9      	bne.n	8010f52 <_puts_r+0x2e>
 8010fbe:	e7df      	b.n	8010f80 <_puts_r+0x5c>
 8010fc0:	6823      	ldr	r3, [r4, #0]
 8010fc2:	250a      	movs	r5, #10
 8010fc4:	1c5a      	adds	r2, r3, #1
 8010fc6:	6022      	str	r2, [r4, #0]
 8010fc8:	701d      	strb	r5, [r3, #0]
 8010fca:	e7db      	b.n	8010f84 <_puts_r+0x60>

08010fcc <puts>:
 8010fcc:	4b02      	ldr	r3, [pc, #8]	; (8010fd8 <puts+0xc>)
 8010fce:	4601      	mov	r1, r0
 8010fd0:	6818      	ldr	r0, [r3, #0]
 8010fd2:	f7ff bfa7 	b.w	8010f24 <_puts_r>
 8010fd6:	bf00      	nop
 8010fd8:	200009d0 	.word	0x200009d0

08010fdc <__sread>:
 8010fdc:	b510      	push	{r4, lr}
 8010fde:	460c      	mov	r4, r1
 8010fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe4:	f000 f95a 	bl	801129c <_read_r>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	bfab      	itete	ge
 8010fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010fee:	89a3      	ldrhlt	r3, [r4, #12]
 8010ff0:	181b      	addge	r3, r3, r0
 8010ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ff6:	bfac      	ite	ge
 8010ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ffa:	81a3      	strhlt	r3, [r4, #12]
 8010ffc:	bd10      	pop	{r4, pc}

08010ffe <__swrite>:
 8010ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011002:	461f      	mov	r7, r3
 8011004:	898b      	ldrh	r3, [r1, #12]
 8011006:	05db      	lsls	r3, r3, #23
 8011008:	4605      	mov	r5, r0
 801100a:	460c      	mov	r4, r1
 801100c:	4616      	mov	r6, r2
 801100e:	d505      	bpl.n	801101c <__swrite+0x1e>
 8011010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011014:	2302      	movs	r3, #2
 8011016:	2200      	movs	r2, #0
 8011018:	f000 f92e 	bl	8011278 <_lseek_r>
 801101c:	89a3      	ldrh	r3, [r4, #12]
 801101e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011026:	81a3      	strh	r3, [r4, #12]
 8011028:	4632      	mov	r2, r6
 801102a:	463b      	mov	r3, r7
 801102c:	4628      	mov	r0, r5
 801102e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011032:	f000 b969 	b.w	8011308 <_write_r>

08011036 <__sseek>:
 8011036:	b510      	push	{r4, lr}
 8011038:	460c      	mov	r4, r1
 801103a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801103e:	f000 f91b 	bl	8011278 <_lseek_r>
 8011042:	1c43      	adds	r3, r0, #1
 8011044:	89a3      	ldrh	r3, [r4, #12]
 8011046:	bf15      	itete	ne
 8011048:	6560      	strne	r0, [r4, #84]	; 0x54
 801104a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801104e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011052:	81a3      	strheq	r3, [r4, #12]
 8011054:	bf18      	it	ne
 8011056:	81a3      	strhne	r3, [r4, #12]
 8011058:	bd10      	pop	{r4, pc}

0801105a <__sclose>:
 801105a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801105e:	f000 b8fb 	b.w	8011258 <_close_r>

08011062 <__swbuf_r>:
 8011062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011064:	460e      	mov	r6, r1
 8011066:	4614      	mov	r4, r2
 8011068:	4605      	mov	r5, r0
 801106a:	b118      	cbz	r0, 8011074 <__swbuf_r+0x12>
 801106c:	6a03      	ldr	r3, [r0, #32]
 801106e:	b90b      	cbnz	r3, 8011074 <__swbuf_r+0x12>
 8011070:	f7ff ff10 	bl	8010e94 <__sinit>
 8011074:	69a3      	ldr	r3, [r4, #24]
 8011076:	60a3      	str	r3, [r4, #8]
 8011078:	89a3      	ldrh	r3, [r4, #12]
 801107a:	071a      	lsls	r2, r3, #28
 801107c:	d525      	bpl.n	80110ca <__swbuf_r+0x68>
 801107e:	6923      	ldr	r3, [r4, #16]
 8011080:	b31b      	cbz	r3, 80110ca <__swbuf_r+0x68>
 8011082:	6823      	ldr	r3, [r4, #0]
 8011084:	6922      	ldr	r2, [r4, #16]
 8011086:	1a98      	subs	r0, r3, r2
 8011088:	6963      	ldr	r3, [r4, #20]
 801108a:	b2f6      	uxtb	r6, r6
 801108c:	4283      	cmp	r3, r0
 801108e:	4637      	mov	r7, r6
 8011090:	dc04      	bgt.n	801109c <__swbuf_r+0x3a>
 8011092:	4621      	mov	r1, r4
 8011094:	4628      	mov	r0, r5
 8011096:	f001 fd93 	bl	8012bc0 <_fflush_r>
 801109a:	b9e0      	cbnz	r0, 80110d6 <__swbuf_r+0x74>
 801109c:	68a3      	ldr	r3, [r4, #8]
 801109e:	3b01      	subs	r3, #1
 80110a0:	60a3      	str	r3, [r4, #8]
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	1c5a      	adds	r2, r3, #1
 80110a6:	6022      	str	r2, [r4, #0]
 80110a8:	701e      	strb	r6, [r3, #0]
 80110aa:	6962      	ldr	r2, [r4, #20]
 80110ac:	1c43      	adds	r3, r0, #1
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d004      	beq.n	80110bc <__swbuf_r+0x5a>
 80110b2:	89a3      	ldrh	r3, [r4, #12]
 80110b4:	07db      	lsls	r3, r3, #31
 80110b6:	d506      	bpl.n	80110c6 <__swbuf_r+0x64>
 80110b8:	2e0a      	cmp	r6, #10
 80110ba:	d104      	bne.n	80110c6 <__swbuf_r+0x64>
 80110bc:	4621      	mov	r1, r4
 80110be:	4628      	mov	r0, r5
 80110c0:	f001 fd7e 	bl	8012bc0 <_fflush_r>
 80110c4:	b938      	cbnz	r0, 80110d6 <__swbuf_r+0x74>
 80110c6:	4638      	mov	r0, r7
 80110c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110ca:	4621      	mov	r1, r4
 80110cc:	4628      	mov	r0, r5
 80110ce:	f000 f805 	bl	80110dc <__swsetup_r>
 80110d2:	2800      	cmp	r0, #0
 80110d4:	d0d5      	beq.n	8011082 <__swbuf_r+0x20>
 80110d6:	f04f 37ff 	mov.w	r7, #4294967295
 80110da:	e7f4      	b.n	80110c6 <__swbuf_r+0x64>

080110dc <__swsetup_r>:
 80110dc:	b538      	push	{r3, r4, r5, lr}
 80110de:	4b2a      	ldr	r3, [pc, #168]	; (8011188 <__swsetup_r+0xac>)
 80110e0:	4605      	mov	r5, r0
 80110e2:	6818      	ldr	r0, [r3, #0]
 80110e4:	460c      	mov	r4, r1
 80110e6:	b118      	cbz	r0, 80110f0 <__swsetup_r+0x14>
 80110e8:	6a03      	ldr	r3, [r0, #32]
 80110ea:	b90b      	cbnz	r3, 80110f0 <__swsetup_r+0x14>
 80110ec:	f7ff fed2 	bl	8010e94 <__sinit>
 80110f0:	89a3      	ldrh	r3, [r4, #12]
 80110f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110f6:	0718      	lsls	r0, r3, #28
 80110f8:	d422      	bmi.n	8011140 <__swsetup_r+0x64>
 80110fa:	06d9      	lsls	r1, r3, #27
 80110fc:	d407      	bmi.n	801110e <__swsetup_r+0x32>
 80110fe:	2309      	movs	r3, #9
 8011100:	602b      	str	r3, [r5, #0]
 8011102:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011106:	81a3      	strh	r3, [r4, #12]
 8011108:	f04f 30ff 	mov.w	r0, #4294967295
 801110c:	e034      	b.n	8011178 <__swsetup_r+0x9c>
 801110e:	0758      	lsls	r0, r3, #29
 8011110:	d512      	bpl.n	8011138 <__swsetup_r+0x5c>
 8011112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011114:	b141      	cbz	r1, 8011128 <__swsetup_r+0x4c>
 8011116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801111a:	4299      	cmp	r1, r3
 801111c:	d002      	beq.n	8011124 <__swsetup_r+0x48>
 801111e:	4628      	mov	r0, r5
 8011120:	f000 ffbc 	bl	801209c <_free_r>
 8011124:	2300      	movs	r3, #0
 8011126:	6363      	str	r3, [r4, #52]	; 0x34
 8011128:	89a3      	ldrh	r3, [r4, #12]
 801112a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801112e:	81a3      	strh	r3, [r4, #12]
 8011130:	2300      	movs	r3, #0
 8011132:	6063      	str	r3, [r4, #4]
 8011134:	6923      	ldr	r3, [r4, #16]
 8011136:	6023      	str	r3, [r4, #0]
 8011138:	89a3      	ldrh	r3, [r4, #12]
 801113a:	f043 0308 	orr.w	r3, r3, #8
 801113e:	81a3      	strh	r3, [r4, #12]
 8011140:	6923      	ldr	r3, [r4, #16]
 8011142:	b94b      	cbnz	r3, 8011158 <__swsetup_r+0x7c>
 8011144:	89a3      	ldrh	r3, [r4, #12]
 8011146:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801114a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801114e:	d003      	beq.n	8011158 <__swsetup_r+0x7c>
 8011150:	4621      	mov	r1, r4
 8011152:	4628      	mov	r0, r5
 8011154:	f001 fd82 	bl	8012c5c <__smakebuf_r>
 8011158:	89a0      	ldrh	r0, [r4, #12]
 801115a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801115e:	f010 0301 	ands.w	r3, r0, #1
 8011162:	d00a      	beq.n	801117a <__swsetup_r+0x9e>
 8011164:	2300      	movs	r3, #0
 8011166:	60a3      	str	r3, [r4, #8]
 8011168:	6963      	ldr	r3, [r4, #20]
 801116a:	425b      	negs	r3, r3
 801116c:	61a3      	str	r3, [r4, #24]
 801116e:	6923      	ldr	r3, [r4, #16]
 8011170:	b943      	cbnz	r3, 8011184 <__swsetup_r+0xa8>
 8011172:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011176:	d1c4      	bne.n	8011102 <__swsetup_r+0x26>
 8011178:	bd38      	pop	{r3, r4, r5, pc}
 801117a:	0781      	lsls	r1, r0, #30
 801117c:	bf58      	it	pl
 801117e:	6963      	ldrpl	r3, [r4, #20]
 8011180:	60a3      	str	r3, [r4, #8]
 8011182:	e7f4      	b.n	801116e <__swsetup_r+0x92>
 8011184:	2000      	movs	r0, #0
 8011186:	e7f7      	b.n	8011178 <__swsetup_r+0x9c>
 8011188:	200009d0 	.word	0x200009d0

0801118c <memcmp>:
 801118c:	b510      	push	{r4, lr}
 801118e:	3901      	subs	r1, #1
 8011190:	4402      	add	r2, r0
 8011192:	4290      	cmp	r0, r2
 8011194:	d101      	bne.n	801119a <memcmp+0xe>
 8011196:	2000      	movs	r0, #0
 8011198:	e005      	b.n	80111a6 <memcmp+0x1a>
 801119a:	7803      	ldrb	r3, [r0, #0]
 801119c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80111a0:	42a3      	cmp	r3, r4
 80111a2:	d001      	beq.n	80111a8 <memcmp+0x1c>
 80111a4:	1b18      	subs	r0, r3, r4
 80111a6:	bd10      	pop	{r4, pc}
 80111a8:	3001      	adds	r0, #1
 80111aa:	e7f2      	b.n	8011192 <memcmp+0x6>

080111ac <memmove>:
 80111ac:	4288      	cmp	r0, r1
 80111ae:	b510      	push	{r4, lr}
 80111b0:	eb01 0402 	add.w	r4, r1, r2
 80111b4:	d902      	bls.n	80111bc <memmove+0x10>
 80111b6:	4284      	cmp	r4, r0
 80111b8:	4623      	mov	r3, r4
 80111ba:	d807      	bhi.n	80111cc <memmove+0x20>
 80111bc:	1e43      	subs	r3, r0, #1
 80111be:	42a1      	cmp	r1, r4
 80111c0:	d008      	beq.n	80111d4 <memmove+0x28>
 80111c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111ca:	e7f8      	b.n	80111be <memmove+0x12>
 80111cc:	4402      	add	r2, r0
 80111ce:	4601      	mov	r1, r0
 80111d0:	428a      	cmp	r2, r1
 80111d2:	d100      	bne.n	80111d6 <memmove+0x2a>
 80111d4:	bd10      	pop	{r4, pc}
 80111d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80111de:	e7f7      	b.n	80111d0 <memmove+0x24>

080111e0 <memset>:
 80111e0:	4402      	add	r2, r0
 80111e2:	4603      	mov	r3, r0
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d100      	bne.n	80111ea <memset+0xa>
 80111e8:	4770      	bx	lr
 80111ea:	f803 1b01 	strb.w	r1, [r3], #1
 80111ee:	e7f9      	b.n	80111e4 <memset+0x4>

080111f0 <_raise_r>:
 80111f0:	291f      	cmp	r1, #31
 80111f2:	b538      	push	{r3, r4, r5, lr}
 80111f4:	4604      	mov	r4, r0
 80111f6:	460d      	mov	r5, r1
 80111f8:	d904      	bls.n	8011204 <_raise_r+0x14>
 80111fa:	2316      	movs	r3, #22
 80111fc:	6003      	str	r3, [r0, #0]
 80111fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011202:	bd38      	pop	{r3, r4, r5, pc}
 8011204:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011206:	b112      	cbz	r2, 801120e <_raise_r+0x1e>
 8011208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801120c:	b94b      	cbnz	r3, 8011222 <_raise_r+0x32>
 801120e:	4620      	mov	r0, r4
 8011210:	f000 f868 	bl	80112e4 <_getpid_r>
 8011214:	462a      	mov	r2, r5
 8011216:	4601      	mov	r1, r0
 8011218:	4620      	mov	r0, r4
 801121a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801121e:	f000 b84f 	b.w	80112c0 <_kill_r>
 8011222:	2b01      	cmp	r3, #1
 8011224:	d00a      	beq.n	801123c <_raise_r+0x4c>
 8011226:	1c59      	adds	r1, r3, #1
 8011228:	d103      	bne.n	8011232 <_raise_r+0x42>
 801122a:	2316      	movs	r3, #22
 801122c:	6003      	str	r3, [r0, #0]
 801122e:	2001      	movs	r0, #1
 8011230:	e7e7      	b.n	8011202 <_raise_r+0x12>
 8011232:	2400      	movs	r4, #0
 8011234:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011238:	4628      	mov	r0, r5
 801123a:	4798      	blx	r3
 801123c:	2000      	movs	r0, #0
 801123e:	e7e0      	b.n	8011202 <_raise_r+0x12>

08011240 <raise>:
 8011240:	4b02      	ldr	r3, [pc, #8]	; (801124c <raise+0xc>)
 8011242:	4601      	mov	r1, r0
 8011244:	6818      	ldr	r0, [r3, #0]
 8011246:	f7ff bfd3 	b.w	80111f0 <_raise_r>
 801124a:	bf00      	nop
 801124c:	200009d0 	.word	0x200009d0

08011250 <_localeconv_r>:
 8011250:	4800      	ldr	r0, [pc, #0]	; (8011254 <_localeconv_r+0x4>)
 8011252:	4770      	bx	lr
 8011254:	20000ac4 	.word	0x20000ac4

08011258 <_close_r>:
 8011258:	b538      	push	{r3, r4, r5, lr}
 801125a:	4d06      	ldr	r5, [pc, #24]	; (8011274 <_close_r+0x1c>)
 801125c:	2300      	movs	r3, #0
 801125e:	4604      	mov	r4, r0
 8011260:	4608      	mov	r0, r1
 8011262:	602b      	str	r3, [r5, #0]
 8011264:	f7f0 fcca 	bl	8001bfc <_close>
 8011268:	1c43      	adds	r3, r0, #1
 801126a:	d102      	bne.n	8011272 <_close_r+0x1a>
 801126c:	682b      	ldr	r3, [r5, #0]
 801126e:	b103      	cbz	r3, 8011272 <_close_r+0x1a>
 8011270:	6023      	str	r3, [r4, #0]
 8011272:	bd38      	pop	{r3, r4, r5, pc}
 8011274:	200162c0 	.word	0x200162c0

08011278 <_lseek_r>:
 8011278:	b538      	push	{r3, r4, r5, lr}
 801127a:	4d07      	ldr	r5, [pc, #28]	; (8011298 <_lseek_r+0x20>)
 801127c:	4604      	mov	r4, r0
 801127e:	4608      	mov	r0, r1
 8011280:	4611      	mov	r1, r2
 8011282:	2200      	movs	r2, #0
 8011284:	602a      	str	r2, [r5, #0]
 8011286:	461a      	mov	r2, r3
 8011288:	f7f0 fce0 	bl	8001c4c <_lseek>
 801128c:	1c43      	adds	r3, r0, #1
 801128e:	d102      	bne.n	8011296 <_lseek_r+0x1e>
 8011290:	682b      	ldr	r3, [r5, #0]
 8011292:	b103      	cbz	r3, 8011296 <_lseek_r+0x1e>
 8011294:	6023      	str	r3, [r4, #0]
 8011296:	bd38      	pop	{r3, r4, r5, pc}
 8011298:	200162c0 	.word	0x200162c0

0801129c <_read_r>:
 801129c:	b538      	push	{r3, r4, r5, lr}
 801129e:	4d07      	ldr	r5, [pc, #28]	; (80112bc <_read_r+0x20>)
 80112a0:	4604      	mov	r4, r0
 80112a2:	4608      	mov	r0, r1
 80112a4:	4611      	mov	r1, r2
 80112a6:	2200      	movs	r2, #0
 80112a8:	602a      	str	r2, [r5, #0]
 80112aa:	461a      	mov	r2, r3
 80112ac:	f7f0 fcd6 	bl	8001c5c <_read>
 80112b0:	1c43      	adds	r3, r0, #1
 80112b2:	d102      	bne.n	80112ba <_read_r+0x1e>
 80112b4:	682b      	ldr	r3, [r5, #0]
 80112b6:	b103      	cbz	r3, 80112ba <_read_r+0x1e>
 80112b8:	6023      	str	r3, [r4, #0]
 80112ba:	bd38      	pop	{r3, r4, r5, pc}
 80112bc:	200162c0 	.word	0x200162c0

080112c0 <_kill_r>:
 80112c0:	b538      	push	{r3, r4, r5, lr}
 80112c2:	4d07      	ldr	r5, [pc, #28]	; (80112e0 <_kill_r+0x20>)
 80112c4:	2300      	movs	r3, #0
 80112c6:	4604      	mov	r4, r0
 80112c8:	4608      	mov	r0, r1
 80112ca:	4611      	mov	r1, r2
 80112cc:	602b      	str	r3, [r5, #0]
 80112ce:	f7f0 fcb5 	bl	8001c3c <_kill>
 80112d2:	1c43      	adds	r3, r0, #1
 80112d4:	d102      	bne.n	80112dc <_kill_r+0x1c>
 80112d6:	682b      	ldr	r3, [r5, #0]
 80112d8:	b103      	cbz	r3, 80112dc <_kill_r+0x1c>
 80112da:	6023      	str	r3, [r4, #0]
 80112dc:	bd38      	pop	{r3, r4, r5, pc}
 80112de:	bf00      	nop
 80112e0:	200162c0 	.word	0x200162c0

080112e4 <_getpid_r>:
 80112e4:	f7f0 bc9a 	b.w	8001c1c <_getpid>

080112e8 <_sbrk_r>:
 80112e8:	b538      	push	{r3, r4, r5, lr}
 80112ea:	4d06      	ldr	r5, [pc, #24]	; (8011304 <_sbrk_r+0x1c>)
 80112ec:	2300      	movs	r3, #0
 80112ee:	4604      	mov	r4, r0
 80112f0:	4608      	mov	r0, r1
 80112f2:	602b      	str	r3, [r5, #0]
 80112f4:	f7f3 fb1c 	bl	8004930 <_sbrk>
 80112f8:	1c43      	adds	r3, r0, #1
 80112fa:	d102      	bne.n	8011302 <_sbrk_r+0x1a>
 80112fc:	682b      	ldr	r3, [r5, #0]
 80112fe:	b103      	cbz	r3, 8011302 <_sbrk_r+0x1a>
 8011300:	6023      	str	r3, [r4, #0]
 8011302:	bd38      	pop	{r3, r4, r5, pc}
 8011304:	200162c0 	.word	0x200162c0

08011308 <_write_r>:
 8011308:	b538      	push	{r3, r4, r5, lr}
 801130a:	4d07      	ldr	r5, [pc, #28]	; (8011328 <_write_r+0x20>)
 801130c:	4604      	mov	r4, r0
 801130e:	4608      	mov	r0, r1
 8011310:	4611      	mov	r1, r2
 8011312:	2200      	movs	r2, #0
 8011314:	602a      	str	r2, [r5, #0]
 8011316:	461a      	mov	r2, r3
 8011318:	f7f0 fcbe 	bl	8001c98 <_write>
 801131c:	1c43      	adds	r3, r0, #1
 801131e:	d102      	bne.n	8011326 <_write_r+0x1e>
 8011320:	682b      	ldr	r3, [r5, #0]
 8011322:	b103      	cbz	r3, 8011326 <_write_r+0x1e>
 8011324:	6023      	str	r3, [r4, #0]
 8011326:	bd38      	pop	{r3, r4, r5, pc}
 8011328:	200162c0 	.word	0x200162c0

0801132c <__errno>:
 801132c:	4b01      	ldr	r3, [pc, #4]	; (8011334 <__errno+0x8>)
 801132e:	6818      	ldr	r0, [r3, #0]
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	200009d0 	.word	0x200009d0

08011338 <__libc_init_array>:
 8011338:	b570      	push	{r4, r5, r6, lr}
 801133a:	4d0d      	ldr	r5, [pc, #52]	; (8011370 <__libc_init_array+0x38>)
 801133c:	4c0d      	ldr	r4, [pc, #52]	; (8011374 <__libc_init_array+0x3c>)
 801133e:	1b64      	subs	r4, r4, r5
 8011340:	10a4      	asrs	r4, r4, #2
 8011342:	2600      	movs	r6, #0
 8011344:	42a6      	cmp	r6, r4
 8011346:	d109      	bne.n	801135c <__libc_init_array+0x24>
 8011348:	4d0b      	ldr	r5, [pc, #44]	; (8011378 <__libc_init_array+0x40>)
 801134a:	4c0c      	ldr	r4, [pc, #48]	; (801137c <__libc_init_array+0x44>)
 801134c:	f001 fd4c 	bl	8012de8 <_init>
 8011350:	1b64      	subs	r4, r4, r5
 8011352:	10a4      	asrs	r4, r4, #2
 8011354:	2600      	movs	r6, #0
 8011356:	42a6      	cmp	r6, r4
 8011358:	d105      	bne.n	8011366 <__libc_init_array+0x2e>
 801135a:	bd70      	pop	{r4, r5, r6, pc}
 801135c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011360:	4798      	blx	r3
 8011362:	3601      	adds	r6, #1
 8011364:	e7ee      	b.n	8011344 <__libc_init_array+0xc>
 8011366:	f855 3b04 	ldr.w	r3, [r5], #4
 801136a:	4798      	blx	r3
 801136c:	3601      	adds	r6, #1
 801136e:	e7f2      	b.n	8011356 <__libc_init_array+0x1e>
 8011370:	0802cb14 	.word	0x0802cb14
 8011374:	0802cb14 	.word	0x0802cb14
 8011378:	0802cb14 	.word	0x0802cb14
 801137c:	0802cb1c 	.word	0x0802cb1c

08011380 <__retarget_lock_init_recursive>:
 8011380:	4770      	bx	lr

08011382 <__retarget_lock_acquire_recursive>:
 8011382:	4770      	bx	lr

08011384 <__retarget_lock_release_recursive>:
 8011384:	4770      	bx	lr

08011386 <memcpy>:
 8011386:	440a      	add	r2, r1
 8011388:	4291      	cmp	r1, r2
 801138a:	f100 33ff 	add.w	r3, r0, #4294967295
 801138e:	d100      	bne.n	8011392 <memcpy+0xc>
 8011390:	4770      	bx	lr
 8011392:	b510      	push	{r4, lr}
 8011394:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011398:	f803 4f01 	strb.w	r4, [r3, #1]!
 801139c:	4291      	cmp	r1, r2
 801139e:	d1f9      	bne.n	8011394 <memcpy+0xe>
 80113a0:	bd10      	pop	{r4, pc}

080113a2 <quorem>:
 80113a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a6:	6903      	ldr	r3, [r0, #16]
 80113a8:	690c      	ldr	r4, [r1, #16]
 80113aa:	42a3      	cmp	r3, r4
 80113ac:	4607      	mov	r7, r0
 80113ae:	db7e      	blt.n	80114ae <quorem+0x10c>
 80113b0:	3c01      	subs	r4, #1
 80113b2:	f101 0814 	add.w	r8, r1, #20
 80113b6:	f100 0514 	add.w	r5, r0, #20
 80113ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113be:	9301      	str	r3, [sp, #4]
 80113c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80113c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113c8:	3301      	adds	r3, #1
 80113ca:	429a      	cmp	r2, r3
 80113cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80113d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80113d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80113d8:	d331      	bcc.n	801143e <quorem+0x9c>
 80113da:	f04f 0e00 	mov.w	lr, #0
 80113de:	4640      	mov	r0, r8
 80113e0:	46ac      	mov	ip, r5
 80113e2:	46f2      	mov	sl, lr
 80113e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80113e8:	b293      	uxth	r3, r2
 80113ea:	fb06 e303 	mla	r3, r6, r3, lr
 80113ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80113f2:	0c1a      	lsrs	r2, r3, #16
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	ebaa 0303 	sub.w	r3, sl, r3
 80113fa:	f8dc a000 	ldr.w	sl, [ip]
 80113fe:	fa13 f38a 	uxtah	r3, r3, sl
 8011402:	fb06 220e 	mla	r2, r6, lr, r2
 8011406:	9300      	str	r3, [sp, #0]
 8011408:	9b00      	ldr	r3, [sp, #0]
 801140a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801140e:	b292      	uxth	r2, r2
 8011410:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011418:	f8bd 3000 	ldrh.w	r3, [sp]
 801141c:	4581      	cmp	r9, r0
 801141e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011422:	f84c 3b04 	str.w	r3, [ip], #4
 8011426:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801142a:	d2db      	bcs.n	80113e4 <quorem+0x42>
 801142c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011430:	b92b      	cbnz	r3, 801143e <quorem+0x9c>
 8011432:	9b01      	ldr	r3, [sp, #4]
 8011434:	3b04      	subs	r3, #4
 8011436:	429d      	cmp	r5, r3
 8011438:	461a      	mov	r2, r3
 801143a:	d32c      	bcc.n	8011496 <quorem+0xf4>
 801143c:	613c      	str	r4, [r7, #16]
 801143e:	4638      	mov	r0, r7
 8011440:	f001 f8f4 	bl	801262c <__mcmp>
 8011444:	2800      	cmp	r0, #0
 8011446:	db22      	blt.n	801148e <quorem+0xec>
 8011448:	3601      	adds	r6, #1
 801144a:	4629      	mov	r1, r5
 801144c:	2000      	movs	r0, #0
 801144e:	f858 2b04 	ldr.w	r2, [r8], #4
 8011452:	f8d1 c000 	ldr.w	ip, [r1]
 8011456:	b293      	uxth	r3, r2
 8011458:	1ac3      	subs	r3, r0, r3
 801145a:	0c12      	lsrs	r2, r2, #16
 801145c:	fa13 f38c 	uxtah	r3, r3, ip
 8011460:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011468:	b29b      	uxth	r3, r3
 801146a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801146e:	45c1      	cmp	r9, r8
 8011470:	f841 3b04 	str.w	r3, [r1], #4
 8011474:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011478:	d2e9      	bcs.n	801144e <quorem+0xac>
 801147a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801147e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011482:	b922      	cbnz	r2, 801148e <quorem+0xec>
 8011484:	3b04      	subs	r3, #4
 8011486:	429d      	cmp	r5, r3
 8011488:	461a      	mov	r2, r3
 801148a:	d30a      	bcc.n	80114a2 <quorem+0x100>
 801148c:	613c      	str	r4, [r7, #16]
 801148e:	4630      	mov	r0, r6
 8011490:	b003      	add	sp, #12
 8011492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011496:	6812      	ldr	r2, [r2, #0]
 8011498:	3b04      	subs	r3, #4
 801149a:	2a00      	cmp	r2, #0
 801149c:	d1ce      	bne.n	801143c <quorem+0x9a>
 801149e:	3c01      	subs	r4, #1
 80114a0:	e7c9      	b.n	8011436 <quorem+0x94>
 80114a2:	6812      	ldr	r2, [r2, #0]
 80114a4:	3b04      	subs	r3, #4
 80114a6:	2a00      	cmp	r2, #0
 80114a8:	d1f0      	bne.n	801148c <quorem+0xea>
 80114aa:	3c01      	subs	r4, #1
 80114ac:	e7eb      	b.n	8011486 <quorem+0xe4>
 80114ae:	2000      	movs	r0, #0
 80114b0:	e7ee      	b.n	8011490 <quorem+0xee>
 80114b2:	0000      	movs	r0, r0
 80114b4:	0000      	movs	r0, r0
	...

080114b8 <_dtoa_r>:
 80114b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	ed2d 8b04 	vpush	{d8-d9}
 80114c0:	69c5      	ldr	r5, [r0, #28]
 80114c2:	b093      	sub	sp, #76	; 0x4c
 80114c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80114c8:	ec57 6b10 	vmov	r6, r7, d0
 80114cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80114d0:	9107      	str	r1, [sp, #28]
 80114d2:	4604      	mov	r4, r0
 80114d4:	920a      	str	r2, [sp, #40]	; 0x28
 80114d6:	930d      	str	r3, [sp, #52]	; 0x34
 80114d8:	b975      	cbnz	r5, 80114f8 <_dtoa_r+0x40>
 80114da:	2010      	movs	r0, #16
 80114dc:	f7fe ff2c 	bl	8010338 <malloc>
 80114e0:	4602      	mov	r2, r0
 80114e2:	61e0      	str	r0, [r4, #28]
 80114e4:	b920      	cbnz	r0, 80114f0 <_dtoa_r+0x38>
 80114e6:	4bae      	ldr	r3, [pc, #696]	; (80117a0 <_dtoa_r+0x2e8>)
 80114e8:	21ef      	movs	r1, #239	; 0xef
 80114ea:	48ae      	ldr	r0, [pc, #696]	; (80117a4 <_dtoa_r+0x2ec>)
 80114ec:	f001 fc14 	bl	8012d18 <__assert_func>
 80114f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80114f4:	6005      	str	r5, [r0, #0]
 80114f6:	60c5      	str	r5, [r0, #12]
 80114f8:	69e3      	ldr	r3, [r4, #28]
 80114fa:	6819      	ldr	r1, [r3, #0]
 80114fc:	b151      	cbz	r1, 8011514 <_dtoa_r+0x5c>
 80114fe:	685a      	ldr	r2, [r3, #4]
 8011500:	604a      	str	r2, [r1, #4]
 8011502:	2301      	movs	r3, #1
 8011504:	4093      	lsls	r3, r2
 8011506:	608b      	str	r3, [r1, #8]
 8011508:	4620      	mov	r0, r4
 801150a:	f000 fe53 	bl	80121b4 <_Bfree>
 801150e:	69e3      	ldr	r3, [r4, #28]
 8011510:	2200      	movs	r2, #0
 8011512:	601a      	str	r2, [r3, #0]
 8011514:	1e3b      	subs	r3, r7, #0
 8011516:	bfbb      	ittet	lt
 8011518:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801151c:	9303      	strlt	r3, [sp, #12]
 801151e:	2300      	movge	r3, #0
 8011520:	2201      	movlt	r2, #1
 8011522:	bfac      	ite	ge
 8011524:	f8c8 3000 	strge.w	r3, [r8]
 8011528:	f8c8 2000 	strlt.w	r2, [r8]
 801152c:	4b9e      	ldr	r3, [pc, #632]	; (80117a8 <_dtoa_r+0x2f0>)
 801152e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011532:	ea33 0308 	bics.w	r3, r3, r8
 8011536:	d11b      	bne.n	8011570 <_dtoa_r+0xb8>
 8011538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801153a:	f242 730f 	movw	r3, #9999	; 0x270f
 801153e:	6013      	str	r3, [r2, #0]
 8011540:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011544:	4333      	orrs	r3, r6
 8011546:	f000 8593 	beq.w	8012070 <_dtoa_r+0xbb8>
 801154a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801154c:	b963      	cbnz	r3, 8011568 <_dtoa_r+0xb0>
 801154e:	4b97      	ldr	r3, [pc, #604]	; (80117ac <_dtoa_r+0x2f4>)
 8011550:	e027      	b.n	80115a2 <_dtoa_r+0xea>
 8011552:	4b97      	ldr	r3, [pc, #604]	; (80117b0 <_dtoa_r+0x2f8>)
 8011554:	9300      	str	r3, [sp, #0]
 8011556:	3308      	adds	r3, #8
 8011558:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801155a:	6013      	str	r3, [r2, #0]
 801155c:	9800      	ldr	r0, [sp, #0]
 801155e:	b013      	add	sp, #76	; 0x4c
 8011560:	ecbd 8b04 	vpop	{d8-d9}
 8011564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011568:	4b90      	ldr	r3, [pc, #576]	; (80117ac <_dtoa_r+0x2f4>)
 801156a:	9300      	str	r3, [sp, #0]
 801156c:	3303      	adds	r3, #3
 801156e:	e7f3      	b.n	8011558 <_dtoa_r+0xa0>
 8011570:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011574:	2200      	movs	r2, #0
 8011576:	ec51 0b17 	vmov	r0, r1, d7
 801157a:	eeb0 8a47 	vmov.f32	s16, s14
 801157e:	eef0 8a67 	vmov.f32	s17, s15
 8011582:	2300      	movs	r3, #0
 8011584:	f7ef fb20 	bl	8000bc8 <__aeabi_dcmpeq>
 8011588:	4681      	mov	r9, r0
 801158a:	b160      	cbz	r0, 80115a6 <_dtoa_r+0xee>
 801158c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801158e:	2301      	movs	r3, #1
 8011590:	6013      	str	r3, [r2, #0]
 8011592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011594:	2b00      	cmp	r3, #0
 8011596:	f000 8568 	beq.w	801206a <_dtoa_r+0xbb2>
 801159a:	4b86      	ldr	r3, [pc, #536]	; (80117b4 <_dtoa_r+0x2fc>)
 801159c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801159e:	6013      	str	r3, [r2, #0]
 80115a0:	3b01      	subs	r3, #1
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	e7da      	b.n	801155c <_dtoa_r+0xa4>
 80115a6:	aa10      	add	r2, sp, #64	; 0x40
 80115a8:	a911      	add	r1, sp, #68	; 0x44
 80115aa:	4620      	mov	r0, r4
 80115ac:	eeb0 0a48 	vmov.f32	s0, s16
 80115b0:	eef0 0a68 	vmov.f32	s1, s17
 80115b4:	f001 f8e0 	bl	8012778 <__d2b>
 80115b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80115bc:	4682      	mov	sl, r0
 80115be:	2d00      	cmp	r5, #0
 80115c0:	d07f      	beq.n	80116c2 <_dtoa_r+0x20a>
 80115c2:	ee18 3a90 	vmov	r3, s17
 80115c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80115ce:	ec51 0b18 	vmov	r0, r1, d8
 80115d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80115d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80115da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80115de:	4619      	mov	r1, r3
 80115e0:	2200      	movs	r2, #0
 80115e2:	4b75      	ldr	r3, [pc, #468]	; (80117b8 <_dtoa_r+0x300>)
 80115e4:	f7ee fed0 	bl	8000388 <__aeabi_dsub>
 80115e8:	a367      	add	r3, pc, #412	; (adr r3, 8011788 <_dtoa_r+0x2d0>)
 80115ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ee:	f7ef f883 	bl	80006f8 <__aeabi_dmul>
 80115f2:	a367      	add	r3, pc, #412	; (adr r3, 8011790 <_dtoa_r+0x2d8>)
 80115f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f8:	f7ee fec8 	bl	800038c <__adddf3>
 80115fc:	4606      	mov	r6, r0
 80115fe:	4628      	mov	r0, r5
 8011600:	460f      	mov	r7, r1
 8011602:	f7ef f80f 	bl	8000624 <__aeabi_i2d>
 8011606:	a364      	add	r3, pc, #400	; (adr r3, 8011798 <_dtoa_r+0x2e0>)
 8011608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160c:	f7ef f874 	bl	80006f8 <__aeabi_dmul>
 8011610:	4602      	mov	r2, r0
 8011612:	460b      	mov	r3, r1
 8011614:	4630      	mov	r0, r6
 8011616:	4639      	mov	r1, r7
 8011618:	f7ee feb8 	bl	800038c <__adddf3>
 801161c:	4606      	mov	r6, r0
 801161e:	460f      	mov	r7, r1
 8011620:	f7ef fb1a 	bl	8000c58 <__aeabi_d2iz>
 8011624:	2200      	movs	r2, #0
 8011626:	4683      	mov	fp, r0
 8011628:	2300      	movs	r3, #0
 801162a:	4630      	mov	r0, r6
 801162c:	4639      	mov	r1, r7
 801162e:	f7ef fad5 	bl	8000bdc <__aeabi_dcmplt>
 8011632:	b148      	cbz	r0, 8011648 <_dtoa_r+0x190>
 8011634:	4658      	mov	r0, fp
 8011636:	f7ee fff5 	bl	8000624 <__aeabi_i2d>
 801163a:	4632      	mov	r2, r6
 801163c:	463b      	mov	r3, r7
 801163e:	f7ef fac3 	bl	8000bc8 <__aeabi_dcmpeq>
 8011642:	b908      	cbnz	r0, 8011648 <_dtoa_r+0x190>
 8011644:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011648:	f1bb 0f16 	cmp.w	fp, #22
 801164c:	d857      	bhi.n	80116fe <_dtoa_r+0x246>
 801164e:	4b5b      	ldr	r3, [pc, #364]	; (80117bc <_dtoa_r+0x304>)
 8011650:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011658:	ec51 0b18 	vmov	r0, r1, d8
 801165c:	f7ef fabe 	bl	8000bdc <__aeabi_dcmplt>
 8011660:	2800      	cmp	r0, #0
 8011662:	d04e      	beq.n	8011702 <_dtoa_r+0x24a>
 8011664:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011668:	2300      	movs	r3, #0
 801166a:	930c      	str	r3, [sp, #48]	; 0x30
 801166c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801166e:	1b5b      	subs	r3, r3, r5
 8011670:	1e5a      	subs	r2, r3, #1
 8011672:	bf45      	ittet	mi
 8011674:	f1c3 0301 	rsbmi	r3, r3, #1
 8011678:	9305      	strmi	r3, [sp, #20]
 801167a:	2300      	movpl	r3, #0
 801167c:	2300      	movmi	r3, #0
 801167e:	9206      	str	r2, [sp, #24]
 8011680:	bf54      	ite	pl
 8011682:	9305      	strpl	r3, [sp, #20]
 8011684:	9306      	strmi	r3, [sp, #24]
 8011686:	f1bb 0f00 	cmp.w	fp, #0
 801168a:	db3c      	blt.n	8011706 <_dtoa_r+0x24e>
 801168c:	9b06      	ldr	r3, [sp, #24]
 801168e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011692:	445b      	add	r3, fp
 8011694:	9306      	str	r3, [sp, #24]
 8011696:	2300      	movs	r3, #0
 8011698:	9308      	str	r3, [sp, #32]
 801169a:	9b07      	ldr	r3, [sp, #28]
 801169c:	2b09      	cmp	r3, #9
 801169e:	d868      	bhi.n	8011772 <_dtoa_r+0x2ba>
 80116a0:	2b05      	cmp	r3, #5
 80116a2:	bfc4      	itt	gt
 80116a4:	3b04      	subgt	r3, #4
 80116a6:	9307      	strgt	r3, [sp, #28]
 80116a8:	9b07      	ldr	r3, [sp, #28]
 80116aa:	f1a3 0302 	sub.w	r3, r3, #2
 80116ae:	bfcc      	ite	gt
 80116b0:	2500      	movgt	r5, #0
 80116b2:	2501      	movle	r5, #1
 80116b4:	2b03      	cmp	r3, #3
 80116b6:	f200 8085 	bhi.w	80117c4 <_dtoa_r+0x30c>
 80116ba:	e8df f003 	tbb	[pc, r3]
 80116be:	3b2e      	.short	0x3b2e
 80116c0:	5839      	.short	0x5839
 80116c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80116c6:	441d      	add	r5, r3
 80116c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80116cc:	2b20      	cmp	r3, #32
 80116ce:	bfc1      	itttt	gt
 80116d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80116d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80116d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80116dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80116e0:	bfd6      	itet	le
 80116e2:	f1c3 0320 	rsble	r3, r3, #32
 80116e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80116ea:	fa06 f003 	lslle.w	r0, r6, r3
 80116ee:	f7ee ff89 	bl	8000604 <__aeabi_ui2d>
 80116f2:	2201      	movs	r2, #1
 80116f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80116f8:	3d01      	subs	r5, #1
 80116fa:	920e      	str	r2, [sp, #56]	; 0x38
 80116fc:	e76f      	b.n	80115de <_dtoa_r+0x126>
 80116fe:	2301      	movs	r3, #1
 8011700:	e7b3      	b.n	801166a <_dtoa_r+0x1b2>
 8011702:	900c      	str	r0, [sp, #48]	; 0x30
 8011704:	e7b2      	b.n	801166c <_dtoa_r+0x1b4>
 8011706:	9b05      	ldr	r3, [sp, #20]
 8011708:	eba3 030b 	sub.w	r3, r3, fp
 801170c:	9305      	str	r3, [sp, #20]
 801170e:	f1cb 0300 	rsb	r3, fp, #0
 8011712:	9308      	str	r3, [sp, #32]
 8011714:	2300      	movs	r3, #0
 8011716:	930b      	str	r3, [sp, #44]	; 0x2c
 8011718:	e7bf      	b.n	801169a <_dtoa_r+0x1e2>
 801171a:	2300      	movs	r3, #0
 801171c:	9309      	str	r3, [sp, #36]	; 0x24
 801171e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011720:	2b00      	cmp	r3, #0
 8011722:	dc52      	bgt.n	80117ca <_dtoa_r+0x312>
 8011724:	2301      	movs	r3, #1
 8011726:	9301      	str	r3, [sp, #4]
 8011728:	9304      	str	r3, [sp, #16]
 801172a:	461a      	mov	r2, r3
 801172c:	920a      	str	r2, [sp, #40]	; 0x28
 801172e:	e00b      	b.n	8011748 <_dtoa_r+0x290>
 8011730:	2301      	movs	r3, #1
 8011732:	e7f3      	b.n	801171c <_dtoa_r+0x264>
 8011734:	2300      	movs	r3, #0
 8011736:	9309      	str	r3, [sp, #36]	; 0x24
 8011738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801173a:	445b      	add	r3, fp
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	3301      	adds	r3, #1
 8011740:	2b01      	cmp	r3, #1
 8011742:	9304      	str	r3, [sp, #16]
 8011744:	bfb8      	it	lt
 8011746:	2301      	movlt	r3, #1
 8011748:	69e0      	ldr	r0, [r4, #28]
 801174a:	2100      	movs	r1, #0
 801174c:	2204      	movs	r2, #4
 801174e:	f102 0614 	add.w	r6, r2, #20
 8011752:	429e      	cmp	r6, r3
 8011754:	d93d      	bls.n	80117d2 <_dtoa_r+0x31a>
 8011756:	6041      	str	r1, [r0, #4]
 8011758:	4620      	mov	r0, r4
 801175a:	f000 fceb 	bl	8012134 <_Balloc>
 801175e:	9000      	str	r0, [sp, #0]
 8011760:	2800      	cmp	r0, #0
 8011762:	d139      	bne.n	80117d8 <_dtoa_r+0x320>
 8011764:	4b16      	ldr	r3, [pc, #88]	; (80117c0 <_dtoa_r+0x308>)
 8011766:	4602      	mov	r2, r0
 8011768:	f240 11af 	movw	r1, #431	; 0x1af
 801176c:	e6bd      	b.n	80114ea <_dtoa_r+0x32>
 801176e:	2301      	movs	r3, #1
 8011770:	e7e1      	b.n	8011736 <_dtoa_r+0x27e>
 8011772:	2501      	movs	r5, #1
 8011774:	2300      	movs	r3, #0
 8011776:	9307      	str	r3, [sp, #28]
 8011778:	9509      	str	r5, [sp, #36]	; 0x24
 801177a:	f04f 33ff 	mov.w	r3, #4294967295
 801177e:	9301      	str	r3, [sp, #4]
 8011780:	9304      	str	r3, [sp, #16]
 8011782:	2200      	movs	r2, #0
 8011784:	2312      	movs	r3, #18
 8011786:	e7d1      	b.n	801172c <_dtoa_r+0x274>
 8011788:	636f4361 	.word	0x636f4361
 801178c:	3fd287a7 	.word	0x3fd287a7
 8011790:	8b60c8b3 	.word	0x8b60c8b3
 8011794:	3fc68a28 	.word	0x3fc68a28
 8011798:	509f79fb 	.word	0x509f79fb
 801179c:	3fd34413 	.word	0x3fd34413
 80117a0:	0802c7d9 	.word	0x0802c7d9
 80117a4:	0802c7f0 	.word	0x0802c7f0
 80117a8:	7ff00000 	.word	0x7ff00000
 80117ac:	0802c7d5 	.word	0x0802c7d5
 80117b0:	0802c7cc 	.word	0x0802c7cc
 80117b4:	0802c7a9 	.word	0x0802c7a9
 80117b8:	3ff80000 	.word	0x3ff80000
 80117bc:	0802c8e0 	.word	0x0802c8e0
 80117c0:	0802c848 	.word	0x0802c848
 80117c4:	2301      	movs	r3, #1
 80117c6:	9309      	str	r3, [sp, #36]	; 0x24
 80117c8:	e7d7      	b.n	801177a <_dtoa_r+0x2c2>
 80117ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117cc:	9301      	str	r3, [sp, #4]
 80117ce:	9304      	str	r3, [sp, #16]
 80117d0:	e7ba      	b.n	8011748 <_dtoa_r+0x290>
 80117d2:	3101      	adds	r1, #1
 80117d4:	0052      	lsls	r2, r2, #1
 80117d6:	e7ba      	b.n	801174e <_dtoa_r+0x296>
 80117d8:	69e3      	ldr	r3, [r4, #28]
 80117da:	9a00      	ldr	r2, [sp, #0]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	9b04      	ldr	r3, [sp, #16]
 80117e0:	2b0e      	cmp	r3, #14
 80117e2:	f200 80a8 	bhi.w	8011936 <_dtoa_r+0x47e>
 80117e6:	2d00      	cmp	r5, #0
 80117e8:	f000 80a5 	beq.w	8011936 <_dtoa_r+0x47e>
 80117ec:	f1bb 0f00 	cmp.w	fp, #0
 80117f0:	dd38      	ble.n	8011864 <_dtoa_r+0x3ac>
 80117f2:	4bc0      	ldr	r3, [pc, #768]	; (8011af4 <_dtoa_r+0x63c>)
 80117f4:	f00b 020f 	and.w	r2, fp, #15
 80117f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80117fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011800:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011804:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011808:	d019      	beq.n	801183e <_dtoa_r+0x386>
 801180a:	4bbb      	ldr	r3, [pc, #748]	; (8011af8 <_dtoa_r+0x640>)
 801180c:	ec51 0b18 	vmov	r0, r1, d8
 8011810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011814:	f7ef f89a 	bl	800094c <__aeabi_ddiv>
 8011818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801181c:	f008 080f 	and.w	r8, r8, #15
 8011820:	2503      	movs	r5, #3
 8011822:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011af8 <_dtoa_r+0x640>
 8011826:	f1b8 0f00 	cmp.w	r8, #0
 801182a:	d10a      	bne.n	8011842 <_dtoa_r+0x38a>
 801182c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011830:	4632      	mov	r2, r6
 8011832:	463b      	mov	r3, r7
 8011834:	f7ef f88a 	bl	800094c <__aeabi_ddiv>
 8011838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801183c:	e02b      	b.n	8011896 <_dtoa_r+0x3de>
 801183e:	2502      	movs	r5, #2
 8011840:	e7ef      	b.n	8011822 <_dtoa_r+0x36a>
 8011842:	f018 0f01 	tst.w	r8, #1
 8011846:	d008      	beq.n	801185a <_dtoa_r+0x3a2>
 8011848:	4630      	mov	r0, r6
 801184a:	4639      	mov	r1, r7
 801184c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011850:	f7ee ff52 	bl	80006f8 <__aeabi_dmul>
 8011854:	3501      	adds	r5, #1
 8011856:	4606      	mov	r6, r0
 8011858:	460f      	mov	r7, r1
 801185a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801185e:	f109 0908 	add.w	r9, r9, #8
 8011862:	e7e0      	b.n	8011826 <_dtoa_r+0x36e>
 8011864:	f000 809f 	beq.w	80119a6 <_dtoa_r+0x4ee>
 8011868:	f1cb 0600 	rsb	r6, fp, #0
 801186c:	4ba1      	ldr	r3, [pc, #644]	; (8011af4 <_dtoa_r+0x63c>)
 801186e:	4fa2      	ldr	r7, [pc, #648]	; (8011af8 <_dtoa_r+0x640>)
 8011870:	f006 020f 	and.w	r2, r6, #15
 8011874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187c:	ec51 0b18 	vmov	r0, r1, d8
 8011880:	f7ee ff3a 	bl	80006f8 <__aeabi_dmul>
 8011884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011888:	1136      	asrs	r6, r6, #4
 801188a:	2300      	movs	r3, #0
 801188c:	2502      	movs	r5, #2
 801188e:	2e00      	cmp	r6, #0
 8011890:	d17e      	bne.n	8011990 <_dtoa_r+0x4d8>
 8011892:	2b00      	cmp	r3, #0
 8011894:	d1d0      	bne.n	8011838 <_dtoa_r+0x380>
 8011896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011898:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801189c:	2b00      	cmp	r3, #0
 801189e:	f000 8084 	beq.w	80119aa <_dtoa_r+0x4f2>
 80118a2:	4b96      	ldr	r3, [pc, #600]	; (8011afc <_dtoa_r+0x644>)
 80118a4:	2200      	movs	r2, #0
 80118a6:	4640      	mov	r0, r8
 80118a8:	4649      	mov	r1, r9
 80118aa:	f7ef f997 	bl	8000bdc <__aeabi_dcmplt>
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d07b      	beq.n	80119aa <_dtoa_r+0x4f2>
 80118b2:	9b04      	ldr	r3, [sp, #16]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d078      	beq.n	80119aa <_dtoa_r+0x4f2>
 80118b8:	9b01      	ldr	r3, [sp, #4]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	dd39      	ble.n	8011932 <_dtoa_r+0x47a>
 80118be:	4b90      	ldr	r3, [pc, #576]	; (8011b00 <_dtoa_r+0x648>)
 80118c0:	2200      	movs	r2, #0
 80118c2:	4640      	mov	r0, r8
 80118c4:	4649      	mov	r1, r9
 80118c6:	f7ee ff17 	bl	80006f8 <__aeabi_dmul>
 80118ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118ce:	9e01      	ldr	r6, [sp, #4]
 80118d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80118d4:	3501      	adds	r5, #1
 80118d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80118da:	4628      	mov	r0, r5
 80118dc:	f7ee fea2 	bl	8000624 <__aeabi_i2d>
 80118e0:	4642      	mov	r2, r8
 80118e2:	464b      	mov	r3, r9
 80118e4:	f7ee ff08 	bl	80006f8 <__aeabi_dmul>
 80118e8:	4b86      	ldr	r3, [pc, #536]	; (8011b04 <_dtoa_r+0x64c>)
 80118ea:	2200      	movs	r2, #0
 80118ec:	f7ee fd4e 	bl	800038c <__adddf3>
 80118f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80118f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118f8:	9303      	str	r3, [sp, #12]
 80118fa:	2e00      	cmp	r6, #0
 80118fc:	d158      	bne.n	80119b0 <_dtoa_r+0x4f8>
 80118fe:	4b82      	ldr	r3, [pc, #520]	; (8011b08 <_dtoa_r+0x650>)
 8011900:	2200      	movs	r2, #0
 8011902:	4640      	mov	r0, r8
 8011904:	4649      	mov	r1, r9
 8011906:	f7ee fd3f 	bl	8000388 <__aeabi_dsub>
 801190a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801190e:	4680      	mov	r8, r0
 8011910:	4689      	mov	r9, r1
 8011912:	f7ef f981 	bl	8000c18 <__aeabi_dcmpgt>
 8011916:	2800      	cmp	r0, #0
 8011918:	f040 8296 	bne.w	8011e48 <_dtoa_r+0x990>
 801191c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011920:	4640      	mov	r0, r8
 8011922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011926:	4649      	mov	r1, r9
 8011928:	f7ef f958 	bl	8000bdc <__aeabi_dcmplt>
 801192c:	2800      	cmp	r0, #0
 801192e:	f040 8289 	bne.w	8011e44 <_dtoa_r+0x98c>
 8011932:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011938:	2b00      	cmp	r3, #0
 801193a:	f2c0 814e 	blt.w	8011bda <_dtoa_r+0x722>
 801193e:	f1bb 0f0e 	cmp.w	fp, #14
 8011942:	f300 814a 	bgt.w	8011bda <_dtoa_r+0x722>
 8011946:	4b6b      	ldr	r3, [pc, #428]	; (8011af4 <_dtoa_r+0x63c>)
 8011948:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801194c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011952:	2b00      	cmp	r3, #0
 8011954:	f280 80dc 	bge.w	8011b10 <_dtoa_r+0x658>
 8011958:	9b04      	ldr	r3, [sp, #16]
 801195a:	2b00      	cmp	r3, #0
 801195c:	f300 80d8 	bgt.w	8011b10 <_dtoa_r+0x658>
 8011960:	f040 826f 	bne.w	8011e42 <_dtoa_r+0x98a>
 8011964:	4b68      	ldr	r3, [pc, #416]	; (8011b08 <_dtoa_r+0x650>)
 8011966:	2200      	movs	r2, #0
 8011968:	4640      	mov	r0, r8
 801196a:	4649      	mov	r1, r9
 801196c:	f7ee fec4 	bl	80006f8 <__aeabi_dmul>
 8011970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011974:	f7ef f946 	bl	8000c04 <__aeabi_dcmpge>
 8011978:	9e04      	ldr	r6, [sp, #16]
 801197a:	4637      	mov	r7, r6
 801197c:	2800      	cmp	r0, #0
 801197e:	f040 8245 	bne.w	8011e0c <_dtoa_r+0x954>
 8011982:	9d00      	ldr	r5, [sp, #0]
 8011984:	2331      	movs	r3, #49	; 0x31
 8011986:	f805 3b01 	strb.w	r3, [r5], #1
 801198a:	f10b 0b01 	add.w	fp, fp, #1
 801198e:	e241      	b.n	8011e14 <_dtoa_r+0x95c>
 8011990:	07f2      	lsls	r2, r6, #31
 8011992:	d505      	bpl.n	80119a0 <_dtoa_r+0x4e8>
 8011994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011998:	f7ee feae 	bl	80006f8 <__aeabi_dmul>
 801199c:	3501      	adds	r5, #1
 801199e:	2301      	movs	r3, #1
 80119a0:	1076      	asrs	r6, r6, #1
 80119a2:	3708      	adds	r7, #8
 80119a4:	e773      	b.n	801188e <_dtoa_r+0x3d6>
 80119a6:	2502      	movs	r5, #2
 80119a8:	e775      	b.n	8011896 <_dtoa_r+0x3de>
 80119aa:	9e04      	ldr	r6, [sp, #16]
 80119ac:	465f      	mov	r7, fp
 80119ae:	e792      	b.n	80118d6 <_dtoa_r+0x41e>
 80119b0:	9900      	ldr	r1, [sp, #0]
 80119b2:	4b50      	ldr	r3, [pc, #320]	; (8011af4 <_dtoa_r+0x63c>)
 80119b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80119b8:	4431      	add	r1, r6
 80119ba:	9102      	str	r1, [sp, #8]
 80119bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119be:	eeb0 9a47 	vmov.f32	s18, s14
 80119c2:	eef0 9a67 	vmov.f32	s19, s15
 80119c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80119ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80119ce:	2900      	cmp	r1, #0
 80119d0:	d044      	beq.n	8011a5c <_dtoa_r+0x5a4>
 80119d2:	494e      	ldr	r1, [pc, #312]	; (8011b0c <_dtoa_r+0x654>)
 80119d4:	2000      	movs	r0, #0
 80119d6:	f7ee ffb9 	bl	800094c <__aeabi_ddiv>
 80119da:	ec53 2b19 	vmov	r2, r3, d9
 80119de:	f7ee fcd3 	bl	8000388 <__aeabi_dsub>
 80119e2:	9d00      	ldr	r5, [sp, #0]
 80119e4:	ec41 0b19 	vmov	d9, r0, r1
 80119e8:	4649      	mov	r1, r9
 80119ea:	4640      	mov	r0, r8
 80119ec:	f7ef f934 	bl	8000c58 <__aeabi_d2iz>
 80119f0:	4606      	mov	r6, r0
 80119f2:	f7ee fe17 	bl	8000624 <__aeabi_i2d>
 80119f6:	4602      	mov	r2, r0
 80119f8:	460b      	mov	r3, r1
 80119fa:	4640      	mov	r0, r8
 80119fc:	4649      	mov	r1, r9
 80119fe:	f7ee fcc3 	bl	8000388 <__aeabi_dsub>
 8011a02:	3630      	adds	r6, #48	; 0x30
 8011a04:	f805 6b01 	strb.w	r6, [r5], #1
 8011a08:	ec53 2b19 	vmov	r2, r3, d9
 8011a0c:	4680      	mov	r8, r0
 8011a0e:	4689      	mov	r9, r1
 8011a10:	f7ef f8e4 	bl	8000bdc <__aeabi_dcmplt>
 8011a14:	2800      	cmp	r0, #0
 8011a16:	d164      	bne.n	8011ae2 <_dtoa_r+0x62a>
 8011a18:	4642      	mov	r2, r8
 8011a1a:	464b      	mov	r3, r9
 8011a1c:	4937      	ldr	r1, [pc, #220]	; (8011afc <_dtoa_r+0x644>)
 8011a1e:	2000      	movs	r0, #0
 8011a20:	f7ee fcb2 	bl	8000388 <__aeabi_dsub>
 8011a24:	ec53 2b19 	vmov	r2, r3, d9
 8011a28:	f7ef f8d8 	bl	8000bdc <__aeabi_dcmplt>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	f040 80b6 	bne.w	8011b9e <_dtoa_r+0x6e6>
 8011a32:	9b02      	ldr	r3, [sp, #8]
 8011a34:	429d      	cmp	r5, r3
 8011a36:	f43f af7c 	beq.w	8011932 <_dtoa_r+0x47a>
 8011a3a:	4b31      	ldr	r3, [pc, #196]	; (8011b00 <_dtoa_r+0x648>)
 8011a3c:	ec51 0b19 	vmov	r0, r1, d9
 8011a40:	2200      	movs	r2, #0
 8011a42:	f7ee fe59 	bl	80006f8 <__aeabi_dmul>
 8011a46:	4b2e      	ldr	r3, [pc, #184]	; (8011b00 <_dtoa_r+0x648>)
 8011a48:	ec41 0b19 	vmov	d9, r0, r1
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	4640      	mov	r0, r8
 8011a50:	4649      	mov	r1, r9
 8011a52:	f7ee fe51 	bl	80006f8 <__aeabi_dmul>
 8011a56:	4680      	mov	r8, r0
 8011a58:	4689      	mov	r9, r1
 8011a5a:	e7c5      	b.n	80119e8 <_dtoa_r+0x530>
 8011a5c:	ec51 0b17 	vmov	r0, r1, d7
 8011a60:	f7ee fe4a 	bl	80006f8 <__aeabi_dmul>
 8011a64:	9b02      	ldr	r3, [sp, #8]
 8011a66:	9d00      	ldr	r5, [sp, #0]
 8011a68:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a6a:	ec41 0b19 	vmov	d9, r0, r1
 8011a6e:	4649      	mov	r1, r9
 8011a70:	4640      	mov	r0, r8
 8011a72:	f7ef f8f1 	bl	8000c58 <__aeabi_d2iz>
 8011a76:	4606      	mov	r6, r0
 8011a78:	f7ee fdd4 	bl	8000624 <__aeabi_i2d>
 8011a7c:	3630      	adds	r6, #48	; 0x30
 8011a7e:	4602      	mov	r2, r0
 8011a80:	460b      	mov	r3, r1
 8011a82:	4640      	mov	r0, r8
 8011a84:	4649      	mov	r1, r9
 8011a86:	f7ee fc7f 	bl	8000388 <__aeabi_dsub>
 8011a8a:	f805 6b01 	strb.w	r6, [r5], #1
 8011a8e:	9b02      	ldr	r3, [sp, #8]
 8011a90:	429d      	cmp	r5, r3
 8011a92:	4680      	mov	r8, r0
 8011a94:	4689      	mov	r9, r1
 8011a96:	f04f 0200 	mov.w	r2, #0
 8011a9a:	d124      	bne.n	8011ae6 <_dtoa_r+0x62e>
 8011a9c:	4b1b      	ldr	r3, [pc, #108]	; (8011b0c <_dtoa_r+0x654>)
 8011a9e:	ec51 0b19 	vmov	r0, r1, d9
 8011aa2:	f7ee fc73 	bl	800038c <__adddf3>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	4640      	mov	r0, r8
 8011aac:	4649      	mov	r1, r9
 8011aae:	f7ef f8b3 	bl	8000c18 <__aeabi_dcmpgt>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	d173      	bne.n	8011b9e <_dtoa_r+0x6e6>
 8011ab6:	ec53 2b19 	vmov	r2, r3, d9
 8011aba:	4914      	ldr	r1, [pc, #80]	; (8011b0c <_dtoa_r+0x654>)
 8011abc:	2000      	movs	r0, #0
 8011abe:	f7ee fc63 	bl	8000388 <__aeabi_dsub>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	4640      	mov	r0, r8
 8011ac8:	4649      	mov	r1, r9
 8011aca:	f7ef f887 	bl	8000bdc <__aeabi_dcmplt>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	f43f af2f 	beq.w	8011932 <_dtoa_r+0x47a>
 8011ad4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011ad6:	1e6b      	subs	r3, r5, #1
 8011ad8:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ada:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011ade:	2b30      	cmp	r3, #48	; 0x30
 8011ae0:	d0f8      	beq.n	8011ad4 <_dtoa_r+0x61c>
 8011ae2:	46bb      	mov	fp, r7
 8011ae4:	e04a      	b.n	8011b7c <_dtoa_r+0x6c4>
 8011ae6:	4b06      	ldr	r3, [pc, #24]	; (8011b00 <_dtoa_r+0x648>)
 8011ae8:	f7ee fe06 	bl	80006f8 <__aeabi_dmul>
 8011aec:	4680      	mov	r8, r0
 8011aee:	4689      	mov	r9, r1
 8011af0:	e7bd      	b.n	8011a6e <_dtoa_r+0x5b6>
 8011af2:	bf00      	nop
 8011af4:	0802c8e0 	.word	0x0802c8e0
 8011af8:	0802c8b8 	.word	0x0802c8b8
 8011afc:	3ff00000 	.word	0x3ff00000
 8011b00:	40240000 	.word	0x40240000
 8011b04:	401c0000 	.word	0x401c0000
 8011b08:	40140000 	.word	0x40140000
 8011b0c:	3fe00000 	.word	0x3fe00000
 8011b10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b14:	9d00      	ldr	r5, [sp, #0]
 8011b16:	4642      	mov	r2, r8
 8011b18:	464b      	mov	r3, r9
 8011b1a:	4630      	mov	r0, r6
 8011b1c:	4639      	mov	r1, r7
 8011b1e:	f7ee ff15 	bl	800094c <__aeabi_ddiv>
 8011b22:	f7ef f899 	bl	8000c58 <__aeabi_d2iz>
 8011b26:	9001      	str	r0, [sp, #4]
 8011b28:	f7ee fd7c 	bl	8000624 <__aeabi_i2d>
 8011b2c:	4642      	mov	r2, r8
 8011b2e:	464b      	mov	r3, r9
 8011b30:	f7ee fde2 	bl	80006f8 <__aeabi_dmul>
 8011b34:	4602      	mov	r2, r0
 8011b36:	460b      	mov	r3, r1
 8011b38:	4630      	mov	r0, r6
 8011b3a:	4639      	mov	r1, r7
 8011b3c:	f7ee fc24 	bl	8000388 <__aeabi_dsub>
 8011b40:	9e01      	ldr	r6, [sp, #4]
 8011b42:	9f04      	ldr	r7, [sp, #16]
 8011b44:	3630      	adds	r6, #48	; 0x30
 8011b46:	f805 6b01 	strb.w	r6, [r5], #1
 8011b4a:	9e00      	ldr	r6, [sp, #0]
 8011b4c:	1bae      	subs	r6, r5, r6
 8011b4e:	42b7      	cmp	r7, r6
 8011b50:	4602      	mov	r2, r0
 8011b52:	460b      	mov	r3, r1
 8011b54:	d134      	bne.n	8011bc0 <_dtoa_r+0x708>
 8011b56:	f7ee fc19 	bl	800038c <__adddf3>
 8011b5a:	4642      	mov	r2, r8
 8011b5c:	464b      	mov	r3, r9
 8011b5e:	4606      	mov	r6, r0
 8011b60:	460f      	mov	r7, r1
 8011b62:	f7ef f859 	bl	8000c18 <__aeabi_dcmpgt>
 8011b66:	b9c8      	cbnz	r0, 8011b9c <_dtoa_r+0x6e4>
 8011b68:	4642      	mov	r2, r8
 8011b6a:	464b      	mov	r3, r9
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	4639      	mov	r1, r7
 8011b70:	f7ef f82a 	bl	8000bc8 <__aeabi_dcmpeq>
 8011b74:	b110      	cbz	r0, 8011b7c <_dtoa_r+0x6c4>
 8011b76:	9b01      	ldr	r3, [sp, #4]
 8011b78:	07db      	lsls	r3, r3, #31
 8011b7a:	d40f      	bmi.n	8011b9c <_dtoa_r+0x6e4>
 8011b7c:	4651      	mov	r1, sl
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f000 fb18 	bl	80121b4 <_Bfree>
 8011b84:	2300      	movs	r3, #0
 8011b86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b88:	702b      	strb	r3, [r5, #0]
 8011b8a:	f10b 0301 	add.w	r3, fp, #1
 8011b8e:	6013      	str	r3, [r2, #0]
 8011b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f43f ace2 	beq.w	801155c <_dtoa_r+0xa4>
 8011b98:	601d      	str	r5, [r3, #0]
 8011b9a:	e4df      	b.n	801155c <_dtoa_r+0xa4>
 8011b9c:	465f      	mov	r7, fp
 8011b9e:	462b      	mov	r3, r5
 8011ba0:	461d      	mov	r5, r3
 8011ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ba6:	2a39      	cmp	r2, #57	; 0x39
 8011ba8:	d106      	bne.n	8011bb8 <_dtoa_r+0x700>
 8011baa:	9a00      	ldr	r2, [sp, #0]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d1f7      	bne.n	8011ba0 <_dtoa_r+0x6e8>
 8011bb0:	9900      	ldr	r1, [sp, #0]
 8011bb2:	2230      	movs	r2, #48	; 0x30
 8011bb4:	3701      	adds	r7, #1
 8011bb6:	700a      	strb	r2, [r1, #0]
 8011bb8:	781a      	ldrb	r2, [r3, #0]
 8011bba:	3201      	adds	r2, #1
 8011bbc:	701a      	strb	r2, [r3, #0]
 8011bbe:	e790      	b.n	8011ae2 <_dtoa_r+0x62a>
 8011bc0:	4ba3      	ldr	r3, [pc, #652]	; (8011e50 <_dtoa_r+0x998>)
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	f7ee fd98 	bl	80006f8 <__aeabi_dmul>
 8011bc8:	2200      	movs	r2, #0
 8011bca:	2300      	movs	r3, #0
 8011bcc:	4606      	mov	r6, r0
 8011bce:	460f      	mov	r7, r1
 8011bd0:	f7ee fffa 	bl	8000bc8 <__aeabi_dcmpeq>
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d09e      	beq.n	8011b16 <_dtoa_r+0x65e>
 8011bd8:	e7d0      	b.n	8011b7c <_dtoa_r+0x6c4>
 8011bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bdc:	2a00      	cmp	r2, #0
 8011bde:	f000 80ca 	beq.w	8011d76 <_dtoa_r+0x8be>
 8011be2:	9a07      	ldr	r2, [sp, #28]
 8011be4:	2a01      	cmp	r2, #1
 8011be6:	f300 80ad 	bgt.w	8011d44 <_dtoa_r+0x88c>
 8011bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bec:	2a00      	cmp	r2, #0
 8011bee:	f000 80a5 	beq.w	8011d3c <_dtoa_r+0x884>
 8011bf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011bf6:	9e08      	ldr	r6, [sp, #32]
 8011bf8:	9d05      	ldr	r5, [sp, #20]
 8011bfa:	9a05      	ldr	r2, [sp, #20]
 8011bfc:	441a      	add	r2, r3
 8011bfe:	9205      	str	r2, [sp, #20]
 8011c00:	9a06      	ldr	r2, [sp, #24]
 8011c02:	2101      	movs	r1, #1
 8011c04:	441a      	add	r2, r3
 8011c06:	4620      	mov	r0, r4
 8011c08:	9206      	str	r2, [sp, #24]
 8011c0a:	f000 fb89 	bl	8012320 <__i2b>
 8011c0e:	4607      	mov	r7, r0
 8011c10:	b165      	cbz	r5, 8011c2c <_dtoa_r+0x774>
 8011c12:	9b06      	ldr	r3, [sp, #24]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	dd09      	ble.n	8011c2c <_dtoa_r+0x774>
 8011c18:	42ab      	cmp	r3, r5
 8011c1a:	9a05      	ldr	r2, [sp, #20]
 8011c1c:	bfa8      	it	ge
 8011c1e:	462b      	movge	r3, r5
 8011c20:	1ad2      	subs	r2, r2, r3
 8011c22:	9205      	str	r2, [sp, #20]
 8011c24:	9a06      	ldr	r2, [sp, #24]
 8011c26:	1aed      	subs	r5, r5, r3
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	9306      	str	r3, [sp, #24]
 8011c2c:	9b08      	ldr	r3, [sp, #32]
 8011c2e:	b1f3      	cbz	r3, 8011c6e <_dtoa_r+0x7b6>
 8011c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 80a3 	beq.w	8011d7e <_dtoa_r+0x8c6>
 8011c38:	2e00      	cmp	r6, #0
 8011c3a:	dd10      	ble.n	8011c5e <_dtoa_r+0x7a6>
 8011c3c:	4639      	mov	r1, r7
 8011c3e:	4632      	mov	r2, r6
 8011c40:	4620      	mov	r0, r4
 8011c42:	f000 fc2d 	bl	80124a0 <__pow5mult>
 8011c46:	4652      	mov	r2, sl
 8011c48:	4601      	mov	r1, r0
 8011c4a:	4607      	mov	r7, r0
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f000 fb7d 	bl	801234c <__multiply>
 8011c52:	4651      	mov	r1, sl
 8011c54:	4680      	mov	r8, r0
 8011c56:	4620      	mov	r0, r4
 8011c58:	f000 faac 	bl	80121b4 <_Bfree>
 8011c5c:	46c2      	mov	sl, r8
 8011c5e:	9b08      	ldr	r3, [sp, #32]
 8011c60:	1b9a      	subs	r2, r3, r6
 8011c62:	d004      	beq.n	8011c6e <_dtoa_r+0x7b6>
 8011c64:	4651      	mov	r1, sl
 8011c66:	4620      	mov	r0, r4
 8011c68:	f000 fc1a 	bl	80124a0 <__pow5mult>
 8011c6c:	4682      	mov	sl, r0
 8011c6e:	2101      	movs	r1, #1
 8011c70:	4620      	mov	r0, r4
 8011c72:	f000 fb55 	bl	8012320 <__i2b>
 8011c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	4606      	mov	r6, r0
 8011c7c:	f340 8081 	ble.w	8011d82 <_dtoa_r+0x8ca>
 8011c80:	461a      	mov	r2, r3
 8011c82:	4601      	mov	r1, r0
 8011c84:	4620      	mov	r0, r4
 8011c86:	f000 fc0b 	bl	80124a0 <__pow5mult>
 8011c8a:	9b07      	ldr	r3, [sp, #28]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	4606      	mov	r6, r0
 8011c90:	dd7a      	ble.n	8011d88 <_dtoa_r+0x8d0>
 8011c92:	f04f 0800 	mov.w	r8, #0
 8011c96:	6933      	ldr	r3, [r6, #16]
 8011c98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011c9c:	6918      	ldr	r0, [r3, #16]
 8011c9e:	f000 faf1 	bl	8012284 <__hi0bits>
 8011ca2:	f1c0 0020 	rsb	r0, r0, #32
 8011ca6:	9b06      	ldr	r3, [sp, #24]
 8011ca8:	4418      	add	r0, r3
 8011caa:	f010 001f 	ands.w	r0, r0, #31
 8011cae:	f000 8094 	beq.w	8011dda <_dtoa_r+0x922>
 8011cb2:	f1c0 0320 	rsb	r3, r0, #32
 8011cb6:	2b04      	cmp	r3, #4
 8011cb8:	f340 8085 	ble.w	8011dc6 <_dtoa_r+0x90e>
 8011cbc:	9b05      	ldr	r3, [sp, #20]
 8011cbe:	f1c0 001c 	rsb	r0, r0, #28
 8011cc2:	4403      	add	r3, r0
 8011cc4:	9305      	str	r3, [sp, #20]
 8011cc6:	9b06      	ldr	r3, [sp, #24]
 8011cc8:	4403      	add	r3, r0
 8011cca:	4405      	add	r5, r0
 8011ccc:	9306      	str	r3, [sp, #24]
 8011cce:	9b05      	ldr	r3, [sp, #20]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	dd05      	ble.n	8011ce0 <_dtoa_r+0x828>
 8011cd4:	4651      	mov	r1, sl
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f000 fc3b 	bl	8012554 <__lshift>
 8011cde:	4682      	mov	sl, r0
 8011ce0:	9b06      	ldr	r3, [sp, #24]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	dd05      	ble.n	8011cf2 <_dtoa_r+0x83a>
 8011ce6:	4631      	mov	r1, r6
 8011ce8:	461a      	mov	r2, r3
 8011cea:	4620      	mov	r0, r4
 8011cec:	f000 fc32 	bl	8012554 <__lshift>
 8011cf0:	4606      	mov	r6, r0
 8011cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d072      	beq.n	8011dde <_dtoa_r+0x926>
 8011cf8:	4631      	mov	r1, r6
 8011cfa:	4650      	mov	r0, sl
 8011cfc:	f000 fc96 	bl	801262c <__mcmp>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	da6c      	bge.n	8011dde <_dtoa_r+0x926>
 8011d04:	2300      	movs	r3, #0
 8011d06:	4651      	mov	r1, sl
 8011d08:	220a      	movs	r2, #10
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f000 fa74 	bl	80121f8 <__multadd>
 8011d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d16:	4682      	mov	sl, r0
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f000 81b0 	beq.w	801207e <_dtoa_r+0xbc6>
 8011d1e:	2300      	movs	r3, #0
 8011d20:	4639      	mov	r1, r7
 8011d22:	220a      	movs	r2, #10
 8011d24:	4620      	mov	r0, r4
 8011d26:	f000 fa67 	bl	80121f8 <__multadd>
 8011d2a:	9b01      	ldr	r3, [sp, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	4607      	mov	r7, r0
 8011d30:	f300 8096 	bgt.w	8011e60 <_dtoa_r+0x9a8>
 8011d34:	9b07      	ldr	r3, [sp, #28]
 8011d36:	2b02      	cmp	r3, #2
 8011d38:	dc59      	bgt.n	8011dee <_dtoa_r+0x936>
 8011d3a:	e091      	b.n	8011e60 <_dtoa_r+0x9a8>
 8011d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011d42:	e758      	b.n	8011bf6 <_dtoa_r+0x73e>
 8011d44:	9b04      	ldr	r3, [sp, #16]
 8011d46:	1e5e      	subs	r6, r3, #1
 8011d48:	9b08      	ldr	r3, [sp, #32]
 8011d4a:	42b3      	cmp	r3, r6
 8011d4c:	bfbf      	itttt	lt
 8011d4e:	9b08      	ldrlt	r3, [sp, #32]
 8011d50:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011d52:	9608      	strlt	r6, [sp, #32]
 8011d54:	1af3      	sublt	r3, r6, r3
 8011d56:	bfb4      	ite	lt
 8011d58:	18d2      	addlt	r2, r2, r3
 8011d5a:	1b9e      	subge	r6, r3, r6
 8011d5c:	9b04      	ldr	r3, [sp, #16]
 8011d5e:	bfbc      	itt	lt
 8011d60:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011d62:	2600      	movlt	r6, #0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	bfb7      	itett	lt
 8011d68:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011d6c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011d70:	1a9d      	sublt	r5, r3, r2
 8011d72:	2300      	movlt	r3, #0
 8011d74:	e741      	b.n	8011bfa <_dtoa_r+0x742>
 8011d76:	9e08      	ldr	r6, [sp, #32]
 8011d78:	9d05      	ldr	r5, [sp, #20]
 8011d7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011d7c:	e748      	b.n	8011c10 <_dtoa_r+0x758>
 8011d7e:	9a08      	ldr	r2, [sp, #32]
 8011d80:	e770      	b.n	8011c64 <_dtoa_r+0x7ac>
 8011d82:	9b07      	ldr	r3, [sp, #28]
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	dc19      	bgt.n	8011dbc <_dtoa_r+0x904>
 8011d88:	9b02      	ldr	r3, [sp, #8]
 8011d8a:	b9bb      	cbnz	r3, 8011dbc <_dtoa_r+0x904>
 8011d8c:	9b03      	ldr	r3, [sp, #12]
 8011d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d92:	b99b      	cbnz	r3, 8011dbc <_dtoa_r+0x904>
 8011d94:	9b03      	ldr	r3, [sp, #12]
 8011d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011d9a:	0d1b      	lsrs	r3, r3, #20
 8011d9c:	051b      	lsls	r3, r3, #20
 8011d9e:	b183      	cbz	r3, 8011dc2 <_dtoa_r+0x90a>
 8011da0:	9b05      	ldr	r3, [sp, #20]
 8011da2:	3301      	adds	r3, #1
 8011da4:	9305      	str	r3, [sp, #20]
 8011da6:	9b06      	ldr	r3, [sp, #24]
 8011da8:	3301      	adds	r3, #1
 8011daa:	9306      	str	r3, [sp, #24]
 8011dac:	f04f 0801 	mov.w	r8, #1
 8011db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f47f af6f 	bne.w	8011c96 <_dtoa_r+0x7de>
 8011db8:	2001      	movs	r0, #1
 8011dba:	e774      	b.n	8011ca6 <_dtoa_r+0x7ee>
 8011dbc:	f04f 0800 	mov.w	r8, #0
 8011dc0:	e7f6      	b.n	8011db0 <_dtoa_r+0x8f8>
 8011dc2:	4698      	mov	r8, r3
 8011dc4:	e7f4      	b.n	8011db0 <_dtoa_r+0x8f8>
 8011dc6:	d082      	beq.n	8011cce <_dtoa_r+0x816>
 8011dc8:	9a05      	ldr	r2, [sp, #20]
 8011dca:	331c      	adds	r3, #28
 8011dcc:	441a      	add	r2, r3
 8011dce:	9205      	str	r2, [sp, #20]
 8011dd0:	9a06      	ldr	r2, [sp, #24]
 8011dd2:	441a      	add	r2, r3
 8011dd4:	441d      	add	r5, r3
 8011dd6:	9206      	str	r2, [sp, #24]
 8011dd8:	e779      	b.n	8011cce <_dtoa_r+0x816>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	e7f4      	b.n	8011dc8 <_dtoa_r+0x910>
 8011dde:	9b04      	ldr	r3, [sp, #16]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	dc37      	bgt.n	8011e54 <_dtoa_r+0x99c>
 8011de4:	9b07      	ldr	r3, [sp, #28]
 8011de6:	2b02      	cmp	r3, #2
 8011de8:	dd34      	ble.n	8011e54 <_dtoa_r+0x99c>
 8011dea:	9b04      	ldr	r3, [sp, #16]
 8011dec:	9301      	str	r3, [sp, #4]
 8011dee:	9b01      	ldr	r3, [sp, #4]
 8011df0:	b963      	cbnz	r3, 8011e0c <_dtoa_r+0x954>
 8011df2:	4631      	mov	r1, r6
 8011df4:	2205      	movs	r2, #5
 8011df6:	4620      	mov	r0, r4
 8011df8:	f000 f9fe 	bl	80121f8 <__multadd>
 8011dfc:	4601      	mov	r1, r0
 8011dfe:	4606      	mov	r6, r0
 8011e00:	4650      	mov	r0, sl
 8011e02:	f000 fc13 	bl	801262c <__mcmp>
 8011e06:	2800      	cmp	r0, #0
 8011e08:	f73f adbb 	bgt.w	8011982 <_dtoa_r+0x4ca>
 8011e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e0e:	9d00      	ldr	r5, [sp, #0]
 8011e10:	ea6f 0b03 	mvn.w	fp, r3
 8011e14:	f04f 0800 	mov.w	r8, #0
 8011e18:	4631      	mov	r1, r6
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	f000 f9ca 	bl	80121b4 <_Bfree>
 8011e20:	2f00      	cmp	r7, #0
 8011e22:	f43f aeab 	beq.w	8011b7c <_dtoa_r+0x6c4>
 8011e26:	f1b8 0f00 	cmp.w	r8, #0
 8011e2a:	d005      	beq.n	8011e38 <_dtoa_r+0x980>
 8011e2c:	45b8      	cmp	r8, r7
 8011e2e:	d003      	beq.n	8011e38 <_dtoa_r+0x980>
 8011e30:	4641      	mov	r1, r8
 8011e32:	4620      	mov	r0, r4
 8011e34:	f000 f9be 	bl	80121b4 <_Bfree>
 8011e38:	4639      	mov	r1, r7
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f000 f9ba 	bl	80121b4 <_Bfree>
 8011e40:	e69c      	b.n	8011b7c <_dtoa_r+0x6c4>
 8011e42:	2600      	movs	r6, #0
 8011e44:	4637      	mov	r7, r6
 8011e46:	e7e1      	b.n	8011e0c <_dtoa_r+0x954>
 8011e48:	46bb      	mov	fp, r7
 8011e4a:	4637      	mov	r7, r6
 8011e4c:	e599      	b.n	8011982 <_dtoa_r+0x4ca>
 8011e4e:	bf00      	nop
 8011e50:	40240000 	.word	0x40240000
 8011e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f000 80c8 	beq.w	8011fec <_dtoa_r+0xb34>
 8011e5c:	9b04      	ldr	r3, [sp, #16]
 8011e5e:	9301      	str	r3, [sp, #4]
 8011e60:	2d00      	cmp	r5, #0
 8011e62:	dd05      	ble.n	8011e70 <_dtoa_r+0x9b8>
 8011e64:	4639      	mov	r1, r7
 8011e66:	462a      	mov	r2, r5
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f000 fb73 	bl	8012554 <__lshift>
 8011e6e:	4607      	mov	r7, r0
 8011e70:	f1b8 0f00 	cmp.w	r8, #0
 8011e74:	d05b      	beq.n	8011f2e <_dtoa_r+0xa76>
 8011e76:	6879      	ldr	r1, [r7, #4]
 8011e78:	4620      	mov	r0, r4
 8011e7a:	f000 f95b 	bl	8012134 <_Balloc>
 8011e7e:	4605      	mov	r5, r0
 8011e80:	b928      	cbnz	r0, 8011e8e <_dtoa_r+0x9d6>
 8011e82:	4b83      	ldr	r3, [pc, #524]	; (8012090 <_dtoa_r+0xbd8>)
 8011e84:	4602      	mov	r2, r0
 8011e86:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011e8a:	f7ff bb2e 	b.w	80114ea <_dtoa_r+0x32>
 8011e8e:	693a      	ldr	r2, [r7, #16]
 8011e90:	3202      	adds	r2, #2
 8011e92:	0092      	lsls	r2, r2, #2
 8011e94:	f107 010c 	add.w	r1, r7, #12
 8011e98:	300c      	adds	r0, #12
 8011e9a:	f7ff fa74 	bl	8011386 <memcpy>
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	4629      	mov	r1, r5
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f000 fb56 	bl	8012554 <__lshift>
 8011ea8:	9b00      	ldr	r3, [sp, #0]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	9304      	str	r3, [sp, #16]
 8011eae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011eb2:	4413      	add	r3, r2
 8011eb4:	9308      	str	r3, [sp, #32]
 8011eb6:	9b02      	ldr	r3, [sp, #8]
 8011eb8:	f003 0301 	and.w	r3, r3, #1
 8011ebc:	46b8      	mov	r8, r7
 8011ebe:	9306      	str	r3, [sp, #24]
 8011ec0:	4607      	mov	r7, r0
 8011ec2:	9b04      	ldr	r3, [sp, #16]
 8011ec4:	4631      	mov	r1, r6
 8011ec6:	3b01      	subs	r3, #1
 8011ec8:	4650      	mov	r0, sl
 8011eca:	9301      	str	r3, [sp, #4]
 8011ecc:	f7ff fa69 	bl	80113a2 <quorem>
 8011ed0:	4641      	mov	r1, r8
 8011ed2:	9002      	str	r0, [sp, #8]
 8011ed4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011ed8:	4650      	mov	r0, sl
 8011eda:	f000 fba7 	bl	801262c <__mcmp>
 8011ede:	463a      	mov	r2, r7
 8011ee0:	9005      	str	r0, [sp, #20]
 8011ee2:	4631      	mov	r1, r6
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f000 fbbd 	bl	8012664 <__mdiff>
 8011eea:	68c2      	ldr	r2, [r0, #12]
 8011eec:	4605      	mov	r5, r0
 8011eee:	bb02      	cbnz	r2, 8011f32 <_dtoa_r+0xa7a>
 8011ef0:	4601      	mov	r1, r0
 8011ef2:	4650      	mov	r0, sl
 8011ef4:	f000 fb9a 	bl	801262c <__mcmp>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	4629      	mov	r1, r5
 8011efc:	4620      	mov	r0, r4
 8011efe:	9209      	str	r2, [sp, #36]	; 0x24
 8011f00:	f000 f958 	bl	80121b4 <_Bfree>
 8011f04:	9b07      	ldr	r3, [sp, #28]
 8011f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f08:	9d04      	ldr	r5, [sp, #16]
 8011f0a:	ea43 0102 	orr.w	r1, r3, r2
 8011f0e:	9b06      	ldr	r3, [sp, #24]
 8011f10:	4319      	orrs	r1, r3
 8011f12:	d110      	bne.n	8011f36 <_dtoa_r+0xa7e>
 8011f14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011f18:	d029      	beq.n	8011f6e <_dtoa_r+0xab6>
 8011f1a:	9b05      	ldr	r3, [sp, #20]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	dd02      	ble.n	8011f26 <_dtoa_r+0xa6e>
 8011f20:	9b02      	ldr	r3, [sp, #8]
 8011f22:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011f26:	9b01      	ldr	r3, [sp, #4]
 8011f28:	f883 9000 	strb.w	r9, [r3]
 8011f2c:	e774      	b.n	8011e18 <_dtoa_r+0x960>
 8011f2e:	4638      	mov	r0, r7
 8011f30:	e7ba      	b.n	8011ea8 <_dtoa_r+0x9f0>
 8011f32:	2201      	movs	r2, #1
 8011f34:	e7e1      	b.n	8011efa <_dtoa_r+0xa42>
 8011f36:	9b05      	ldr	r3, [sp, #20]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	db04      	blt.n	8011f46 <_dtoa_r+0xa8e>
 8011f3c:	9907      	ldr	r1, [sp, #28]
 8011f3e:	430b      	orrs	r3, r1
 8011f40:	9906      	ldr	r1, [sp, #24]
 8011f42:	430b      	orrs	r3, r1
 8011f44:	d120      	bne.n	8011f88 <_dtoa_r+0xad0>
 8011f46:	2a00      	cmp	r2, #0
 8011f48:	dded      	ble.n	8011f26 <_dtoa_r+0xa6e>
 8011f4a:	4651      	mov	r1, sl
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f000 fb00 	bl	8012554 <__lshift>
 8011f54:	4631      	mov	r1, r6
 8011f56:	4682      	mov	sl, r0
 8011f58:	f000 fb68 	bl	801262c <__mcmp>
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	dc03      	bgt.n	8011f68 <_dtoa_r+0xab0>
 8011f60:	d1e1      	bne.n	8011f26 <_dtoa_r+0xa6e>
 8011f62:	f019 0f01 	tst.w	r9, #1
 8011f66:	d0de      	beq.n	8011f26 <_dtoa_r+0xa6e>
 8011f68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011f6c:	d1d8      	bne.n	8011f20 <_dtoa_r+0xa68>
 8011f6e:	9a01      	ldr	r2, [sp, #4]
 8011f70:	2339      	movs	r3, #57	; 0x39
 8011f72:	7013      	strb	r3, [r2, #0]
 8011f74:	462b      	mov	r3, r5
 8011f76:	461d      	mov	r5, r3
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011f7e:	2a39      	cmp	r2, #57	; 0x39
 8011f80:	d06c      	beq.n	801205c <_dtoa_r+0xba4>
 8011f82:	3201      	adds	r2, #1
 8011f84:	701a      	strb	r2, [r3, #0]
 8011f86:	e747      	b.n	8011e18 <_dtoa_r+0x960>
 8011f88:	2a00      	cmp	r2, #0
 8011f8a:	dd07      	ble.n	8011f9c <_dtoa_r+0xae4>
 8011f8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011f90:	d0ed      	beq.n	8011f6e <_dtoa_r+0xab6>
 8011f92:	9a01      	ldr	r2, [sp, #4]
 8011f94:	f109 0301 	add.w	r3, r9, #1
 8011f98:	7013      	strb	r3, [r2, #0]
 8011f9a:	e73d      	b.n	8011e18 <_dtoa_r+0x960>
 8011f9c:	9b04      	ldr	r3, [sp, #16]
 8011f9e:	9a08      	ldr	r2, [sp, #32]
 8011fa0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	d043      	beq.n	8012030 <_dtoa_r+0xb78>
 8011fa8:	4651      	mov	r1, sl
 8011faa:	2300      	movs	r3, #0
 8011fac:	220a      	movs	r2, #10
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f000 f922 	bl	80121f8 <__multadd>
 8011fb4:	45b8      	cmp	r8, r7
 8011fb6:	4682      	mov	sl, r0
 8011fb8:	f04f 0300 	mov.w	r3, #0
 8011fbc:	f04f 020a 	mov.w	r2, #10
 8011fc0:	4641      	mov	r1, r8
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	d107      	bne.n	8011fd6 <_dtoa_r+0xb1e>
 8011fc6:	f000 f917 	bl	80121f8 <__multadd>
 8011fca:	4680      	mov	r8, r0
 8011fcc:	4607      	mov	r7, r0
 8011fce:	9b04      	ldr	r3, [sp, #16]
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	9304      	str	r3, [sp, #16]
 8011fd4:	e775      	b.n	8011ec2 <_dtoa_r+0xa0a>
 8011fd6:	f000 f90f 	bl	80121f8 <__multadd>
 8011fda:	4639      	mov	r1, r7
 8011fdc:	4680      	mov	r8, r0
 8011fde:	2300      	movs	r3, #0
 8011fe0:	220a      	movs	r2, #10
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f000 f908 	bl	80121f8 <__multadd>
 8011fe8:	4607      	mov	r7, r0
 8011fea:	e7f0      	b.n	8011fce <_dtoa_r+0xb16>
 8011fec:	9b04      	ldr	r3, [sp, #16]
 8011fee:	9301      	str	r3, [sp, #4]
 8011ff0:	9d00      	ldr	r5, [sp, #0]
 8011ff2:	4631      	mov	r1, r6
 8011ff4:	4650      	mov	r0, sl
 8011ff6:	f7ff f9d4 	bl	80113a2 <quorem>
 8011ffa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011ffe:	9b00      	ldr	r3, [sp, #0]
 8012000:	f805 9b01 	strb.w	r9, [r5], #1
 8012004:	1aea      	subs	r2, r5, r3
 8012006:	9b01      	ldr	r3, [sp, #4]
 8012008:	4293      	cmp	r3, r2
 801200a:	dd07      	ble.n	801201c <_dtoa_r+0xb64>
 801200c:	4651      	mov	r1, sl
 801200e:	2300      	movs	r3, #0
 8012010:	220a      	movs	r2, #10
 8012012:	4620      	mov	r0, r4
 8012014:	f000 f8f0 	bl	80121f8 <__multadd>
 8012018:	4682      	mov	sl, r0
 801201a:	e7ea      	b.n	8011ff2 <_dtoa_r+0xb3a>
 801201c:	9b01      	ldr	r3, [sp, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	bfc8      	it	gt
 8012022:	461d      	movgt	r5, r3
 8012024:	9b00      	ldr	r3, [sp, #0]
 8012026:	bfd8      	it	le
 8012028:	2501      	movle	r5, #1
 801202a:	441d      	add	r5, r3
 801202c:	f04f 0800 	mov.w	r8, #0
 8012030:	4651      	mov	r1, sl
 8012032:	2201      	movs	r2, #1
 8012034:	4620      	mov	r0, r4
 8012036:	f000 fa8d 	bl	8012554 <__lshift>
 801203a:	4631      	mov	r1, r6
 801203c:	4682      	mov	sl, r0
 801203e:	f000 faf5 	bl	801262c <__mcmp>
 8012042:	2800      	cmp	r0, #0
 8012044:	dc96      	bgt.n	8011f74 <_dtoa_r+0xabc>
 8012046:	d102      	bne.n	801204e <_dtoa_r+0xb96>
 8012048:	f019 0f01 	tst.w	r9, #1
 801204c:	d192      	bne.n	8011f74 <_dtoa_r+0xabc>
 801204e:	462b      	mov	r3, r5
 8012050:	461d      	mov	r5, r3
 8012052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012056:	2a30      	cmp	r2, #48	; 0x30
 8012058:	d0fa      	beq.n	8012050 <_dtoa_r+0xb98>
 801205a:	e6dd      	b.n	8011e18 <_dtoa_r+0x960>
 801205c:	9a00      	ldr	r2, [sp, #0]
 801205e:	429a      	cmp	r2, r3
 8012060:	d189      	bne.n	8011f76 <_dtoa_r+0xabe>
 8012062:	f10b 0b01 	add.w	fp, fp, #1
 8012066:	2331      	movs	r3, #49	; 0x31
 8012068:	e796      	b.n	8011f98 <_dtoa_r+0xae0>
 801206a:	4b0a      	ldr	r3, [pc, #40]	; (8012094 <_dtoa_r+0xbdc>)
 801206c:	f7ff ba99 	b.w	80115a2 <_dtoa_r+0xea>
 8012070:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012072:	2b00      	cmp	r3, #0
 8012074:	f47f aa6d 	bne.w	8011552 <_dtoa_r+0x9a>
 8012078:	4b07      	ldr	r3, [pc, #28]	; (8012098 <_dtoa_r+0xbe0>)
 801207a:	f7ff ba92 	b.w	80115a2 <_dtoa_r+0xea>
 801207e:	9b01      	ldr	r3, [sp, #4]
 8012080:	2b00      	cmp	r3, #0
 8012082:	dcb5      	bgt.n	8011ff0 <_dtoa_r+0xb38>
 8012084:	9b07      	ldr	r3, [sp, #28]
 8012086:	2b02      	cmp	r3, #2
 8012088:	f73f aeb1 	bgt.w	8011dee <_dtoa_r+0x936>
 801208c:	e7b0      	b.n	8011ff0 <_dtoa_r+0xb38>
 801208e:	bf00      	nop
 8012090:	0802c848 	.word	0x0802c848
 8012094:	0802c7a8 	.word	0x0802c7a8
 8012098:	0802c7cc 	.word	0x0802c7cc

0801209c <_free_r>:
 801209c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801209e:	2900      	cmp	r1, #0
 80120a0:	d044      	beq.n	801212c <_free_r+0x90>
 80120a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120a6:	9001      	str	r0, [sp, #4]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	f1a1 0404 	sub.w	r4, r1, #4
 80120ae:	bfb8      	it	lt
 80120b0:	18e4      	addlt	r4, r4, r3
 80120b2:	f7fe f9f1 	bl	8010498 <__malloc_lock>
 80120b6:	4a1e      	ldr	r2, [pc, #120]	; (8012130 <_free_r+0x94>)
 80120b8:	9801      	ldr	r0, [sp, #4]
 80120ba:	6813      	ldr	r3, [r2, #0]
 80120bc:	b933      	cbnz	r3, 80120cc <_free_r+0x30>
 80120be:	6063      	str	r3, [r4, #4]
 80120c0:	6014      	str	r4, [r2, #0]
 80120c2:	b003      	add	sp, #12
 80120c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120c8:	f7fe b9ec 	b.w	80104a4 <__malloc_unlock>
 80120cc:	42a3      	cmp	r3, r4
 80120ce:	d908      	bls.n	80120e2 <_free_r+0x46>
 80120d0:	6825      	ldr	r5, [r4, #0]
 80120d2:	1961      	adds	r1, r4, r5
 80120d4:	428b      	cmp	r3, r1
 80120d6:	bf01      	itttt	eq
 80120d8:	6819      	ldreq	r1, [r3, #0]
 80120da:	685b      	ldreq	r3, [r3, #4]
 80120dc:	1949      	addeq	r1, r1, r5
 80120de:	6021      	streq	r1, [r4, #0]
 80120e0:	e7ed      	b.n	80120be <_free_r+0x22>
 80120e2:	461a      	mov	r2, r3
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	b10b      	cbz	r3, 80120ec <_free_r+0x50>
 80120e8:	42a3      	cmp	r3, r4
 80120ea:	d9fa      	bls.n	80120e2 <_free_r+0x46>
 80120ec:	6811      	ldr	r1, [r2, #0]
 80120ee:	1855      	adds	r5, r2, r1
 80120f0:	42a5      	cmp	r5, r4
 80120f2:	d10b      	bne.n	801210c <_free_r+0x70>
 80120f4:	6824      	ldr	r4, [r4, #0]
 80120f6:	4421      	add	r1, r4
 80120f8:	1854      	adds	r4, r2, r1
 80120fa:	42a3      	cmp	r3, r4
 80120fc:	6011      	str	r1, [r2, #0]
 80120fe:	d1e0      	bne.n	80120c2 <_free_r+0x26>
 8012100:	681c      	ldr	r4, [r3, #0]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	6053      	str	r3, [r2, #4]
 8012106:	440c      	add	r4, r1
 8012108:	6014      	str	r4, [r2, #0]
 801210a:	e7da      	b.n	80120c2 <_free_r+0x26>
 801210c:	d902      	bls.n	8012114 <_free_r+0x78>
 801210e:	230c      	movs	r3, #12
 8012110:	6003      	str	r3, [r0, #0]
 8012112:	e7d6      	b.n	80120c2 <_free_r+0x26>
 8012114:	6825      	ldr	r5, [r4, #0]
 8012116:	1961      	adds	r1, r4, r5
 8012118:	428b      	cmp	r3, r1
 801211a:	bf04      	itt	eq
 801211c:	6819      	ldreq	r1, [r3, #0]
 801211e:	685b      	ldreq	r3, [r3, #4]
 8012120:	6063      	str	r3, [r4, #4]
 8012122:	bf04      	itt	eq
 8012124:	1949      	addeq	r1, r1, r5
 8012126:	6021      	streq	r1, [r4, #0]
 8012128:	6054      	str	r4, [r2, #4]
 801212a:	e7ca      	b.n	80120c2 <_free_r+0x26>
 801212c:	b003      	add	sp, #12
 801212e:	bd30      	pop	{r4, r5, pc}
 8012130:	2001617c 	.word	0x2001617c

08012134 <_Balloc>:
 8012134:	b570      	push	{r4, r5, r6, lr}
 8012136:	69c6      	ldr	r6, [r0, #28]
 8012138:	4604      	mov	r4, r0
 801213a:	460d      	mov	r5, r1
 801213c:	b976      	cbnz	r6, 801215c <_Balloc+0x28>
 801213e:	2010      	movs	r0, #16
 8012140:	f7fe f8fa 	bl	8010338 <malloc>
 8012144:	4602      	mov	r2, r0
 8012146:	61e0      	str	r0, [r4, #28]
 8012148:	b920      	cbnz	r0, 8012154 <_Balloc+0x20>
 801214a:	4b18      	ldr	r3, [pc, #96]	; (80121ac <_Balloc+0x78>)
 801214c:	4818      	ldr	r0, [pc, #96]	; (80121b0 <_Balloc+0x7c>)
 801214e:	216b      	movs	r1, #107	; 0x6b
 8012150:	f000 fde2 	bl	8012d18 <__assert_func>
 8012154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012158:	6006      	str	r6, [r0, #0]
 801215a:	60c6      	str	r6, [r0, #12]
 801215c:	69e6      	ldr	r6, [r4, #28]
 801215e:	68f3      	ldr	r3, [r6, #12]
 8012160:	b183      	cbz	r3, 8012184 <_Balloc+0x50>
 8012162:	69e3      	ldr	r3, [r4, #28]
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801216a:	b9b8      	cbnz	r0, 801219c <_Balloc+0x68>
 801216c:	2101      	movs	r1, #1
 801216e:	fa01 f605 	lsl.w	r6, r1, r5
 8012172:	1d72      	adds	r2, r6, #5
 8012174:	0092      	lsls	r2, r2, #2
 8012176:	4620      	mov	r0, r4
 8012178:	f000 fdec 	bl	8012d54 <_calloc_r>
 801217c:	b160      	cbz	r0, 8012198 <_Balloc+0x64>
 801217e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012182:	e00e      	b.n	80121a2 <_Balloc+0x6e>
 8012184:	2221      	movs	r2, #33	; 0x21
 8012186:	2104      	movs	r1, #4
 8012188:	4620      	mov	r0, r4
 801218a:	f000 fde3 	bl	8012d54 <_calloc_r>
 801218e:	69e3      	ldr	r3, [r4, #28]
 8012190:	60f0      	str	r0, [r6, #12]
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d1e4      	bne.n	8012162 <_Balloc+0x2e>
 8012198:	2000      	movs	r0, #0
 801219a:	bd70      	pop	{r4, r5, r6, pc}
 801219c:	6802      	ldr	r2, [r0, #0]
 801219e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80121a2:	2300      	movs	r3, #0
 80121a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80121a8:	e7f7      	b.n	801219a <_Balloc+0x66>
 80121aa:	bf00      	nop
 80121ac:	0802c7d9 	.word	0x0802c7d9
 80121b0:	0802c859 	.word	0x0802c859

080121b4 <_Bfree>:
 80121b4:	b570      	push	{r4, r5, r6, lr}
 80121b6:	69c6      	ldr	r6, [r0, #28]
 80121b8:	4605      	mov	r5, r0
 80121ba:	460c      	mov	r4, r1
 80121bc:	b976      	cbnz	r6, 80121dc <_Bfree+0x28>
 80121be:	2010      	movs	r0, #16
 80121c0:	f7fe f8ba 	bl	8010338 <malloc>
 80121c4:	4602      	mov	r2, r0
 80121c6:	61e8      	str	r0, [r5, #28]
 80121c8:	b920      	cbnz	r0, 80121d4 <_Bfree+0x20>
 80121ca:	4b09      	ldr	r3, [pc, #36]	; (80121f0 <_Bfree+0x3c>)
 80121cc:	4809      	ldr	r0, [pc, #36]	; (80121f4 <_Bfree+0x40>)
 80121ce:	218f      	movs	r1, #143	; 0x8f
 80121d0:	f000 fda2 	bl	8012d18 <__assert_func>
 80121d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121d8:	6006      	str	r6, [r0, #0]
 80121da:	60c6      	str	r6, [r0, #12]
 80121dc:	b13c      	cbz	r4, 80121ee <_Bfree+0x3a>
 80121de:	69eb      	ldr	r3, [r5, #28]
 80121e0:	6862      	ldr	r2, [r4, #4]
 80121e2:	68db      	ldr	r3, [r3, #12]
 80121e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80121e8:	6021      	str	r1, [r4, #0]
 80121ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80121ee:	bd70      	pop	{r4, r5, r6, pc}
 80121f0:	0802c7d9 	.word	0x0802c7d9
 80121f4:	0802c859 	.word	0x0802c859

080121f8 <__multadd>:
 80121f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121fc:	690d      	ldr	r5, [r1, #16]
 80121fe:	4607      	mov	r7, r0
 8012200:	460c      	mov	r4, r1
 8012202:	461e      	mov	r6, r3
 8012204:	f101 0c14 	add.w	ip, r1, #20
 8012208:	2000      	movs	r0, #0
 801220a:	f8dc 3000 	ldr.w	r3, [ip]
 801220e:	b299      	uxth	r1, r3
 8012210:	fb02 6101 	mla	r1, r2, r1, r6
 8012214:	0c1e      	lsrs	r6, r3, #16
 8012216:	0c0b      	lsrs	r3, r1, #16
 8012218:	fb02 3306 	mla	r3, r2, r6, r3
 801221c:	b289      	uxth	r1, r1
 801221e:	3001      	adds	r0, #1
 8012220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012224:	4285      	cmp	r5, r0
 8012226:	f84c 1b04 	str.w	r1, [ip], #4
 801222a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801222e:	dcec      	bgt.n	801220a <__multadd+0x12>
 8012230:	b30e      	cbz	r6, 8012276 <__multadd+0x7e>
 8012232:	68a3      	ldr	r3, [r4, #8]
 8012234:	42ab      	cmp	r3, r5
 8012236:	dc19      	bgt.n	801226c <__multadd+0x74>
 8012238:	6861      	ldr	r1, [r4, #4]
 801223a:	4638      	mov	r0, r7
 801223c:	3101      	adds	r1, #1
 801223e:	f7ff ff79 	bl	8012134 <_Balloc>
 8012242:	4680      	mov	r8, r0
 8012244:	b928      	cbnz	r0, 8012252 <__multadd+0x5a>
 8012246:	4602      	mov	r2, r0
 8012248:	4b0c      	ldr	r3, [pc, #48]	; (801227c <__multadd+0x84>)
 801224a:	480d      	ldr	r0, [pc, #52]	; (8012280 <__multadd+0x88>)
 801224c:	21ba      	movs	r1, #186	; 0xba
 801224e:	f000 fd63 	bl	8012d18 <__assert_func>
 8012252:	6922      	ldr	r2, [r4, #16]
 8012254:	3202      	adds	r2, #2
 8012256:	f104 010c 	add.w	r1, r4, #12
 801225a:	0092      	lsls	r2, r2, #2
 801225c:	300c      	adds	r0, #12
 801225e:	f7ff f892 	bl	8011386 <memcpy>
 8012262:	4621      	mov	r1, r4
 8012264:	4638      	mov	r0, r7
 8012266:	f7ff ffa5 	bl	80121b4 <_Bfree>
 801226a:	4644      	mov	r4, r8
 801226c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012270:	3501      	adds	r5, #1
 8012272:	615e      	str	r6, [r3, #20]
 8012274:	6125      	str	r5, [r4, #16]
 8012276:	4620      	mov	r0, r4
 8012278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801227c:	0802c848 	.word	0x0802c848
 8012280:	0802c859 	.word	0x0802c859

08012284 <__hi0bits>:
 8012284:	0c03      	lsrs	r3, r0, #16
 8012286:	041b      	lsls	r3, r3, #16
 8012288:	b9d3      	cbnz	r3, 80122c0 <__hi0bits+0x3c>
 801228a:	0400      	lsls	r0, r0, #16
 801228c:	2310      	movs	r3, #16
 801228e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012292:	bf04      	itt	eq
 8012294:	0200      	lsleq	r0, r0, #8
 8012296:	3308      	addeq	r3, #8
 8012298:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801229c:	bf04      	itt	eq
 801229e:	0100      	lsleq	r0, r0, #4
 80122a0:	3304      	addeq	r3, #4
 80122a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80122a6:	bf04      	itt	eq
 80122a8:	0080      	lsleq	r0, r0, #2
 80122aa:	3302      	addeq	r3, #2
 80122ac:	2800      	cmp	r0, #0
 80122ae:	db05      	blt.n	80122bc <__hi0bits+0x38>
 80122b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80122b4:	f103 0301 	add.w	r3, r3, #1
 80122b8:	bf08      	it	eq
 80122ba:	2320      	moveq	r3, #32
 80122bc:	4618      	mov	r0, r3
 80122be:	4770      	bx	lr
 80122c0:	2300      	movs	r3, #0
 80122c2:	e7e4      	b.n	801228e <__hi0bits+0xa>

080122c4 <__lo0bits>:
 80122c4:	6803      	ldr	r3, [r0, #0]
 80122c6:	f013 0207 	ands.w	r2, r3, #7
 80122ca:	d00c      	beq.n	80122e6 <__lo0bits+0x22>
 80122cc:	07d9      	lsls	r1, r3, #31
 80122ce:	d422      	bmi.n	8012316 <__lo0bits+0x52>
 80122d0:	079a      	lsls	r2, r3, #30
 80122d2:	bf49      	itett	mi
 80122d4:	085b      	lsrmi	r3, r3, #1
 80122d6:	089b      	lsrpl	r3, r3, #2
 80122d8:	6003      	strmi	r3, [r0, #0]
 80122da:	2201      	movmi	r2, #1
 80122dc:	bf5c      	itt	pl
 80122de:	6003      	strpl	r3, [r0, #0]
 80122e0:	2202      	movpl	r2, #2
 80122e2:	4610      	mov	r0, r2
 80122e4:	4770      	bx	lr
 80122e6:	b299      	uxth	r1, r3
 80122e8:	b909      	cbnz	r1, 80122ee <__lo0bits+0x2a>
 80122ea:	0c1b      	lsrs	r3, r3, #16
 80122ec:	2210      	movs	r2, #16
 80122ee:	b2d9      	uxtb	r1, r3
 80122f0:	b909      	cbnz	r1, 80122f6 <__lo0bits+0x32>
 80122f2:	3208      	adds	r2, #8
 80122f4:	0a1b      	lsrs	r3, r3, #8
 80122f6:	0719      	lsls	r1, r3, #28
 80122f8:	bf04      	itt	eq
 80122fa:	091b      	lsreq	r3, r3, #4
 80122fc:	3204      	addeq	r2, #4
 80122fe:	0799      	lsls	r1, r3, #30
 8012300:	bf04      	itt	eq
 8012302:	089b      	lsreq	r3, r3, #2
 8012304:	3202      	addeq	r2, #2
 8012306:	07d9      	lsls	r1, r3, #31
 8012308:	d403      	bmi.n	8012312 <__lo0bits+0x4e>
 801230a:	085b      	lsrs	r3, r3, #1
 801230c:	f102 0201 	add.w	r2, r2, #1
 8012310:	d003      	beq.n	801231a <__lo0bits+0x56>
 8012312:	6003      	str	r3, [r0, #0]
 8012314:	e7e5      	b.n	80122e2 <__lo0bits+0x1e>
 8012316:	2200      	movs	r2, #0
 8012318:	e7e3      	b.n	80122e2 <__lo0bits+0x1e>
 801231a:	2220      	movs	r2, #32
 801231c:	e7e1      	b.n	80122e2 <__lo0bits+0x1e>
	...

08012320 <__i2b>:
 8012320:	b510      	push	{r4, lr}
 8012322:	460c      	mov	r4, r1
 8012324:	2101      	movs	r1, #1
 8012326:	f7ff ff05 	bl	8012134 <_Balloc>
 801232a:	4602      	mov	r2, r0
 801232c:	b928      	cbnz	r0, 801233a <__i2b+0x1a>
 801232e:	4b05      	ldr	r3, [pc, #20]	; (8012344 <__i2b+0x24>)
 8012330:	4805      	ldr	r0, [pc, #20]	; (8012348 <__i2b+0x28>)
 8012332:	f240 1145 	movw	r1, #325	; 0x145
 8012336:	f000 fcef 	bl	8012d18 <__assert_func>
 801233a:	2301      	movs	r3, #1
 801233c:	6144      	str	r4, [r0, #20]
 801233e:	6103      	str	r3, [r0, #16]
 8012340:	bd10      	pop	{r4, pc}
 8012342:	bf00      	nop
 8012344:	0802c848 	.word	0x0802c848
 8012348:	0802c859 	.word	0x0802c859

0801234c <__multiply>:
 801234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012350:	4691      	mov	r9, r2
 8012352:	690a      	ldr	r2, [r1, #16]
 8012354:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012358:	429a      	cmp	r2, r3
 801235a:	bfb8      	it	lt
 801235c:	460b      	movlt	r3, r1
 801235e:	460c      	mov	r4, r1
 8012360:	bfbc      	itt	lt
 8012362:	464c      	movlt	r4, r9
 8012364:	4699      	movlt	r9, r3
 8012366:	6927      	ldr	r7, [r4, #16]
 8012368:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801236c:	68a3      	ldr	r3, [r4, #8]
 801236e:	6861      	ldr	r1, [r4, #4]
 8012370:	eb07 060a 	add.w	r6, r7, sl
 8012374:	42b3      	cmp	r3, r6
 8012376:	b085      	sub	sp, #20
 8012378:	bfb8      	it	lt
 801237a:	3101      	addlt	r1, #1
 801237c:	f7ff feda 	bl	8012134 <_Balloc>
 8012380:	b930      	cbnz	r0, 8012390 <__multiply+0x44>
 8012382:	4602      	mov	r2, r0
 8012384:	4b44      	ldr	r3, [pc, #272]	; (8012498 <__multiply+0x14c>)
 8012386:	4845      	ldr	r0, [pc, #276]	; (801249c <__multiply+0x150>)
 8012388:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801238c:	f000 fcc4 	bl	8012d18 <__assert_func>
 8012390:	f100 0514 	add.w	r5, r0, #20
 8012394:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012398:	462b      	mov	r3, r5
 801239a:	2200      	movs	r2, #0
 801239c:	4543      	cmp	r3, r8
 801239e:	d321      	bcc.n	80123e4 <__multiply+0x98>
 80123a0:	f104 0314 	add.w	r3, r4, #20
 80123a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80123a8:	f109 0314 	add.w	r3, r9, #20
 80123ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80123b0:	9202      	str	r2, [sp, #8]
 80123b2:	1b3a      	subs	r2, r7, r4
 80123b4:	3a15      	subs	r2, #21
 80123b6:	f022 0203 	bic.w	r2, r2, #3
 80123ba:	3204      	adds	r2, #4
 80123bc:	f104 0115 	add.w	r1, r4, #21
 80123c0:	428f      	cmp	r7, r1
 80123c2:	bf38      	it	cc
 80123c4:	2204      	movcc	r2, #4
 80123c6:	9201      	str	r2, [sp, #4]
 80123c8:	9a02      	ldr	r2, [sp, #8]
 80123ca:	9303      	str	r3, [sp, #12]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d80c      	bhi.n	80123ea <__multiply+0x9e>
 80123d0:	2e00      	cmp	r6, #0
 80123d2:	dd03      	ble.n	80123dc <__multiply+0x90>
 80123d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d05b      	beq.n	8012494 <__multiply+0x148>
 80123dc:	6106      	str	r6, [r0, #16]
 80123de:	b005      	add	sp, #20
 80123e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e4:	f843 2b04 	str.w	r2, [r3], #4
 80123e8:	e7d8      	b.n	801239c <__multiply+0x50>
 80123ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80123ee:	f1ba 0f00 	cmp.w	sl, #0
 80123f2:	d024      	beq.n	801243e <__multiply+0xf2>
 80123f4:	f104 0e14 	add.w	lr, r4, #20
 80123f8:	46a9      	mov	r9, r5
 80123fa:	f04f 0c00 	mov.w	ip, #0
 80123fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012402:	f8d9 1000 	ldr.w	r1, [r9]
 8012406:	fa1f fb82 	uxth.w	fp, r2
 801240a:	b289      	uxth	r1, r1
 801240c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012410:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012414:	f8d9 2000 	ldr.w	r2, [r9]
 8012418:	4461      	add	r1, ip
 801241a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801241e:	fb0a c20b 	mla	r2, sl, fp, ip
 8012422:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012426:	b289      	uxth	r1, r1
 8012428:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801242c:	4577      	cmp	r7, lr
 801242e:	f849 1b04 	str.w	r1, [r9], #4
 8012432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012436:	d8e2      	bhi.n	80123fe <__multiply+0xb2>
 8012438:	9a01      	ldr	r2, [sp, #4]
 801243a:	f845 c002 	str.w	ip, [r5, r2]
 801243e:	9a03      	ldr	r2, [sp, #12]
 8012440:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012444:	3304      	adds	r3, #4
 8012446:	f1b9 0f00 	cmp.w	r9, #0
 801244a:	d021      	beq.n	8012490 <__multiply+0x144>
 801244c:	6829      	ldr	r1, [r5, #0]
 801244e:	f104 0c14 	add.w	ip, r4, #20
 8012452:	46ae      	mov	lr, r5
 8012454:	f04f 0a00 	mov.w	sl, #0
 8012458:	f8bc b000 	ldrh.w	fp, [ip]
 801245c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012460:	fb09 220b 	mla	r2, r9, fp, r2
 8012464:	4452      	add	r2, sl
 8012466:	b289      	uxth	r1, r1
 8012468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801246c:	f84e 1b04 	str.w	r1, [lr], #4
 8012470:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012474:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012478:	f8be 1000 	ldrh.w	r1, [lr]
 801247c:	fb09 110a 	mla	r1, r9, sl, r1
 8012480:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012484:	4567      	cmp	r7, ip
 8012486:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801248a:	d8e5      	bhi.n	8012458 <__multiply+0x10c>
 801248c:	9a01      	ldr	r2, [sp, #4]
 801248e:	50a9      	str	r1, [r5, r2]
 8012490:	3504      	adds	r5, #4
 8012492:	e799      	b.n	80123c8 <__multiply+0x7c>
 8012494:	3e01      	subs	r6, #1
 8012496:	e79b      	b.n	80123d0 <__multiply+0x84>
 8012498:	0802c848 	.word	0x0802c848
 801249c:	0802c859 	.word	0x0802c859

080124a0 <__pow5mult>:
 80124a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a4:	4615      	mov	r5, r2
 80124a6:	f012 0203 	ands.w	r2, r2, #3
 80124aa:	4606      	mov	r6, r0
 80124ac:	460f      	mov	r7, r1
 80124ae:	d007      	beq.n	80124c0 <__pow5mult+0x20>
 80124b0:	4c25      	ldr	r4, [pc, #148]	; (8012548 <__pow5mult+0xa8>)
 80124b2:	3a01      	subs	r2, #1
 80124b4:	2300      	movs	r3, #0
 80124b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124ba:	f7ff fe9d 	bl	80121f8 <__multadd>
 80124be:	4607      	mov	r7, r0
 80124c0:	10ad      	asrs	r5, r5, #2
 80124c2:	d03d      	beq.n	8012540 <__pow5mult+0xa0>
 80124c4:	69f4      	ldr	r4, [r6, #28]
 80124c6:	b97c      	cbnz	r4, 80124e8 <__pow5mult+0x48>
 80124c8:	2010      	movs	r0, #16
 80124ca:	f7fd ff35 	bl	8010338 <malloc>
 80124ce:	4602      	mov	r2, r0
 80124d0:	61f0      	str	r0, [r6, #28]
 80124d2:	b928      	cbnz	r0, 80124e0 <__pow5mult+0x40>
 80124d4:	4b1d      	ldr	r3, [pc, #116]	; (801254c <__pow5mult+0xac>)
 80124d6:	481e      	ldr	r0, [pc, #120]	; (8012550 <__pow5mult+0xb0>)
 80124d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80124dc:	f000 fc1c 	bl	8012d18 <__assert_func>
 80124e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124e4:	6004      	str	r4, [r0, #0]
 80124e6:	60c4      	str	r4, [r0, #12]
 80124e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80124ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124f0:	b94c      	cbnz	r4, 8012506 <__pow5mult+0x66>
 80124f2:	f240 2171 	movw	r1, #625	; 0x271
 80124f6:	4630      	mov	r0, r6
 80124f8:	f7ff ff12 	bl	8012320 <__i2b>
 80124fc:	2300      	movs	r3, #0
 80124fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8012502:	4604      	mov	r4, r0
 8012504:	6003      	str	r3, [r0, #0]
 8012506:	f04f 0900 	mov.w	r9, #0
 801250a:	07eb      	lsls	r3, r5, #31
 801250c:	d50a      	bpl.n	8012524 <__pow5mult+0x84>
 801250e:	4639      	mov	r1, r7
 8012510:	4622      	mov	r2, r4
 8012512:	4630      	mov	r0, r6
 8012514:	f7ff ff1a 	bl	801234c <__multiply>
 8012518:	4639      	mov	r1, r7
 801251a:	4680      	mov	r8, r0
 801251c:	4630      	mov	r0, r6
 801251e:	f7ff fe49 	bl	80121b4 <_Bfree>
 8012522:	4647      	mov	r7, r8
 8012524:	106d      	asrs	r5, r5, #1
 8012526:	d00b      	beq.n	8012540 <__pow5mult+0xa0>
 8012528:	6820      	ldr	r0, [r4, #0]
 801252a:	b938      	cbnz	r0, 801253c <__pow5mult+0x9c>
 801252c:	4622      	mov	r2, r4
 801252e:	4621      	mov	r1, r4
 8012530:	4630      	mov	r0, r6
 8012532:	f7ff ff0b 	bl	801234c <__multiply>
 8012536:	6020      	str	r0, [r4, #0]
 8012538:	f8c0 9000 	str.w	r9, [r0]
 801253c:	4604      	mov	r4, r0
 801253e:	e7e4      	b.n	801250a <__pow5mult+0x6a>
 8012540:	4638      	mov	r0, r7
 8012542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012546:	bf00      	nop
 8012548:	0802c9a8 	.word	0x0802c9a8
 801254c:	0802c7d9 	.word	0x0802c7d9
 8012550:	0802c859 	.word	0x0802c859

08012554 <__lshift>:
 8012554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012558:	460c      	mov	r4, r1
 801255a:	6849      	ldr	r1, [r1, #4]
 801255c:	6923      	ldr	r3, [r4, #16]
 801255e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012562:	68a3      	ldr	r3, [r4, #8]
 8012564:	4607      	mov	r7, r0
 8012566:	4691      	mov	r9, r2
 8012568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801256c:	f108 0601 	add.w	r6, r8, #1
 8012570:	42b3      	cmp	r3, r6
 8012572:	db0b      	blt.n	801258c <__lshift+0x38>
 8012574:	4638      	mov	r0, r7
 8012576:	f7ff fddd 	bl	8012134 <_Balloc>
 801257a:	4605      	mov	r5, r0
 801257c:	b948      	cbnz	r0, 8012592 <__lshift+0x3e>
 801257e:	4602      	mov	r2, r0
 8012580:	4b28      	ldr	r3, [pc, #160]	; (8012624 <__lshift+0xd0>)
 8012582:	4829      	ldr	r0, [pc, #164]	; (8012628 <__lshift+0xd4>)
 8012584:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012588:	f000 fbc6 	bl	8012d18 <__assert_func>
 801258c:	3101      	adds	r1, #1
 801258e:	005b      	lsls	r3, r3, #1
 8012590:	e7ee      	b.n	8012570 <__lshift+0x1c>
 8012592:	2300      	movs	r3, #0
 8012594:	f100 0114 	add.w	r1, r0, #20
 8012598:	f100 0210 	add.w	r2, r0, #16
 801259c:	4618      	mov	r0, r3
 801259e:	4553      	cmp	r3, sl
 80125a0:	db33      	blt.n	801260a <__lshift+0xb6>
 80125a2:	6920      	ldr	r0, [r4, #16]
 80125a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125a8:	f104 0314 	add.w	r3, r4, #20
 80125ac:	f019 091f 	ands.w	r9, r9, #31
 80125b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125b8:	d02b      	beq.n	8012612 <__lshift+0xbe>
 80125ba:	f1c9 0e20 	rsb	lr, r9, #32
 80125be:	468a      	mov	sl, r1
 80125c0:	2200      	movs	r2, #0
 80125c2:	6818      	ldr	r0, [r3, #0]
 80125c4:	fa00 f009 	lsl.w	r0, r0, r9
 80125c8:	4310      	orrs	r0, r2
 80125ca:	f84a 0b04 	str.w	r0, [sl], #4
 80125ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80125d2:	459c      	cmp	ip, r3
 80125d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80125d8:	d8f3      	bhi.n	80125c2 <__lshift+0x6e>
 80125da:	ebac 0304 	sub.w	r3, ip, r4
 80125de:	3b15      	subs	r3, #21
 80125e0:	f023 0303 	bic.w	r3, r3, #3
 80125e4:	3304      	adds	r3, #4
 80125e6:	f104 0015 	add.w	r0, r4, #21
 80125ea:	4584      	cmp	ip, r0
 80125ec:	bf38      	it	cc
 80125ee:	2304      	movcc	r3, #4
 80125f0:	50ca      	str	r2, [r1, r3]
 80125f2:	b10a      	cbz	r2, 80125f8 <__lshift+0xa4>
 80125f4:	f108 0602 	add.w	r6, r8, #2
 80125f8:	3e01      	subs	r6, #1
 80125fa:	4638      	mov	r0, r7
 80125fc:	612e      	str	r6, [r5, #16]
 80125fe:	4621      	mov	r1, r4
 8012600:	f7ff fdd8 	bl	80121b4 <_Bfree>
 8012604:	4628      	mov	r0, r5
 8012606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801260a:	f842 0f04 	str.w	r0, [r2, #4]!
 801260e:	3301      	adds	r3, #1
 8012610:	e7c5      	b.n	801259e <__lshift+0x4a>
 8012612:	3904      	subs	r1, #4
 8012614:	f853 2b04 	ldr.w	r2, [r3], #4
 8012618:	f841 2f04 	str.w	r2, [r1, #4]!
 801261c:	459c      	cmp	ip, r3
 801261e:	d8f9      	bhi.n	8012614 <__lshift+0xc0>
 8012620:	e7ea      	b.n	80125f8 <__lshift+0xa4>
 8012622:	bf00      	nop
 8012624:	0802c848 	.word	0x0802c848
 8012628:	0802c859 	.word	0x0802c859

0801262c <__mcmp>:
 801262c:	b530      	push	{r4, r5, lr}
 801262e:	6902      	ldr	r2, [r0, #16]
 8012630:	690c      	ldr	r4, [r1, #16]
 8012632:	1b12      	subs	r2, r2, r4
 8012634:	d10e      	bne.n	8012654 <__mcmp+0x28>
 8012636:	f100 0314 	add.w	r3, r0, #20
 801263a:	3114      	adds	r1, #20
 801263c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012640:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012644:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012648:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801264c:	42a5      	cmp	r5, r4
 801264e:	d003      	beq.n	8012658 <__mcmp+0x2c>
 8012650:	d305      	bcc.n	801265e <__mcmp+0x32>
 8012652:	2201      	movs	r2, #1
 8012654:	4610      	mov	r0, r2
 8012656:	bd30      	pop	{r4, r5, pc}
 8012658:	4283      	cmp	r3, r0
 801265a:	d3f3      	bcc.n	8012644 <__mcmp+0x18>
 801265c:	e7fa      	b.n	8012654 <__mcmp+0x28>
 801265e:	f04f 32ff 	mov.w	r2, #4294967295
 8012662:	e7f7      	b.n	8012654 <__mcmp+0x28>

08012664 <__mdiff>:
 8012664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012668:	460c      	mov	r4, r1
 801266a:	4606      	mov	r6, r0
 801266c:	4611      	mov	r1, r2
 801266e:	4620      	mov	r0, r4
 8012670:	4690      	mov	r8, r2
 8012672:	f7ff ffdb 	bl	801262c <__mcmp>
 8012676:	1e05      	subs	r5, r0, #0
 8012678:	d110      	bne.n	801269c <__mdiff+0x38>
 801267a:	4629      	mov	r1, r5
 801267c:	4630      	mov	r0, r6
 801267e:	f7ff fd59 	bl	8012134 <_Balloc>
 8012682:	b930      	cbnz	r0, 8012692 <__mdiff+0x2e>
 8012684:	4b3a      	ldr	r3, [pc, #232]	; (8012770 <__mdiff+0x10c>)
 8012686:	4602      	mov	r2, r0
 8012688:	f240 2137 	movw	r1, #567	; 0x237
 801268c:	4839      	ldr	r0, [pc, #228]	; (8012774 <__mdiff+0x110>)
 801268e:	f000 fb43 	bl	8012d18 <__assert_func>
 8012692:	2301      	movs	r3, #1
 8012694:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801269c:	bfa4      	itt	ge
 801269e:	4643      	movge	r3, r8
 80126a0:	46a0      	movge	r8, r4
 80126a2:	4630      	mov	r0, r6
 80126a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80126a8:	bfa6      	itte	ge
 80126aa:	461c      	movge	r4, r3
 80126ac:	2500      	movge	r5, #0
 80126ae:	2501      	movlt	r5, #1
 80126b0:	f7ff fd40 	bl	8012134 <_Balloc>
 80126b4:	b920      	cbnz	r0, 80126c0 <__mdiff+0x5c>
 80126b6:	4b2e      	ldr	r3, [pc, #184]	; (8012770 <__mdiff+0x10c>)
 80126b8:	4602      	mov	r2, r0
 80126ba:	f240 2145 	movw	r1, #581	; 0x245
 80126be:	e7e5      	b.n	801268c <__mdiff+0x28>
 80126c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80126c4:	6926      	ldr	r6, [r4, #16]
 80126c6:	60c5      	str	r5, [r0, #12]
 80126c8:	f104 0914 	add.w	r9, r4, #20
 80126cc:	f108 0514 	add.w	r5, r8, #20
 80126d0:	f100 0e14 	add.w	lr, r0, #20
 80126d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80126d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80126dc:	f108 0210 	add.w	r2, r8, #16
 80126e0:	46f2      	mov	sl, lr
 80126e2:	2100      	movs	r1, #0
 80126e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80126e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80126ec:	fa11 f88b 	uxtah	r8, r1, fp
 80126f0:	b299      	uxth	r1, r3
 80126f2:	0c1b      	lsrs	r3, r3, #16
 80126f4:	eba8 0801 	sub.w	r8, r8, r1
 80126f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80126fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012700:	fa1f f888 	uxth.w	r8, r8
 8012704:	1419      	asrs	r1, r3, #16
 8012706:	454e      	cmp	r6, r9
 8012708:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801270c:	f84a 3b04 	str.w	r3, [sl], #4
 8012710:	d8e8      	bhi.n	80126e4 <__mdiff+0x80>
 8012712:	1b33      	subs	r3, r6, r4
 8012714:	3b15      	subs	r3, #21
 8012716:	f023 0303 	bic.w	r3, r3, #3
 801271a:	3304      	adds	r3, #4
 801271c:	3415      	adds	r4, #21
 801271e:	42a6      	cmp	r6, r4
 8012720:	bf38      	it	cc
 8012722:	2304      	movcc	r3, #4
 8012724:	441d      	add	r5, r3
 8012726:	4473      	add	r3, lr
 8012728:	469e      	mov	lr, r3
 801272a:	462e      	mov	r6, r5
 801272c:	4566      	cmp	r6, ip
 801272e:	d30e      	bcc.n	801274e <__mdiff+0xea>
 8012730:	f10c 0203 	add.w	r2, ip, #3
 8012734:	1b52      	subs	r2, r2, r5
 8012736:	f022 0203 	bic.w	r2, r2, #3
 801273a:	3d03      	subs	r5, #3
 801273c:	45ac      	cmp	ip, r5
 801273e:	bf38      	it	cc
 8012740:	2200      	movcc	r2, #0
 8012742:	4413      	add	r3, r2
 8012744:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012748:	b17a      	cbz	r2, 801276a <__mdiff+0x106>
 801274a:	6107      	str	r7, [r0, #16]
 801274c:	e7a4      	b.n	8012698 <__mdiff+0x34>
 801274e:	f856 8b04 	ldr.w	r8, [r6], #4
 8012752:	fa11 f288 	uxtah	r2, r1, r8
 8012756:	1414      	asrs	r4, r2, #16
 8012758:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801275c:	b292      	uxth	r2, r2
 801275e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012762:	f84e 2b04 	str.w	r2, [lr], #4
 8012766:	1421      	asrs	r1, r4, #16
 8012768:	e7e0      	b.n	801272c <__mdiff+0xc8>
 801276a:	3f01      	subs	r7, #1
 801276c:	e7ea      	b.n	8012744 <__mdiff+0xe0>
 801276e:	bf00      	nop
 8012770:	0802c848 	.word	0x0802c848
 8012774:	0802c859 	.word	0x0802c859

08012778 <__d2b>:
 8012778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801277c:	460f      	mov	r7, r1
 801277e:	2101      	movs	r1, #1
 8012780:	ec59 8b10 	vmov	r8, r9, d0
 8012784:	4616      	mov	r6, r2
 8012786:	f7ff fcd5 	bl	8012134 <_Balloc>
 801278a:	4604      	mov	r4, r0
 801278c:	b930      	cbnz	r0, 801279c <__d2b+0x24>
 801278e:	4602      	mov	r2, r0
 8012790:	4b24      	ldr	r3, [pc, #144]	; (8012824 <__d2b+0xac>)
 8012792:	4825      	ldr	r0, [pc, #148]	; (8012828 <__d2b+0xb0>)
 8012794:	f240 310f 	movw	r1, #783	; 0x30f
 8012798:	f000 fabe 	bl	8012d18 <__assert_func>
 801279c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80127a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80127a4:	bb2d      	cbnz	r5, 80127f2 <__d2b+0x7a>
 80127a6:	9301      	str	r3, [sp, #4]
 80127a8:	f1b8 0300 	subs.w	r3, r8, #0
 80127ac:	d026      	beq.n	80127fc <__d2b+0x84>
 80127ae:	4668      	mov	r0, sp
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	f7ff fd87 	bl	80122c4 <__lo0bits>
 80127b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80127ba:	b1e8      	cbz	r0, 80127f8 <__d2b+0x80>
 80127bc:	f1c0 0320 	rsb	r3, r0, #32
 80127c0:	fa02 f303 	lsl.w	r3, r2, r3
 80127c4:	430b      	orrs	r3, r1
 80127c6:	40c2      	lsrs	r2, r0
 80127c8:	6163      	str	r3, [r4, #20]
 80127ca:	9201      	str	r2, [sp, #4]
 80127cc:	9b01      	ldr	r3, [sp, #4]
 80127ce:	61a3      	str	r3, [r4, #24]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	bf14      	ite	ne
 80127d4:	2202      	movne	r2, #2
 80127d6:	2201      	moveq	r2, #1
 80127d8:	6122      	str	r2, [r4, #16]
 80127da:	b1bd      	cbz	r5, 801280c <__d2b+0x94>
 80127dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80127e0:	4405      	add	r5, r0
 80127e2:	603d      	str	r5, [r7, #0]
 80127e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80127e8:	6030      	str	r0, [r6, #0]
 80127ea:	4620      	mov	r0, r4
 80127ec:	b003      	add	sp, #12
 80127ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80127f6:	e7d6      	b.n	80127a6 <__d2b+0x2e>
 80127f8:	6161      	str	r1, [r4, #20]
 80127fa:	e7e7      	b.n	80127cc <__d2b+0x54>
 80127fc:	a801      	add	r0, sp, #4
 80127fe:	f7ff fd61 	bl	80122c4 <__lo0bits>
 8012802:	9b01      	ldr	r3, [sp, #4]
 8012804:	6163      	str	r3, [r4, #20]
 8012806:	3020      	adds	r0, #32
 8012808:	2201      	movs	r2, #1
 801280a:	e7e5      	b.n	80127d8 <__d2b+0x60>
 801280c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012814:	6038      	str	r0, [r7, #0]
 8012816:	6918      	ldr	r0, [r3, #16]
 8012818:	f7ff fd34 	bl	8012284 <__hi0bits>
 801281c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012820:	e7e2      	b.n	80127e8 <__d2b+0x70>
 8012822:	bf00      	nop
 8012824:	0802c848 	.word	0x0802c848
 8012828:	0802c859 	.word	0x0802c859

0801282c <__sfputc_r>:
 801282c:	6893      	ldr	r3, [r2, #8]
 801282e:	3b01      	subs	r3, #1
 8012830:	2b00      	cmp	r3, #0
 8012832:	b410      	push	{r4}
 8012834:	6093      	str	r3, [r2, #8]
 8012836:	da08      	bge.n	801284a <__sfputc_r+0x1e>
 8012838:	6994      	ldr	r4, [r2, #24]
 801283a:	42a3      	cmp	r3, r4
 801283c:	db01      	blt.n	8012842 <__sfputc_r+0x16>
 801283e:	290a      	cmp	r1, #10
 8012840:	d103      	bne.n	801284a <__sfputc_r+0x1e>
 8012842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012846:	f7fe bc0c 	b.w	8011062 <__swbuf_r>
 801284a:	6813      	ldr	r3, [r2, #0]
 801284c:	1c58      	adds	r0, r3, #1
 801284e:	6010      	str	r0, [r2, #0]
 8012850:	7019      	strb	r1, [r3, #0]
 8012852:	4608      	mov	r0, r1
 8012854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012858:	4770      	bx	lr

0801285a <__sfputs_r>:
 801285a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801285c:	4606      	mov	r6, r0
 801285e:	460f      	mov	r7, r1
 8012860:	4614      	mov	r4, r2
 8012862:	18d5      	adds	r5, r2, r3
 8012864:	42ac      	cmp	r4, r5
 8012866:	d101      	bne.n	801286c <__sfputs_r+0x12>
 8012868:	2000      	movs	r0, #0
 801286a:	e007      	b.n	801287c <__sfputs_r+0x22>
 801286c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012870:	463a      	mov	r2, r7
 8012872:	4630      	mov	r0, r6
 8012874:	f7ff ffda 	bl	801282c <__sfputc_r>
 8012878:	1c43      	adds	r3, r0, #1
 801287a:	d1f3      	bne.n	8012864 <__sfputs_r+0xa>
 801287c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012880 <_vfiprintf_r>:
 8012880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012884:	460d      	mov	r5, r1
 8012886:	b09d      	sub	sp, #116	; 0x74
 8012888:	4614      	mov	r4, r2
 801288a:	4698      	mov	r8, r3
 801288c:	4606      	mov	r6, r0
 801288e:	b118      	cbz	r0, 8012898 <_vfiprintf_r+0x18>
 8012890:	6a03      	ldr	r3, [r0, #32]
 8012892:	b90b      	cbnz	r3, 8012898 <_vfiprintf_r+0x18>
 8012894:	f7fe fafe 	bl	8010e94 <__sinit>
 8012898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801289a:	07d9      	lsls	r1, r3, #31
 801289c:	d405      	bmi.n	80128aa <_vfiprintf_r+0x2a>
 801289e:	89ab      	ldrh	r3, [r5, #12]
 80128a0:	059a      	lsls	r2, r3, #22
 80128a2:	d402      	bmi.n	80128aa <_vfiprintf_r+0x2a>
 80128a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128a6:	f7fe fd6c 	bl	8011382 <__retarget_lock_acquire_recursive>
 80128aa:	89ab      	ldrh	r3, [r5, #12]
 80128ac:	071b      	lsls	r3, r3, #28
 80128ae:	d501      	bpl.n	80128b4 <_vfiprintf_r+0x34>
 80128b0:	692b      	ldr	r3, [r5, #16]
 80128b2:	b99b      	cbnz	r3, 80128dc <_vfiprintf_r+0x5c>
 80128b4:	4629      	mov	r1, r5
 80128b6:	4630      	mov	r0, r6
 80128b8:	f7fe fc10 	bl	80110dc <__swsetup_r>
 80128bc:	b170      	cbz	r0, 80128dc <_vfiprintf_r+0x5c>
 80128be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128c0:	07dc      	lsls	r4, r3, #31
 80128c2:	d504      	bpl.n	80128ce <_vfiprintf_r+0x4e>
 80128c4:	f04f 30ff 	mov.w	r0, #4294967295
 80128c8:	b01d      	add	sp, #116	; 0x74
 80128ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ce:	89ab      	ldrh	r3, [r5, #12]
 80128d0:	0598      	lsls	r0, r3, #22
 80128d2:	d4f7      	bmi.n	80128c4 <_vfiprintf_r+0x44>
 80128d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128d6:	f7fe fd55 	bl	8011384 <__retarget_lock_release_recursive>
 80128da:	e7f3      	b.n	80128c4 <_vfiprintf_r+0x44>
 80128dc:	2300      	movs	r3, #0
 80128de:	9309      	str	r3, [sp, #36]	; 0x24
 80128e0:	2320      	movs	r3, #32
 80128e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80128ea:	2330      	movs	r3, #48	; 0x30
 80128ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012aa0 <_vfiprintf_r+0x220>
 80128f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128f4:	f04f 0901 	mov.w	r9, #1
 80128f8:	4623      	mov	r3, r4
 80128fa:	469a      	mov	sl, r3
 80128fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012900:	b10a      	cbz	r2, 8012906 <_vfiprintf_r+0x86>
 8012902:	2a25      	cmp	r2, #37	; 0x25
 8012904:	d1f9      	bne.n	80128fa <_vfiprintf_r+0x7a>
 8012906:	ebba 0b04 	subs.w	fp, sl, r4
 801290a:	d00b      	beq.n	8012924 <_vfiprintf_r+0xa4>
 801290c:	465b      	mov	r3, fp
 801290e:	4622      	mov	r2, r4
 8012910:	4629      	mov	r1, r5
 8012912:	4630      	mov	r0, r6
 8012914:	f7ff ffa1 	bl	801285a <__sfputs_r>
 8012918:	3001      	adds	r0, #1
 801291a:	f000 80a9 	beq.w	8012a70 <_vfiprintf_r+0x1f0>
 801291e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012920:	445a      	add	r2, fp
 8012922:	9209      	str	r2, [sp, #36]	; 0x24
 8012924:	f89a 3000 	ldrb.w	r3, [sl]
 8012928:	2b00      	cmp	r3, #0
 801292a:	f000 80a1 	beq.w	8012a70 <_vfiprintf_r+0x1f0>
 801292e:	2300      	movs	r3, #0
 8012930:	f04f 32ff 	mov.w	r2, #4294967295
 8012934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012938:	f10a 0a01 	add.w	sl, sl, #1
 801293c:	9304      	str	r3, [sp, #16]
 801293e:	9307      	str	r3, [sp, #28]
 8012940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012944:	931a      	str	r3, [sp, #104]	; 0x68
 8012946:	4654      	mov	r4, sl
 8012948:	2205      	movs	r2, #5
 801294a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801294e:	4854      	ldr	r0, [pc, #336]	; (8012aa0 <_vfiprintf_r+0x220>)
 8012950:	f7ed fcbe 	bl	80002d0 <memchr>
 8012954:	9a04      	ldr	r2, [sp, #16]
 8012956:	b9d8      	cbnz	r0, 8012990 <_vfiprintf_r+0x110>
 8012958:	06d1      	lsls	r1, r2, #27
 801295a:	bf44      	itt	mi
 801295c:	2320      	movmi	r3, #32
 801295e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012962:	0713      	lsls	r3, r2, #28
 8012964:	bf44      	itt	mi
 8012966:	232b      	movmi	r3, #43	; 0x2b
 8012968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801296c:	f89a 3000 	ldrb.w	r3, [sl]
 8012970:	2b2a      	cmp	r3, #42	; 0x2a
 8012972:	d015      	beq.n	80129a0 <_vfiprintf_r+0x120>
 8012974:	9a07      	ldr	r2, [sp, #28]
 8012976:	4654      	mov	r4, sl
 8012978:	2000      	movs	r0, #0
 801297a:	f04f 0c0a 	mov.w	ip, #10
 801297e:	4621      	mov	r1, r4
 8012980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012984:	3b30      	subs	r3, #48	; 0x30
 8012986:	2b09      	cmp	r3, #9
 8012988:	d94d      	bls.n	8012a26 <_vfiprintf_r+0x1a6>
 801298a:	b1b0      	cbz	r0, 80129ba <_vfiprintf_r+0x13a>
 801298c:	9207      	str	r2, [sp, #28]
 801298e:	e014      	b.n	80129ba <_vfiprintf_r+0x13a>
 8012990:	eba0 0308 	sub.w	r3, r0, r8
 8012994:	fa09 f303 	lsl.w	r3, r9, r3
 8012998:	4313      	orrs	r3, r2
 801299a:	9304      	str	r3, [sp, #16]
 801299c:	46a2      	mov	sl, r4
 801299e:	e7d2      	b.n	8012946 <_vfiprintf_r+0xc6>
 80129a0:	9b03      	ldr	r3, [sp, #12]
 80129a2:	1d19      	adds	r1, r3, #4
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	9103      	str	r1, [sp, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	bfbb      	ittet	lt
 80129ac:	425b      	neglt	r3, r3
 80129ae:	f042 0202 	orrlt.w	r2, r2, #2
 80129b2:	9307      	strge	r3, [sp, #28]
 80129b4:	9307      	strlt	r3, [sp, #28]
 80129b6:	bfb8      	it	lt
 80129b8:	9204      	strlt	r2, [sp, #16]
 80129ba:	7823      	ldrb	r3, [r4, #0]
 80129bc:	2b2e      	cmp	r3, #46	; 0x2e
 80129be:	d10c      	bne.n	80129da <_vfiprintf_r+0x15a>
 80129c0:	7863      	ldrb	r3, [r4, #1]
 80129c2:	2b2a      	cmp	r3, #42	; 0x2a
 80129c4:	d134      	bne.n	8012a30 <_vfiprintf_r+0x1b0>
 80129c6:	9b03      	ldr	r3, [sp, #12]
 80129c8:	1d1a      	adds	r2, r3, #4
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	9203      	str	r2, [sp, #12]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	bfb8      	it	lt
 80129d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80129d6:	3402      	adds	r4, #2
 80129d8:	9305      	str	r3, [sp, #20]
 80129da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012ab0 <_vfiprintf_r+0x230>
 80129de:	7821      	ldrb	r1, [r4, #0]
 80129e0:	2203      	movs	r2, #3
 80129e2:	4650      	mov	r0, sl
 80129e4:	f7ed fc74 	bl	80002d0 <memchr>
 80129e8:	b138      	cbz	r0, 80129fa <_vfiprintf_r+0x17a>
 80129ea:	9b04      	ldr	r3, [sp, #16]
 80129ec:	eba0 000a 	sub.w	r0, r0, sl
 80129f0:	2240      	movs	r2, #64	; 0x40
 80129f2:	4082      	lsls	r2, r0
 80129f4:	4313      	orrs	r3, r2
 80129f6:	3401      	adds	r4, #1
 80129f8:	9304      	str	r3, [sp, #16]
 80129fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129fe:	4829      	ldr	r0, [pc, #164]	; (8012aa4 <_vfiprintf_r+0x224>)
 8012a00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a04:	2206      	movs	r2, #6
 8012a06:	f7ed fc63 	bl	80002d0 <memchr>
 8012a0a:	2800      	cmp	r0, #0
 8012a0c:	d03f      	beq.n	8012a8e <_vfiprintf_r+0x20e>
 8012a0e:	4b26      	ldr	r3, [pc, #152]	; (8012aa8 <_vfiprintf_r+0x228>)
 8012a10:	bb1b      	cbnz	r3, 8012a5a <_vfiprintf_r+0x1da>
 8012a12:	9b03      	ldr	r3, [sp, #12]
 8012a14:	3307      	adds	r3, #7
 8012a16:	f023 0307 	bic.w	r3, r3, #7
 8012a1a:	3308      	adds	r3, #8
 8012a1c:	9303      	str	r3, [sp, #12]
 8012a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a20:	443b      	add	r3, r7
 8012a22:	9309      	str	r3, [sp, #36]	; 0x24
 8012a24:	e768      	b.n	80128f8 <_vfiprintf_r+0x78>
 8012a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a2a:	460c      	mov	r4, r1
 8012a2c:	2001      	movs	r0, #1
 8012a2e:	e7a6      	b.n	801297e <_vfiprintf_r+0xfe>
 8012a30:	2300      	movs	r3, #0
 8012a32:	3401      	adds	r4, #1
 8012a34:	9305      	str	r3, [sp, #20]
 8012a36:	4619      	mov	r1, r3
 8012a38:	f04f 0c0a 	mov.w	ip, #10
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a42:	3a30      	subs	r2, #48	; 0x30
 8012a44:	2a09      	cmp	r2, #9
 8012a46:	d903      	bls.n	8012a50 <_vfiprintf_r+0x1d0>
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d0c6      	beq.n	80129da <_vfiprintf_r+0x15a>
 8012a4c:	9105      	str	r1, [sp, #20]
 8012a4e:	e7c4      	b.n	80129da <_vfiprintf_r+0x15a>
 8012a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a54:	4604      	mov	r4, r0
 8012a56:	2301      	movs	r3, #1
 8012a58:	e7f0      	b.n	8012a3c <_vfiprintf_r+0x1bc>
 8012a5a:	ab03      	add	r3, sp, #12
 8012a5c:	9300      	str	r3, [sp, #0]
 8012a5e:	462a      	mov	r2, r5
 8012a60:	4b12      	ldr	r3, [pc, #72]	; (8012aac <_vfiprintf_r+0x22c>)
 8012a62:	a904      	add	r1, sp, #16
 8012a64:	4630      	mov	r0, r6
 8012a66:	f7fd fdc3 	bl	80105f0 <_printf_float>
 8012a6a:	4607      	mov	r7, r0
 8012a6c:	1c78      	adds	r0, r7, #1
 8012a6e:	d1d6      	bne.n	8012a1e <_vfiprintf_r+0x19e>
 8012a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a72:	07d9      	lsls	r1, r3, #31
 8012a74:	d405      	bmi.n	8012a82 <_vfiprintf_r+0x202>
 8012a76:	89ab      	ldrh	r3, [r5, #12]
 8012a78:	059a      	lsls	r2, r3, #22
 8012a7a:	d402      	bmi.n	8012a82 <_vfiprintf_r+0x202>
 8012a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a7e:	f7fe fc81 	bl	8011384 <__retarget_lock_release_recursive>
 8012a82:	89ab      	ldrh	r3, [r5, #12]
 8012a84:	065b      	lsls	r3, r3, #25
 8012a86:	f53f af1d 	bmi.w	80128c4 <_vfiprintf_r+0x44>
 8012a8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a8c:	e71c      	b.n	80128c8 <_vfiprintf_r+0x48>
 8012a8e:	ab03      	add	r3, sp, #12
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	462a      	mov	r2, r5
 8012a94:	4b05      	ldr	r3, [pc, #20]	; (8012aac <_vfiprintf_r+0x22c>)
 8012a96:	a904      	add	r1, sp, #16
 8012a98:	4630      	mov	r0, r6
 8012a9a:	f7fe f84d 	bl	8010b38 <_printf_i>
 8012a9e:	e7e4      	b.n	8012a6a <_vfiprintf_r+0x1ea>
 8012aa0:	0802c9b4 	.word	0x0802c9b4
 8012aa4:	0802c9be 	.word	0x0802c9be
 8012aa8:	080105f1 	.word	0x080105f1
 8012aac:	0801285b 	.word	0x0801285b
 8012ab0:	0802c9ba 	.word	0x0802c9ba

08012ab4 <__sflush_r>:
 8012ab4:	898a      	ldrh	r2, [r1, #12]
 8012ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aba:	4605      	mov	r5, r0
 8012abc:	0710      	lsls	r0, r2, #28
 8012abe:	460c      	mov	r4, r1
 8012ac0:	d458      	bmi.n	8012b74 <__sflush_r+0xc0>
 8012ac2:	684b      	ldr	r3, [r1, #4]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	dc05      	bgt.n	8012ad4 <__sflush_r+0x20>
 8012ac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	dc02      	bgt.n	8012ad4 <__sflush_r+0x20>
 8012ace:	2000      	movs	r0, #0
 8012ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ad6:	2e00      	cmp	r6, #0
 8012ad8:	d0f9      	beq.n	8012ace <__sflush_r+0x1a>
 8012ada:	2300      	movs	r3, #0
 8012adc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ae0:	682f      	ldr	r7, [r5, #0]
 8012ae2:	6a21      	ldr	r1, [r4, #32]
 8012ae4:	602b      	str	r3, [r5, #0]
 8012ae6:	d032      	beq.n	8012b4e <__sflush_r+0x9a>
 8012ae8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012aea:	89a3      	ldrh	r3, [r4, #12]
 8012aec:	075a      	lsls	r2, r3, #29
 8012aee:	d505      	bpl.n	8012afc <__sflush_r+0x48>
 8012af0:	6863      	ldr	r3, [r4, #4]
 8012af2:	1ac0      	subs	r0, r0, r3
 8012af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012af6:	b10b      	cbz	r3, 8012afc <__sflush_r+0x48>
 8012af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012afa:	1ac0      	subs	r0, r0, r3
 8012afc:	2300      	movs	r3, #0
 8012afe:	4602      	mov	r2, r0
 8012b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b02:	6a21      	ldr	r1, [r4, #32]
 8012b04:	4628      	mov	r0, r5
 8012b06:	47b0      	blx	r6
 8012b08:	1c43      	adds	r3, r0, #1
 8012b0a:	89a3      	ldrh	r3, [r4, #12]
 8012b0c:	d106      	bne.n	8012b1c <__sflush_r+0x68>
 8012b0e:	6829      	ldr	r1, [r5, #0]
 8012b10:	291d      	cmp	r1, #29
 8012b12:	d82b      	bhi.n	8012b6c <__sflush_r+0xb8>
 8012b14:	4a29      	ldr	r2, [pc, #164]	; (8012bbc <__sflush_r+0x108>)
 8012b16:	410a      	asrs	r2, r1
 8012b18:	07d6      	lsls	r6, r2, #31
 8012b1a:	d427      	bmi.n	8012b6c <__sflush_r+0xb8>
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	6062      	str	r2, [r4, #4]
 8012b20:	04d9      	lsls	r1, r3, #19
 8012b22:	6922      	ldr	r2, [r4, #16]
 8012b24:	6022      	str	r2, [r4, #0]
 8012b26:	d504      	bpl.n	8012b32 <__sflush_r+0x7e>
 8012b28:	1c42      	adds	r2, r0, #1
 8012b2a:	d101      	bne.n	8012b30 <__sflush_r+0x7c>
 8012b2c:	682b      	ldr	r3, [r5, #0]
 8012b2e:	b903      	cbnz	r3, 8012b32 <__sflush_r+0x7e>
 8012b30:	6560      	str	r0, [r4, #84]	; 0x54
 8012b32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b34:	602f      	str	r7, [r5, #0]
 8012b36:	2900      	cmp	r1, #0
 8012b38:	d0c9      	beq.n	8012ace <__sflush_r+0x1a>
 8012b3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b3e:	4299      	cmp	r1, r3
 8012b40:	d002      	beq.n	8012b48 <__sflush_r+0x94>
 8012b42:	4628      	mov	r0, r5
 8012b44:	f7ff faaa 	bl	801209c <_free_r>
 8012b48:	2000      	movs	r0, #0
 8012b4a:	6360      	str	r0, [r4, #52]	; 0x34
 8012b4c:	e7c0      	b.n	8012ad0 <__sflush_r+0x1c>
 8012b4e:	2301      	movs	r3, #1
 8012b50:	4628      	mov	r0, r5
 8012b52:	47b0      	blx	r6
 8012b54:	1c41      	adds	r1, r0, #1
 8012b56:	d1c8      	bne.n	8012aea <__sflush_r+0x36>
 8012b58:	682b      	ldr	r3, [r5, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d0c5      	beq.n	8012aea <__sflush_r+0x36>
 8012b5e:	2b1d      	cmp	r3, #29
 8012b60:	d001      	beq.n	8012b66 <__sflush_r+0xb2>
 8012b62:	2b16      	cmp	r3, #22
 8012b64:	d101      	bne.n	8012b6a <__sflush_r+0xb6>
 8012b66:	602f      	str	r7, [r5, #0]
 8012b68:	e7b1      	b.n	8012ace <__sflush_r+0x1a>
 8012b6a:	89a3      	ldrh	r3, [r4, #12]
 8012b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b70:	81a3      	strh	r3, [r4, #12]
 8012b72:	e7ad      	b.n	8012ad0 <__sflush_r+0x1c>
 8012b74:	690f      	ldr	r7, [r1, #16]
 8012b76:	2f00      	cmp	r7, #0
 8012b78:	d0a9      	beq.n	8012ace <__sflush_r+0x1a>
 8012b7a:	0793      	lsls	r3, r2, #30
 8012b7c:	680e      	ldr	r6, [r1, #0]
 8012b7e:	bf08      	it	eq
 8012b80:	694b      	ldreq	r3, [r1, #20]
 8012b82:	600f      	str	r7, [r1, #0]
 8012b84:	bf18      	it	ne
 8012b86:	2300      	movne	r3, #0
 8012b88:	eba6 0807 	sub.w	r8, r6, r7
 8012b8c:	608b      	str	r3, [r1, #8]
 8012b8e:	f1b8 0f00 	cmp.w	r8, #0
 8012b92:	dd9c      	ble.n	8012ace <__sflush_r+0x1a>
 8012b94:	6a21      	ldr	r1, [r4, #32]
 8012b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b98:	4643      	mov	r3, r8
 8012b9a:	463a      	mov	r2, r7
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	47b0      	blx	r6
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	dc06      	bgt.n	8012bb2 <__sflush_r+0xfe>
 8012ba4:	89a3      	ldrh	r3, [r4, #12]
 8012ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012baa:	81a3      	strh	r3, [r4, #12]
 8012bac:	f04f 30ff 	mov.w	r0, #4294967295
 8012bb0:	e78e      	b.n	8012ad0 <__sflush_r+0x1c>
 8012bb2:	4407      	add	r7, r0
 8012bb4:	eba8 0800 	sub.w	r8, r8, r0
 8012bb8:	e7e9      	b.n	8012b8e <__sflush_r+0xda>
 8012bba:	bf00      	nop
 8012bbc:	dfbffffe 	.word	0xdfbffffe

08012bc0 <_fflush_r>:
 8012bc0:	b538      	push	{r3, r4, r5, lr}
 8012bc2:	690b      	ldr	r3, [r1, #16]
 8012bc4:	4605      	mov	r5, r0
 8012bc6:	460c      	mov	r4, r1
 8012bc8:	b913      	cbnz	r3, 8012bd0 <_fflush_r+0x10>
 8012bca:	2500      	movs	r5, #0
 8012bcc:	4628      	mov	r0, r5
 8012bce:	bd38      	pop	{r3, r4, r5, pc}
 8012bd0:	b118      	cbz	r0, 8012bda <_fflush_r+0x1a>
 8012bd2:	6a03      	ldr	r3, [r0, #32]
 8012bd4:	b90b      	cbnz	r3, 8012bda <_fflush_r+0x1a>
 8012bd6:	f7fe f95d 	bl	8010e94 <__sinit>
 8012bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d0f3      	beq.n	8012bca <_fflush_r+0xa>
 8012be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012be4:	07d0      	lsls	r0, r2, #31
 8012be6:	d404      	bmi.n	8012bf2 <_fflush_r+0x32>
 8012be8:	0599      	lsls	r1, r3, #22
 8012bea:	d402      	bmi.n	8012bf2 <_fflush_r+0x32>
 8012bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012bee:	f7fe fbc8 	bl	8011382 <__retarget_lock_acquire_recursive>
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	4621      	mov	r1, r4
 8012bf6:	f7ff ff5d 	bl	8012ab4 <__sflush_r>
 8012bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bfc:	07da      	lsls	r2, r3, #31
 8012bfe:	4605      	mov	r5, r0
 8012c00:	d4e4      	bmi.n	8012bcc <_fflush_r+0xc>
 8012c02:	89a3      	ldrh	r3, [r4, #12]
 8012c04:	059b      	lsls	r3, r3, #22
 8012c06:	d4e1      	bmi.n	8012bcc <_fflush_r+0xc>
 8012c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c0a:	f7fe fbbb 	bl	8011384 <__retarget_lock_release_recursive>
 8012c0e:	e7dd      	b.n	8012bcc <_fflush_r+0xc>

08012c10 <__swhatbuf_r>:
 8012c10:	b570      	push	{r4, r5, r6, lr}
 8012c12:	460c      	mov	r4, r1
 8012c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c18:	2900      	cmp	r1, #0
 8012c1a:	b096      	sub	sp, #88	; 0x58
 8012c1c:	4615      	mov	r5, r2
 8012c1e:	461e      	mov	r6, r3
 8012c20:	da0d      	bge.n	8012c3e <__swhatbuf_r+0x2e>
 8012c22:	89a3      	ldrh	r3, [r4, #12]
 8012c24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012c28:	f04f 0100 	mov.w	r1, #0
 8012c2c:	bf0c      	ite	eq
 8012c2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012c32:	2340      	movne	r3, #64	; 0x40
 8012c34:	2000      	movs	r0, #0
 8012c36:	6031      	str	r1, [r6, #0]
 8012c38:	602b      	str	r3, [r5, #0]
 8012c3a:	b016      	add	sp, #88	; 0x58
 8012c3c:	bd70      	pop	{r4, r5, r6, pc}
 8012c3e:	466a      	mov	r2, sp
 8012c40:	f000 f848 	bl	8012cd4 <_fstat_r>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	dbec      	blt.n	8012c22 <__swhatbuf_r+0x12>
 8012c48:	9901      	ldr	r1, [sp, #4]
 8012c4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012c4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012c52:	4259      	negs	r1, r3
 8012c54:	4159      	adcs	r1, r3
 8012c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c5a:	e7eb      	b.n	8012c34 <__swhatbuf_r+0x24>

08012c5c <__smakebuf_r>:
 8012c5c:	898b      	ldrh	r3, [r1, #12]
 8012c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c60:	079d      	lsls	r5, r3, #30
 8012c62:	4606      	mov	r6, r0
 8012c64:	460c      	mov	r4, r1
 8012c66:	d507      	bpl.n	8012c78 <__smakebuf_r+0x1c>
 8012c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c6c:	6023      	str	r3, [r4, #0]
 8012c6e:	6123      	str	r3, [r4, #16]
 8012c70:	2301      	movs	r3, #1
 8012c72:	6163      	str	r3, [r4, #20]
 8012c74:	b002      	add	sp, #8
 8012c76:	bd70      	pop	{r4, r5, r6, pc}
 8012c78:	ab01      	add	r3, sp, #4
 8012c7a:	466a      	mov	r2, sp
 8012c7c:	f7ff ffc8 	bl	8012c10 <__swhatbuf_r>
 8012c80:	9900      	ldr	r1, [sp, #0]
 8012c82:	4605      	mov	r5, r0
 8012c84:	4630      	mov	r0, r6
 8012c86:	f7fd fb87 	bl	8010398 <_malloc_r>
 8012c8a:	b948      	cbnz	r0, 8012ca0 <__smakebuf_r+0x44>
 8012c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c90:	059a      	lsls	r2, r3, #22
 8012c92:	d4ef      	bmi.n	8012c74 <__smakebuf_r+0x18>
 8012c94:	f023 0303 	bic.w	r3, r3, #3
 8012c98:	f043 0302 	orr.w	r3, r3, #2
 8012c9c:	81a3      	strh	r3, [r4, #12]
 8012c9e:	e7e3      	b.n	8012c68 <__smakebuf_r+0xc>
 8012ca0:	89a3      	ldrh	r3, [r4, #12]
 8012ca2:	6020      	str	r0, [r4, #0]
 8012ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ca8:	81a3      	strh	r3, [r4, #12]
 8012caa:	9b00      	ldr	r3, [sp, #0]
 8012cac:	6163      	str	r3, [r4, #20]
 8012cae:	9b01      	ldr	r3, [sp, #4]
 8012cb0:	6120      	str	r0, [r4, #16]
 8012cb2:	b15b      	cbz	r3, 8012ccc <__smakebuf_r+0x70>
 8012cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cb8:	4630      	mov	r0, r6
 8012cba:	f000 f81d 	bl	8012cf8 <_isatty_r>
 8012cbe:	b128      	cbz	r0, 8012ccc <__smakebuf_r+0x70>
 8012cc0:	89a3      	ldrh	r3, [r4, #12]
 8012cc2:	f023 0303 	bic.w	r3, r3, #3
 8012cc6:	f043 0301 	orr.w	r3, r3, #1
 8012cca:	81a3      	strh	r3, [r4, #12]
 8012ccc:	89a3      	ldrh	r3, [r4, #12]
 8012cce:	431d      	orrs	r5, r3
 8012cd0:	81a5      	strh	r5, [r4, #12]
 8012cd2:	e7cf      	b.n	8012c74 <__smakebuf_r+0x18>

08012cd4 <_fstat_r>:
 8012cd4:	b538      	push	{r3, r4, r5, lr}
 8012cd6:	4d07      	ldr	r5, [pc, #28]	; (8012cf4 <_fstat_r+0x20>)
 8012cd8:	2300      	movs	r3, #0
 8012cda:	4604      	mov	r4, r0
 8012cdc:	4608      	mov	r0, r1
 8012cde:	4611      	mov	r1, r2
 8012ce0:	602b      	str	r3, [r5, #0]
 8012ce2:	f7ee ff93 	bl	8001c0c <_fstat>
 8012ce6:	1c43      	adds	r3, r0, #1
 8012ce8:	d102      	bne.n	8012cf0 <_fstat_r+0x1c>
 8012cea:	682b      	ldr	r3, [r5, #0]
 8012cec:	b103      	cbz	r3, 8012cf0 <_fstat_r+0x1c>
 8012cee:	6023      	str	r3, [r4, #0]
 8012cf0:	bd38      	pop	{r3, r4, r5, pc}
 8012cf2:	bf00      	nop
 8012cf4:	200162c0 	.word	0x200162c0

08012cf8 <_isatty_r>:
 8012cf8:	b538      	push	{r3, r4, r5, lr}
 8012cfa:	4d06      	ldr	r5, [pc, #24]	; (8012d14 <_isatty_r+0x1c>)
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	4604      	mov	r4, r0
 8012d00:	4608      	mov	r0, r1
 8012d02:	602b      	str	r3, [r5, #0]
 8012d04:	f7ee ff92 	bl	8001c2c <_isatty>
 8012d08:	1c43      	adds	r3, r0, #1
 8012d0a:	d102      	bne.n	8012d12 <_isatty_r+0x1a>
 8012d0c:	682b      	ldr	r3, [r5, #0]
 8012d0e:	b103      	cbz	r3, 8012d12 <_isatty_r+0x1a>
 8012d10:	6023      	str	r3, [r4, #0]
 8012d12:	bd38      	pop	{r3, r4, r5, pc}
 8012d14:	200162c0 	.word	0x200162c0

08012d18 <__assert_func>:
 8012d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d1a:	4614      	mov	r4, r2
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	4b09      	ldr	r3, [pc, #36]	; (8012d44 <__assert_func+0x2c>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	4605      	mov	r5, r0
 8012d24:	68d8      	ldr	r0, [r3, #12]
 8012d26:	b14c      	cbz	r4, 8012d3c <__assert_func+0x24>
 8012d28:	4b07      	ldr	r3, [pc, #28]	; (8012d48 <__assert_func+0x30>)
 8012d2a:	9100      	str	r1, [sp, #0]
 8012d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d30:	4906      	ldr	r1, [pc, #24]	; (8012d4c <__assert_func+0x34>)
 8012d32:	462b      	mov	r3, r5
 8012d34:	f000 f844 	bl	8012dc0 <fiprintf>
 8012d38:	f7fd faf6 	bl	8010328 <abort>
 8012d3c:	4b04      	ldr	r3, [pc, #16]	; (8012d50 <__assert_func+0x38>)
 8012d3e:	461c      	mov	r4, r3
 8012d40:	e7f3      	b.n	8012d2a <__assert_func+0x12>
 8012d42:	bf00      	nop
 8012d44:	200009d0 	.word	0x200009d0
 8012d48:	0802c9cf 	.word	0x0802c9cf
 8012d4c:	0802c9dc 	.word	0x0802c9dc
 8012d50:	0802ca0a 	.word	0x0802ca0a

08012d54 <_calloc_r>:
 8012d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d56:	fba1 2402 	umull	r2, r4, r1, r2
 8012d5a:	b94c      	cbnz	r4, 8012d70 <_calloc_r+0x1c>
 8012d5c:	4611      	mov	r1, r2
 8012d5e:	9201      	str	r2, [sp, #4]
 8012d60:	f7fd fb1a 	bl	8010398 <_malloc_r>
 8012d64:	9a01      	ldr	r2, [sp, #4]
 8012d66:	4605      	mov	r5, r0
 8012d68:	b930      	cbnz	r0, 8012d78 <_calloc_r+0x24>
 8012d6a:	4628      	mov	r0, r5
 8012d6c:	b003      	add	sp, #12
 8012d6e:	bd30      	pop	{r4, r5, pc}
 8012d70:	220c      	movs	r2, #12
 8012d72:	6002      	str	r2, [r0, #0]
 8012d74:	2500      	movs	r5, #0
 8012d76:	e7f8      	b.n	8012d6a <_calloc_r+0x16>
 8012d78:	4621      	mov	r1, r4
 8012d7a:	f7fe fa31 	bl	80111e0 <memset>
 8012d7e:	e7f4      	b.n	8012d6a <_calloc_r+0x16>

08012d80 <__ascii_mbtowc>:
 8012d80:	b082      	sub	sp, #8
 8012d82:	b901      	cbnz	r1, 8012d86 <__ascii_mbtowc+0x6>
 8012d84:	a901      	add	r1, sp, #4
 8012d86:	b142      	cbz	r2, 8012d9a <__ascii_mbtowc+0x1a>
 8012d88:	b14b      	cbz	r3, 8012d9e <__ascii_mbtowc+0x1e>
 8012d8a:	7813      	ldrb	r3, [r2, #0]
 8012d8c:	600b      	str	r3, [r1, #0]
 8012d8e:	7812      	ldrb	r2, [r2, #0]
 8012d90:	1e10      	subs	r0, r2, #0
 8012d92:	bf18      	it	ne
 8012d94:	2001      	movne	r0, #1
 8012d96:	b002      	add	sp, #8
 8012d98:	4770      	bx	lr
 8012d9a:	4610      	mov	r0, r2
 8012d9c:	e7fb      	b.n	8012d96 <__ascii_mbtowc+0x16>
 8012d9e:	f06f 0001 	mvn.w	r0, #1
 8012da2:	e7f8      	b.n	8012d96 <__ascii_mbtowc+0x16>

08012da4 <__ascii_wctomb>:
 8012da4:	b149      	cbz	r1, 8012dba <__ascii_wctomb+0x16>
 8012da6:	2aff      	cmp	r2, #255	; 0xff
 8012da8:	bf85      	ittet	hi
 8012daa:	238a      	movhi	r3, #138	; 0x8a
 8012dac:	6003      	strhi	r3, [r0, #0]
 8012dae:	700a      	strbls	r2, [r1, #0]
 8012db0:	f04f 30ff 	movhi.w	r0, #4294967295
 8012db4:	bf98      	it	ls
 8012db6:	2001      	movls	r0, #1
 8012db8:	4770      	bx	lr
 8012dba:	4608      	mov	r0, r1
 8012dbc:	4770      	bx	lr
	...

08012dc0 <fiprintf>:
 8012dc0:	b40e      	push	{r1, r2, r3}
 8012dc2:	b503      	push	{r0, r1, lr}
 8012dc4:	4601      	mov	r1, r0
 8012dc6:	ab03      	add	r3, sp, #12
 8012dc8:	4805      	ldr	r0, [pc, #20]	; (8012de0 <fiprintf+0x20>)
 8012dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dce:	6800      	ldr	r0, [r0, #0]
 8012dd0:	9301      	str	r3, [sp, #4]
 8012dd2:	f7ff fd55 	bl	8012880 <_vfiprintf_r>
 8012dd6:	b002      	add	sp, #8
 8012dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ddc:	b003      	add	sp, #12
 8012dde:	4770      	bx	lr
 8012de0:	200009d0 	.word	0x200009d0

08012de4 <_exit>:
 8012de4:	e7fe      	b.n	8012de4 <_exit>
	...

08012de8 <_init>:
 8012de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dea:	bf00      	nop
 8012dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dee:	bc08      	pop	{r3}
 8012df0:	469e      	mov	lr, r3
 8012df2:	4770      	bx	lr

08012df4 <_fini>:
 8012df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df6:	bf00      	nop
 8012df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dfa:	bc08      	pop	{r3}
 8012dfc:	469e      	mov	lr, r3
 8012dfe:	4770      	bx	lr
